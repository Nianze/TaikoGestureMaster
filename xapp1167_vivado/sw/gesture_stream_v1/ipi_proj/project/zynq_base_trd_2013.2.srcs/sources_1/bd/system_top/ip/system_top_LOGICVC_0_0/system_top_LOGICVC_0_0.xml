<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xylon</spirit:vendor>
  <spirit:library>customized_ip</spirit:library>
  <spirit:name>system_top_LOGICVC_0_0</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>m_axi</spirit:name>
      <spirit:displayName>M_AXI</spirit:displayName>
      <spirit:description>AXI4 bus master interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm_rtl" spirit:version="1.0"/>
      <spirit:master>
        <spirit:addressSpaceRef spirit:addressSpaceRef="videoData"/>
      </spirit:master>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARSIZE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARSIZE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_BID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_RDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARQOS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARQOS</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARADDR</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWADDR</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_RID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARBURST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARBURST</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_RRESP</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWLEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWLEN</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARPROT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARPROT</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWBURST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWBURST</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWSIZE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWSIZE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARLOCK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARLOCK</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RLAST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_RLAST</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWLOCK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWLOCK</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARCACHE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARCACHE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_WDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_RREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_BREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWQOS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWQOS</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_BVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WSTRB</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_WSTRB</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_BRESP</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWPROT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWPROT</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_WVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWCACHE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_AWCACHE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WLAST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_WLAST</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_RVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARLEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARLEN</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_WREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>s_axi</spirit:name>
      <spirit:displayName>S_AXI</spirit:displayName>
      <spirit:description>AXI4-Lite bus slave interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm_rtl" spirit:version="1.0"/>
      <spirit:slave>
        <spirit:memoryMapRef spirit:memoryMapRef="s_axi"/>
      </spirit:slave>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_AWVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_BREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_AWREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARADDR</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_AWADDR</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_BVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RRESP</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WSTRB</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WSTRB</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_BRESP</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>m_aclk</spirit:name>
      <spirit:displayName>M_ACLK</spirit:displayName>
      <spirit:description>AXI4 bus interface clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ACLK</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.M_AXI_ACLK.ASSOCIATED_BUSIF">m_axi</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.M_AXI_ACLK.ASSOCIATED_RESET">M_AXI_ARESETN</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>m_aresetn</spirit:name>
      <spirit:displayName>M_ARESETN</spirit:displayName>
      <spirit:description>AXI4 bus interface reset</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXI_ARESETN</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.M_AXI_ARESETN.POLARITY">ACTIVE_LOW</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>interrupt</spirit:name>
      <spirit:displayName>interrupt</spirit:displayName>
      <spirit:description>Interrupt port</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>s_aclk</spirit:name>
      <spirit:displayName>S_ACLK</spirit:displayName>
      <spirit:description>AXI4-Lite bus interface clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ACLK</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.ASSOCIATED_BUSIF">s_axi</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.ASSOCIATED_RESET">S_AXI_ARESETN</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>s_aresetn</spirit:name>
      <spirit:displayName>S_ARESETN</spirit:displayName>
      <spirit:description>AXI4-Lite bus interface reset</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARESETN</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ARESETN.POLARITY">ACTIVE_LOW</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:addressSpaces>
    <spirit:addressSpace>
      <spirit:name>videoData</spirit:name>
      <spirit:range>4G</spirit:range>
      <spirit:width>32</spirit:width>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>OFFSET_BASE_PARAM</spirit:name>
          <spirit:value spirit:id="ADDRSPACEPARAM_VALUE.VIDEODATA.OFFSET_BASE_PARAM">C_VMEM_BASEADDR</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>OFFSET_HIGH_PARAM</spirit:name>
          <spirit:value spirit:id="ADDRSPACEPARAM_VALUE.VIDEODATA.OFFSET_HIGH_PARAM">C_VMEM_HIGHADDR</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:addressSpace>
  </spirit:addressSpaces>
  <spirit:memoryMaps>
    <spirit:memoryMap>
      <spirit:name>s_axi</spirit:name>
      <spirit:addressBlock>
        <spirit:name>Reg</spirit:name>
        <spirit:baseAddress spirit:format="long" spirit:resolve="immediate">0</spirit:baseAddress>
        <spirit:range spirit:format="long" spirit:resolve="generated">64K</spirit:range>
        <spirit:width>32</spirit:width>
        <spirit:usage>register</spirit:usage>
        <spirit:access>read-write</spirit:access>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>OFFSET_BASE_PARAM</spirit:name>
            <spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.REG.OFFSET_BASE_PARAM">C_REGS_BASEADDR</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>OFFSET_HIGH_PARAM</spirit:name>
            <spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.REG.OFFSET_HIGH_PARAM">C_REGS_HIGHADDR</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:addressBlock>
    </spirit:memoryMap>
  </spirit:memoryMaps>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_vhdlsynthesis</spirit:name>
        <spirit:displayName>VHDL Synthesis</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlsynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>3077319237</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>2</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>rst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>mclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>vclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>vclk2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_PIXEL_DATA_WIDTH = 12 &amp;&amp; PARAM_VALUE.C_USE_VCLK2 = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>itu_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>lvds_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>lvds_clkn</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_req</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_wr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_ack</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_addr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_data</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_XMB_DATA_BUS_WIDTH&apos;)) - 1)">63</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_data_be</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XMB_DATA_BUS_WIDTH&apos;)) div 8) - 1)">7</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_wrack</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_burst</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_MEM_BURST&apos;)) - 1)">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_data_valid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mem_data_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_XMB_DATA_BUS_WIDTH&apos;)) - 1)">63</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mplb_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mplb_rst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_maddrack</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mrearbitrate</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mssize</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mbusy</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mrderr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mwrerr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mtimeout</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mirq</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_request</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_priority</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_buslock</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_rnw</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_be</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_MPLB_DWIDTH&apos;)) div 8) - 1)">7</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_size</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_type</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">2</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_msize</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_tattribute</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">15</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_lockerr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_abort</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_abus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_MPLB_AWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_uabus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_MPLB_AWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mwrdack</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mwrbterm</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_wrburst</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_wrdbus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_MPLB_DWIDTH&apos;)) - 1)">63</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mrddack</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mrdbterm</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mrdwdaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>plb_mrddbus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_MPLB_DWIDTH&apos;)) - 1)">63</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>m_rdburst</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ACLK</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARESETN</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_THREAD_ID_WIDTH&apos;)) - 1)">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWADDR</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWLEN</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">7</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWSIZE</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWBURST</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWLOCK</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWCACHE</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWPROT</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWQOS</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_AWREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_WDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_DATA_WIDTH&apos;)) - 1)">127</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_WSTRB</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_DATA_WIDTH&apos;)) div 8) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_WLAST</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_WVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_WREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_BID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_THREAD_ID_WIDTH&apos;)) - 1)">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_BRESP</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_BVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_BREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_THREAD_ID_WIDTH&apos;)) - 1)">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARADDR</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARLEN</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">7</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARSIZE</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARBURST</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARLOCK</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARCACHE</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARPROT</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARQOS</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_ARREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_RID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_THREAD_ID_WIDTH&apos;)) - 1)">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_RDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_M_AXI_DATA_WIDTH&apos;)) - 1)">127</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_RRESP</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_RLAST</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_RVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXI_RREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_Clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_Rst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_ABus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OPB_AWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_BE</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_OPB_DWIDTH&apos;)) div 8) - 1)">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_RNW</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_select</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_seqAddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>OPB_DBus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OPB_DWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_DBus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OPB_DWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_errAck</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_retry</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_toutSup</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_xferAck</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 0">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>SPLB_Clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>SPLB_Rst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_ABus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_AWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_UABus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_AWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_PAValid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_SAValid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_rdPrim</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_wrPrim</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_masterID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_MID_WIDTH&apos;)) - 1)">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_abort</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_busLock</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_RNW</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_BE</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_DWIDTH&apos;)) div 8) - 1)">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_MSize</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_size</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_type</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">2</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_tattribute</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">15</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_lockErr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_wrDBus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_DWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_wrBurst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_rdBurst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_rdPendReq</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_wrPendReq</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_rdPendPri</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_wrPendPri</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PLB_reqPri</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_addrAck</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_SSize</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_wait</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_rearbitrate</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_wrDAck</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_wrComp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_wrBTerm</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_rdDBus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_DWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_rdWdAddr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_rdDAck</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_rdComp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_rdBTerm</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_MBusy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_NUM_MASTERS&apos;)) - 1)">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_MRdErr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_NUM_MASTERS&apos;)) - 1)">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_MWrErr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_NUM_MASTERS&apos;)) - 1)">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_MIRQ</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_SPLB_NUM_MASTERS&apos;)) - 1)">1</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ACLK</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARESETN</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_AWADDR</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_AWVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_AWREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WSTRB</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) div 8) - 1)">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_BRESP</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_BVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_BREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARADDR</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RRESP</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">1</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_REGS_INTERFACE = 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pix_clk_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>pix_clk_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>pix_clk_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>pix_clk_n_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>pix_clk_n_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>pix_clk_n_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>d_pix_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIXEL_DATA_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>d_pix_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIXEL_DATA_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>d_pix_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>hsync_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>hsync_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>hsync_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>vsync_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>vsync_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>vsync_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>blank_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>blank_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>blank_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>itu656_clk_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>itu656_data_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">7</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>lvds_data_out_p</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LVDS_DATA_WIDTH&apos;)) - 1)">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>lvds_data_out_n</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LVDS_DATA_WIDTH&apos;)) - 1)">3</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>lvds_clk_out_p</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>lvds_clk_out_n</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pllvclk_locked</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>dvi_clk_p</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 5">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>dvi_clk_n</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 5">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>dvi_data_p</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 5">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>dvi_data_n</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 5">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_vclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_vsync</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_hsync</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_blank</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_data</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_E_DATA_WIDTH&apos;)) - 1)">23</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_video_present</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>required</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_curr_vbuff</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LAYERS&apos;)) * 2) - 1)">5</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled>true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_next_vbuff</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LAYERS&apos;)) * 2) - 1)">5</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_sw_vbuff</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LAYERS&apos;)) - 1)">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>e_sw_grant</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LAYERS&apos;)) - 1)">2</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gpi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gpo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>en_vdd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>en_blight</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>v_en</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>en_vee</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="integer">
        <spirit:name>C_IP_LICENSE_TYPE</spirit:name>
        <spirit:displayName>IP license type</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IP_LICENSE_TYPE">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_IP_MAJOR_REVISION</spirit:name>
        <spirit:displayName>IP major revision</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IP_MAJOR_REVISION">3</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_IP_MINOR_REVISION</spirit:name>
        <spirit:displayName>IP minor revision</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IP_MINOR_REVISION">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_IP_PATCH_LEVEL</spirit:name>
        <spirit:displayName>IP patch level</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IP_PATCH_LEVEL">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_IP_LICENSE_CHECK</spirit:name>
        <spirit:displayName>IP license check</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IP_LICENSE_CHECK">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_IP_TIME_BEFORE_BREAK</spirit:name>
        <spirit:displayName>IP time before break</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IP_TIME_BEFORE_BREAK">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_FAMILY</spirit:name>
        <spirit:value spirit:format="string" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FAMILY">zynq</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_VMEM_INTERFACE</spirit:name>
        <spirit:displayName>Use XMB, MPLB or AXI4 to access memory</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_VMEM_INTERFACE" spirit:maximum="2" spirit:rangeType="long">2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_VMEM_BASEADDR</spirit:name>
        <spirit:displayName>Video memory base address</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_VMEM_BASEADDR" spirit:bitStringLength="32">0x30000000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_VMEM_HIGHADDR</spirit:name>
        <spirit:displayName>Video memory high address</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_VMEM_HIGHADDR" spirit:bitStringLength="32">0x37ffffff</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MEM_BURST</spirit:name>
        <spirit:displayName>Number of transfers per burst</spirit:displayName>
        <spirit:description>For AXI4 and XMB interface available values are 16, 32 and 64. For 32-bit PLB interface bus only a burst of 16 words is possible, while for 64-bit and 128-bit PLB interface bus any of the available values can be selected.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MEM_BURST">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MEM_BYTE_SWAP</spirit:name>
        <spirit:displayName>Swap bytes for logiCVC memory access</spirit:displayName>
        <spirit:description>If set this will change byte ordering on memory interface bus (B0B1B2B3 => B3B2B1B0 for 32-bit memory interface data bus width, B0B1B2B3B4B5B6B7 => B7B6B5B4B3B2B1B0 for 64-bit memory interface data bus width).</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MEM_BYTE_SWAP" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MEM_LITTLE_ENDIAN</spirit:name>
        <spirit:displayName>Endianness for logiCVC memory access</spirit:displayName>
        <spirit:description>Default endianness for logiCVC memory access is little when AXI4 or XMB is implemented, and big when PLB is implemented.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MEM_LITTLE_ENDIAN" spirit:maximum="1" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_INCREASE_FIFO</spirit:name>
        <spirit:displayName>FIFO size multiplication factor</spirit:displayName>
        <spirit:description>User can choose to increase the size of each layer FIFO at the expense of bigger BRAM utilization.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INCREASE_FIFO">2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MPLB_NUM_MASTERS</spirit:name>
        <spirit:displayName>MPLB number of masters</spirit:displayName>
        <spirit:description>Number of masters on MPLB interface bus.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MPLB_NUM_MASTERS">8</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MPLB_AWIDTH</spirit:name>
        <spirit:displayName>MPLB address width</spirit:displayName>
        <spirit:description>MPLB interface address bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MPLB_AWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MPLB_DWIDTH</spirit:name>
        <spirit:displayName>MPLB data width</spirit:displayName>
        <spirit:description>MPLB interface data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MPLB_DWIDTH">64</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MPLB_PRIORITY</spirit:name>
        <spirit:displayName>MPLB priority</spirit:displayName>
        <spirit:description>Priority on MPLB interface bus: 0 - the lowest, 3 - the highest.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MPLB_PRIORITY">3</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_MPLB_SMALLEST_SLAVE</spirit:name>
        <spirit:displayName>MPLB smallest slave</spirit:displayName>
        <spirit:description>Smallest slave on MPLB interface bus.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MPLB_SMALLEST_SLAVE">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_XMB_DATA_BUS_WIDTH</spirit:name>
        <spirit:displayName>XMB data width</spirit:displayName>
        <spirit:description>XMB interface data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_XMB_DATA_BUS_WIDTH">64</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_M_AXI_THREAD_ID_WIDTH</spirit:name>
        <spirit:displayName>AXI4 thread ID width</spirit:displayName>
        <spirit:description>AXI4 interface thread ID width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_M_AXI_THREAD_ID_WIDTH">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_M_AXI_DATA_WIDTH</spirit:name>
        <spirit:displayName>AXI4 data width</spirit:displayName>
        <spirit:description>AXI4 interface data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_M_AXI_DATA_WIDTH">128</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_M_AXI_ADDR_WIDTH</spirit:name>
        <spirit:displayName>AXI4 address width</spirit:displayName>
        <spirit:description>AXI4 interface address bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_M_AXI_ADDR_WIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_REGS_INTERFACE</spirit:name>
        <spirit:displayName>Use OPB, SPLB or AXI4-Lite to access logiCVC registers</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_REGS_INTERFACE" spirit:maximum="2" spirit:rangeType="long">2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_READABLE_REGS</spirit:name>
        <spirit:displayName>Readable logiCVC registers</spirit:displayName>
        <spirit:description>To save additional resources user can disable the read register interface. In this mode only interrupt status register, double/triple video/CLUT buffer registers, power control register and IP version register are readable.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_READABLE_REGS" spirit:maximum="1" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_REG_BYTE_SWAP</spirit:name>
        <spirit:displayName>Swap bytes for logiCVC register access</spirit:displayName>
        <spirit:description>If set this will change byte ordering on register interface bus (B0B1B2B3 => B3B2B1B0).</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_REG_BYTE_SWAP" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_REGS_BASEADDR</spirit:name>
        <spirit:displayName>Registers base address</spirit:displayName>
        <spirit:description>Registers base address - used only if OPB or SPLB bus interface is implemented.</spirit:description>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_REGS_BASEADDR" spirit:bitStringLength="32">0x40030000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_REGS_HIGHADDR</spirit:name>
        <spirit:displayName>Registers high address</spirit:displayName>
        <spirit:description>Registers high address - used only if OPB or SPLB bus interface is implemented.</spirit:description>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_REGS_HIGHADDR" spirit:bitStringLength="32">0x4003FFFF</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_OPB_AWIDTH</spirit:name>
        <spirit:displayName>OPB address width</spirit:displayName>
        <spirit:description>OPB interface address bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_OPB_AWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_OPB_DWIDTH</spirit:name>
        <spirit:displayName>OPB data width</spirit:displayName>
        <spirit:description>OPB interface data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_OPB_DWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SPLB_NUM_MASTERS</spirit:name>
        <spirit:displayName>SPLB number of masters</spirit:displayName>
        <spirit:description>Number of masters on SPLB interface bus.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SPLB_NUM_MASTERS">2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SPLB_MID_WIDTH</spirit:name>
        <spirit:displayName>SPLB MID width</spirit:displayName>
        <spirit:description>PLB master ID bus width, the value is log2(C_SPLB_NUM_MASTERS).</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SPLB_MID_WIDTH">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SPLB_AWIDTH</spirit:name>
        <spirit:displayName>SPLB address width</spirit:displayName>
        <spirit:description>SPLB interface address bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SPLB_AWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SPLB_DWIDTH</spirit:name>
        <spirit:displayName>SPLB data width</spirit:displayName>
        <spirit:description>SPLB interface data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SPLB_DWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SPLB_NATIVE_DWIDTH</spirit:name>
        <spirit:displayName>SPLB native data width</spirit:displayName>
        <spirit:description>SPLB interface native data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SPLB_NATIVE_DWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
        <spirit:displayName>AXI4-Lite address width</spirit:displayName>
        <spirit:description>AXI4-Lite interface address bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
        <spirit:displayName>AXI4-Lite data width</spirit:displayName>
        <spirit:description>AXI4-Lite interface data bus width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIXEL_DATA_WIDTH</spirit:name>
        <spirit:displayName>Pixel data width</spirit:displayName>
        <spirit:description>Parallel pixel data width towards the display - bits per pixel (bpp).</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIXEL_DATA_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_VCLK2</spirit:name>
        <spirit:displayName>Use vclk2 for DDR pixel data output</spirit:displayName>
        <spirit:description>Pixel clock rising edge is set in the middle of the DDR RGB data eye, or if not used, synchronous.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_VCLK2" spirit:maximum="1" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_ROW_STRIDE</spirit:name>
        <spirit:displayName>Row stride</spirit:displayName>
        <spirit:description>Distance between same column pixels for adjacent rows in pixels.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_ROW_STRIDE">2048</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_XCOLOR</spirit:name>
        <spirit:displayName>XCOLOR function</spirit:displayName>
        <spirit:description>Enable XCOLOR functionality - pixel dithering.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_XCOLOR" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_SIZE_POSITION</spirit:name>
        <spirit:displayName>Use layer size, position and offset</spirit:displayName>
        <spirit:description>Enable functionality of configurable layer size, position and offset.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_SIZE_POSITION" spirit:maximum="1" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_DISPLAY_INTERFACE</spirit:name>
        <spirit:displayName>Display interface type</spirit:displayName>
        <spirit:description>Enable different output types. Parallel output is always active.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_DISPLAY_INTERFACE" spirit:maximum="5" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_DISPLAY_COLOR_SPACE</spirit:name>
        <spirit:displayName>Display interface color format</spirit:displayName>
        <spirit:description>Select output color space and format.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_DISPLAY_COLOR_SPACE" spirit:maximum="2" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LVDS_DATA_WIDTH</spirit:name>
        <spirit:displayName>LVDS data width</spirit:displayName>
        <spirit:description>Data width of the LVDS display interface type.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LVDS_DATA_WIDTH" spirit:maximum="4" spirit:rangeType="long">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_VCLK_PERIOD</spirit:name>
        <spirit:displayName>VCLK clock period defined in ps</spirit:displayName>
        <spirit:description>VCLK period in ps when DVI display interface type is implemented.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_VCLK_PERIOD" spirit:maximum="52631" spirit:rangeType="long">25000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="positive">
        <spirit:name>C_NUM_OF_LAYERS</spirit:name>
        <spirit:displayName>Number of layers</spirit:displayName>
        <spirit:description>Number of logiCVC layers to be instantiated.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_NUM_OF_LAYERS" spirit:maximum="5" spirit:rangeType="long">3</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_0_TYPE</spirit:name>
        <spirit:displayName>Layer type</spirit:displayName>
        <spirit:description>Select between RGB or YCbCr layer.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_0_TYPE" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_1_TYPE</spirit:name>
        <spirit:displayName>Layer type</spirit:displayName>
        <spirit:description>Select between RGB, YCbCr or alpha layer.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_1_TYPE" spirit:maximum="2" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_2_TYPE</spirit:name>
        <spirit:displayName>Layer type</spirit:displayName>
        <spirit:description>Select between RGB or YCbCr layer.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_2_TYPE" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_3_TYPE</spirit:name>
        <spirit:displayName>Layer type</spirit:displayName>
        <spirit:description>Select between RGB, YCbCr or alpha layer.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_3_TYPE" spirit:maximum="2" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_4_TYPE</spirit:name>
        <spirit:displayName>Layer type</spirit:displayName>
        <spirit:description>Select between RGB or YCbCr layer.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_4_TYPE" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="positive">
        <spirit:name>C_LAYER_0_DATA_WIDTH</spirit:name>
        <spirit:displayName>Layer data width</spirit:displayName>
        <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_0_DATA_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="positive">
        <spirit:name>C_LAYER_1_DATA_WIDTH</spirit:name>
        <spirit:displayName>Layer data width</spirit:displayName>
        <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_1_DATA_WIDTH">24</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="positive">
        <spirit:name>C_LAYER_2_DATA_WIDTH</spirit:name>
        <spirit:displayName>Layer data width</spirit:displayName>
        <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_2_DATA_WIDTH">24</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="positive">
        <spirit:name>C_LAYER_3_DATA_WIDTH</spirit:name>
        <spirit:displayName>Layer data width</spirit:displayName>
        <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_3_DATA_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="positive">
        <spirit:name>C_LAYER_4_DATA_WIDTH</spirit:name>
        <spirit:displayName>Layer data width</spirit:displayName>
        <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_4_DATA_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_0_ALPHA_MODE</spirit:name>
        <spirit:displayName>Alpha blending mode</spirit:displayName>
        <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_0_ALPHA_MODE" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_1_ALPHA_MODE</spirit:name>
        <spirit:displayName>Alpha blending mode</spirit:displayName>
        <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_1_ALPHA_MODE" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_2_ALPHA_MODE</spirit:name>
        <spirit:displayName>Alpha blending mode</spirit:displayName>
        <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_2_ALPHA_MODE" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_3_ALPHA_MODE</spirit:name>
        <spirit:displayName>Alpha blending mode</spirit:displayName>
        <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_3_ALPHA_MODE" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_4_ALPHA_MODE</spirit:name>
        <spirit:displayName>Alpha blending mode</spirit:displayName>
        <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_4_ALPHA_MODE" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_BACKGROUND</spirit:name>
        <spirit:displayName>Configure last layer as background</spirit:displayName>
        <spirit:description>In case the last layer is configured as background, pixel value is read from logiCVC background color register and not from video memory buffer.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_BACKGROUND" spirit:maximum="1" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_XTREME_DSP</spirit:name>
        <spirit:displayName>Use DSP resources for blender</spirit:displayName>
        <spirit:description>Enable or disable the use of DSP resources for blender.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_XTREME_DSP" spirit:maximum="2" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_MULTIPLIER</spirit:name>
        <spirit:displayName>Type of multiplier used in blender</spirit:displayName>
        <spirit:description>Control the way in which multipliers in blender are implemented: 0 - LUT, 1 - block, 2 - auto.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_MULTIPLIER" spirit:maximum="2" spirit:rangeType="long">2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_0_OFFSET</spirit:name>
        <spirit:displayName>Layer address offset</spirit:displayName>
        <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_0_OFFSET" spirit:minimum="0">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_1_OFFSET</spirit:name>
        <spirit:displayName>Layer address offset</spirit:displayName>
        <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_1_OFFSET" spirit:minimum="0">1620</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_2_OFFSET</spirit:name>
        <spirit:displayName>Layer address offset</spirit:displayName>
        <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_2_OFFSET" spirit:minimum="0">4096</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_3_OFFSET</spirit:name>
        <spirit:displayName>Layer address offset</spirit:displayName>
        <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_3_OFFSET" spirit:minimum="0">6144</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LAYER_4_OFFSET</spirit:name>
        <spirit:displayName>Layer address offset</spirit:displayName>
        <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LAYER_4_OFFSET" spirit:minimum="0">8192</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_BUFFER_0_OFFSET</spirit:name>
        <spirit:displayName>Double buffer address offset</spirit:displayName>
        <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BUFFER_0_OFFSET" spirit:minimum="0">1080</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_BUFFER_1_OFFSET</spirit:name>
        <spirit:displayName>Double buffer address offset</spirit:displayName>
        <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BUFFER_1_OFFSET" spirit:minimum="0">1080</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_BUFFER_2_OFFSET</spirit:name>
        <spirit:displayName>Double buffer address offset</spirit:displayName>
        <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BUFFER_2_OFFSET" spirit:minimum="0">1024</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_BUFFER_3_OFFSET</spirit:name>
        <spirit:displayName>Double buffer address offset</spirit:displayName>
        <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BUFFER_3_OFFSET" spirit:minimum="0">1024</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_BUFFER_4_OFFSET</spirit:name>
        <spirit:displayName>Double buffer address offset</spirit:displayName>
        <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BUFFER_4_OFFSET" spirit:minimum="0">1024</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_E_PARALLEL_INPUT</spirit:name>
        <spirit:displayName>Use external parallel input</spirit:displayName>
        <spirit:description>Syncronize logiCVC to external parallel input and use data as one of the layers.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_E_PARALLEL_INPUT" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_E_VCLK_BUFGMUX</spirit:name>
        <spirit:displayName>Use BUFGMUX for external parallel input</spirit:displayName>
        <spirit:description>Use BUFGMUX for switching clock for external parallel input synchronization.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_E_VCLK_BUFGMUX" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_E_LAYER</spirit:name>
        <spirit:displayName>Route external parallel input to layer</spirit:displayName>
        <spirit:description>Which layer should be used as external parallel stream.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_E_LAYER" spirit:maximum="4" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_E_DATA_WIDTH</spirit:name>
        <spirit:displayName>External parallel input data width</spirit:displayName>
        <spirit:description>External parallel input data width.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_E_DATA_WIDTH">24</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_DVI_CLK_MODE</spirit:name>
        <spirit:displayName>DVI transmitter clocking mode</spirit:displayName>
        <spirit:description>Valid only for 7-series FPGA devices. Please consult the logiCVC-ML user&apos;s manual for more information on selecting the appropriate mode.</spirit:description>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_DVI_CLK_MODE" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choices_0</spirit:name>
      <spirit:enumeration spirit:text="evaluation">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_1</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_2</spirit:name>
      <spirit:enumeration spirit:text="1h">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_3</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_4</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_5</spirit:name>
      <spirit:enumeration spirit:text="OPB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="SPLB">1</spirit:enumeration>
      <spirit:enumeration spirit:text="AXI4-Lite">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_6</spirit:name>
      <spirit:enumeration spirit:text="MPLB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="XMB">1</spirit:enumeration>
      <spirit:enumeration spirit:text="AXI4">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_7</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_8</spirit:name>
      <spirit:enumeration spirit:text="big">0</spirit:enumeration>
      <spirit:enumeration spirit:text="little">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_9</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_10</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_11</spirit:name>
      <spirit:enumeration spirit:text="1x">1</spirit:enumeration>
      <spirit:enumeration spirit:text="2x">2</spirit:enumeration>
      <spirit:enumeration spirit:text="4x">4</spirit:enumeration>
      <spirit:enumeration spirit:text="8x">8</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_12</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
      <spirit:enumeration spirit:text="auto">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_13</spirit:name>
      <spirit:enumeration spirit:text="LUT">0</spirit:enumeration>
      <spirit:enumeration spirit:text="block">1</spirit:enumeration>
      <spirit:enumeration spirit:text="auto">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_14</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_15</spirit:name>
      <spirit:enumeration spirit:text="RGB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr 422">1</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr 444">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_16</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_17</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_18</spirit:name>
      <spirit:enumeration spirit:text="no">0</spirit:enumeration>
      <spirit:enumeration spirit:text="yes">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_19</spirit:name>
      <spirit:enumeration spirit:text="RGB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_20</spirit:name>
      <spirit:enumeration spirit:text="layer">0</spirit:enumeration>
      <spirit:enumeration spirit:text="pixel">1</spirit:enumeration>
      <spirit:enumeration spirit:text="16-bit CLUT">2</spirit:enumeration>
      <spirit:enumeration spirit:text="24-bit CLUT">3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_21</spirit:name>
      <spirit:enumeration spirit:text="RGB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr">1</spirit:enumeration>
      <spirit:enumeration spirit:text="Alpha">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_22</spirit:name>
      <spirit:enumeration spirit:text="RGB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_23</spirit:name>
      <spirit:enumeration spirit:text="RGB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr">1</spirit:enumeration>
      <spirit:enumeration spirit:text="Alpha">2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_24</spirit:name>
      <spirit:enumeration spirit:text="RGB">0</spirit:enumeration>
      <spirit:enumeration spirit:text="YCbCr">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_25</spirit:name>
      <spirit:enumeration spirit:text="layer">0</spirit:enumeration>
      <spirit:enumeration spirit:text="pixel">1</spirit:enumeration>
      <spirit:enumeration spirit:text="16-bit CLUT">2</spirit:enumeration>
      <spirit:enumeration spirit:text="24-bit CLUT">3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_26</spirit:name>
      <spirit:enumeration spirit:text="layer">0</spirit:enumeration>
      <spirit:enumeration spirit:text="pixel">1</spirit:enumeration>
      <spirit:enumeration spirit:text="16-bit CLUT">2</spirit:enumeration>
      <spirit:enumeration spirit:text="24-bit CLUT">3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_27</spirit:name>
      <spirit:enumeration spirit:text="layer">0</spirit:enumeration>
      <spirit:enumeration spirit:text="pixel">1</spirit:enumeration>
      <spirit:enumeration spirit:text="16-bit CLUT">2</spirit:enumeration>
      <spirit:enumeration spirit:text="24-bit CLUT">3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_28</spirit:name>
      <spirit:enumeration spirit:text="layer">0</spirit:enumeration>
      <spirit:enumeration spirit:text="pixel">1</spirit:enumeration>
      <spirit:enumeration spirit:text="16-bit CLUT">2</spirit:enumeration>
      <spirit:enumeration spirit:text="24-bit CLUT">3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_29</spirit:name>
      <spirit:enumeration spirit:text="a">0</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_30</spirit:name>
      <spirit:enumeration spirit:text="16">4</spirit:enumeration>
      <spirit:enumeration spirit:text="32">5</spirit:enumeration>
      <spirit:enumeration spirit:text="64">6</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_31</spirit:name>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_32</spirit:name>
      <spirit:enumeration spirit:text="12*2">12</spirit:enumeration>
      <spirit:enumeration spirit:text="15">15</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="18">18</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_33</spirit:name>
      <spirit:enumeration spirit:text="512">512</spirit:enumeration>
      <spirit:enumeration spirit:text="1024">1024</spirit:enumeration>
      <spirit:enumeration spirit:text="2048">2048</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_34</spirit:name>
      <spirit:enumeration spirit:text="Parallel">0</spirit:enumeration>
      <spirit:enumeration spirit:text="ITU656">1</spirit:enumeration>
      <spirit:enumeration spirit:text="LVDS 4-bit">2</spirit:enumeration>
      <spirit:enumeration spirit:text="Camera link 4-bit">3</spirit:enumeration>
      <spirit:enumeration spirit:text="LVDS 3-bit">4</spirit:enumeration>
      <spirit:enumeration spirit:text="DVI">5</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_35</spirit:name>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_36</spirit:name>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_37</spirit:name>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_38</spirit:name>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_39</spirit:name>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="24">24</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_40</spirit:name>
      <spirit:enumeration spirit:text="32">32</spirit:enumeration>
      <spirit:enumeration spirit:text="64">64</spirit:enumeration>
      <spirit:enumeration spirit:text="128">128</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_41</spirit:name>
      <spirit:enumeration spirit:text="32">32</spirit:enumeration>
      <spirit:enumeration spirit:text="64">64</spirit:enumeration>
      <spirit:enumeration spirit:text="128">128</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_42</spirit:name>
      <spirit:enumeration spirit:text="32">32</spirit:enumeration>
      <spirit:enumeration spirit:text="64">64</spirit:enumeration>
      <spirit:enumeration spirit:text="128">128</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_43</spirit:name>
      <spirit:enumeration spirit:text="MMCM+BUFIO+2xBUFR">0</spirit:enumeration>
      <spirit:enumeration spirit:text="PLL+3xBUFG">1</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlsynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/rgb_ycrcb_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/colorpkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/logicvcpkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/xcolor_reg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/rgb_ycrcb_lib.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/brams.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/ycrcb_rgb.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/xcolor.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/universal_fifo.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/rgb_ycrcb.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/pselect.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/mux_2to1_en.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/inferred_bram.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/alpha_blend.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/addr_gen.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/video_fifo.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/videoaddr.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/vbuff_switch.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/syncs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/splb_wrapper.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/ser7to1_s6.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/ser7to1_k7.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/ser7to1_4ch.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/pix_merge.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/oserdes.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/opb_wrapper.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/mux_2_to_1.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/encode.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/dithering_color.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/clut.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/axi4_lite_wrapper.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/xutil.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/video_out.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/videorst.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/scramble.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/regs_file.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/plb_wrapper.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/lvds_ser_4ch_s6.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/lvds_ser_4ch_k7.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/lvds_ser_4ch.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/itu656_gen.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/dvi_tx.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/dither.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/a_flag_generator.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/axi_wrapper.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/adrcnt.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>logicvc_v3_01_a/hdl/src/vhdl/logicvc.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>logicvc_v3_01_a</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/system_top_LOGICVC_0_0.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>The logiCVC-ML - Compact Multilayer Video Controller is a graphics/video display controller optimized for Xilinx Zynq-7000 All Programmable (AP) SoC and FPGA devices. logiCVC-ML rich feature set is optimal for embedded electronic devices. It provides all the necessary control signals to interface directly with LCD and other flat panel displays. A wide veriaty of LCD doisplay types is supported. Its compact size, low slice count utilization can be additionaly decreased through feature set configuration by VHDL code parameterization. Its functions include refreshing the display image by reading the video memory and converting the read data into a data stream accaptable for the display interface. It also generates control signals for the display. Multilayer support provides alpha blending, transparency, hardware cursors and fast scrolling by using low CPU processing power. By means of an external video digital to analog converter (DAC) it also controls S-Video, composite video devices and  CRT displays. Additionally, Digital Visual Interface (DVI) compliant displays can be controlled by using the appropriate devices.</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>C_E_DATA_WIDTH</spirit:name>
      <spirit:displayName>External parallel input data width</spirit:displayName>
      <spirit:description>External parallel input data width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_E_DATA_WIDTH" spirit:choiceRef="choices_31" spirit:order="8900" spirit:configGroups="4 UnGrouped">24</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_E_LAYER</spirit:name>
      <spirit:displayName>Route external parallel input to layer</spirit:displayName>
      <spirit:description>Which layer should be used as external parallel stream.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_E_LAYER" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_USE_E_PARALLEL_INPUT&apos;)) = 1" spirit:order="8800" spirit:configGroups="4 UnGrouped" spirit:minimum="0" spirit:maximum="4">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_E_VCLK_BUFGMUX</spirit:name>
      <spirit:displayName>Use BUFGMUX for external parallel input</spirit:displayName>
      <spirit:description>Use BUFGMUX for switching clock for external parallel input synchronization.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_E_VCLK_BUFGMUX" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_USE_E_PARALLEL_INPUT&apos;)) = 1" spirit:choiceRef="choices_10" spirit:order="8700" spirit:configGroups="4 UnGrouped">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_E_PARALLEL_INPUT</spirit:name>
      <spirit:displayName>Use external parallel input</spirit:displayName>
      <spirit:description>Syncronize logiCVC to external parallel input and use data as one of the layers.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_E_PARALLEL_INPUT" spirit:choiceRef="choices_9" spirit:order="8600" spirit:configGroups="4 UnGrouped">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 1">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_BUFFER_4_OFFSET</spirit:name>
      <spirit:displayName>Double buffer address offset</spirit:displayName>
      <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_BUFFER_4_OFFSET" spirit:order="8500" spirit:configGroups="19 Layer4 Configuration">1024</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(PARAM_VALUE.C_NUM_OF_LAYERS = 5 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 4) )">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_BUFFER_3_OFFSET</spirit:name>
      <spirit:displayName>Double buffer address offset</spirit:displayName>
      <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_BUFFER_3_OFFSET" spirit:order="8400" spirit:configGroups="18 Layer3 Configuration">1024</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 4 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 4) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_BUFFER_2_OFFSET</spirit:name>
      <spirit:displayName>Double buffer address offset</spirit:displayName>
      <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_BUFFER_2_OFFSET" spirit:order="8300" spirit:configGroups="17 Layer2 Configuration">1024</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 3 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 3) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 2))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_BUFFER_1_OFFSET</spirit:name>
      <spirit:displayName>Double buffer address offset</spirit:displayName>
      <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_BUFFER_1_OFFSET" spirit:order="8200" spirit:configGroups="16 Layer1 Configuration">1080</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 2 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 2) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 1))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_BUFFER_0_OFFSET</spirit:name>
      <spirit:displayName>Double buffer address offset</spirit:displayName>
      <spirit:description>Double buffer address offset relative to layer address offset represented in number of lines where each line can have different size. For example 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024 and 4 KB for 24 bpp layer and C_ROW_STRIDE = 1024. Triple buffer address offset is defined as double the double buffer offset.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_BUFFER_0_OFFSET" spirit:order="8100" spirit:configGroups="15 Layer0 Configuration">1080</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 0)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_4_OFFSET</spirit:name>
      <spirit:displayName>Layer address offset</spirit:displayName>
      <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_4_OFFSET" spirit:order="8000" spirit:configGroups="19 Layer4 Configuration">8192</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(PARAM_VALUE.C_NUM_OF_LAYERS = 5 &amp;&amp; PARAM_VALE.C_USE_BACKGROUND = 0) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 4))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_3_OFFSET</spirit:name>
      <spirit:displayName>Layer address offset</spirit:displayName>
      <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_3_OFFSET" spirit:order="7900" spirit:configGroups="18 Layer3 Configuration">6144</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 4 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 4) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp;  PARAM_VALUE.C_E_LAYER != 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_2_OFFSET</spirit:name>
      <spirit:displayName>Layer address offset</spirit:displayName>
      <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_2_OFFSET" spirit:order="7800" spirit:configGroups="17 Layer2 Configuration">4096</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 3 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 3) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp;  PARAM_VALUE.C_E_LAYER != 2))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_1_OFFSET</spirit:name>
      <spirit:displayName>Layer address offset</spirit:displayName>
      <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_1_OFFSET" spirit:order="7700" spirit:configGroups="16 Layer1 Configuration">1620</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 2 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 2) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp;  PARAM_VALUE.C_E_LAYER != 1))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_0_OFFSET</spirit:name>
      <spirit:displayName>Layer address offset</spirit:displayName>
      <spirit:description>Layer address offset from video memory base address represented in number of lines where each line can have different  size. For example, 1 KB for 8 bpp and C_ROW_STRIDE = 1024, 2 KB for 16 bpp and C_ROW_STRIDE = 1024, 4 KB for 24 bpp layer and C_ROW_STRIDE  = 1024.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_0_OFFSET" spirit:order="7600" spirit:configGroups="15 Layer0 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 0)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_MULTIPLIER</spirit:name>
      <spirit:displayName>Type of multiplier used in blender</spirit:displayName>
      <spirit:description>Control the way in which multipliers in blender are implemented: 0 - LUT, 1 - block, 2 - auto.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_MULTIPLIER" spirit:choiceRef="choices_13" spirit:order="7500" spirit:configGroups="13 Layer Resources">2</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_XTREME_DSP</spirit:name>
      <spirit:displayName>Use DSP resources for blender</spirit:displayName>
      <spirit:description>Enable or disable the use of DSP resources for blender.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_XTREME_DSP" spirit:choiceRef="choices_12" spirit:order="7400" spirit:configGroups="13 Layer Resources">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_BACKGROUND</spirit:name>
      <spirit:displayName>Configure last layer as background</spirit:displayName>
      <spirit:description>In case the last layer is configured as background, pixel value is read from logiCVC background color register and not from video memory buffer.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_BACKGROUND" spirit:choiceRef="choices_18" spirit:order="7300" spirit:configGroups="12 Layer General Settings">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 1">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_4_ALPHA_MODE</spirit:name>
      <spirit:displayName>Alpha blending mode</spirit:displayName>
      <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_4_ALPHA_MODE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 4" spirit:choiceRef="choices_28" spirit:order="7200" spirit:configGroups="19 Layer4 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(PARAM_VALUE.C_NUM_OF_LAYERS = 5 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 4))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_3_ALPHA_MODE</spirit:name>
      <spirit:displayName>Alpha blending mode</spirit:displayName>
      <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_3_ALPHA_MODE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 3" spirit:choiceRef="choices_27" spirit:order="7100" spirit:configGroups="18 Layer3 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 4 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 4) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_2_ALPHA_MODE</spirit:name>
      <spirit:displayName>Alpha blending mode</spirit:displayName>
      <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_2_ALPHA_MODE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 2" spirit:choiceRef="choices_26" spirit:order="7000" spirit:configGroups="17 Layer2 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 3 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 3) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 2))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_1_ALPHA_MODE</spirit:name>
      <spirit:displayName>Alpha blending mode</spirit:displayName>
      <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_1_ALPHA_MODE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 1" spirit:choiceRef="choices_25" spirit:order="6900" spirit:configGroups="16 Layer1 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((PARAM_VALUE.C_NUM_OF_LAYERS = 2 &amp;&amp; PARAM_VALUE.C_USE_BACKGROUND = 0) || PARAM_VALUE.C_NUM_OF_LAYERS > 2) &amp;&amp; (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 1))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_0_ALPHA_MODE</spirit:name>
      <spirit:displayName>Alpha blending mode</spirit:displayName>
      <spirit:description>Select between layer alpha, pixel alpha or CLUT alpha blending mode.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_0_ALPHA_MODE" spirit:choiceRef="choices_20" spirit:order="6800" spirit:configGroups="15 Layer0 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 0 || (PARAM_VALUE.C_USE_E_PARALLEL_INPUT = 1 &amp;&amp; PARAM_VALUE.C_E_LAYER != 0)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_4_DATA_WIDTH</spirit:name>
      <spirit:displayName>Layer data width</spirit:displayName>
      <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_4_DATA_WIDTH" spirit:choiceRef="choices_39" spirit:order="6700" spirit:configGroups="19 Layer4 Configuration">16</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 4">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_3_DATA_WIDTH</spirit:name>
      <spirit:displayName>Layer data width</spirit:displayName>
      <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_3_DATA_WIDTH" spirit:choiceRef="choices_38" spirit:order="6600" spirit:configGroups="18 Layer3 Configuration">16</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 3">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_2_DATA_WIDTH</spirit:name>
      <spirit:displayName>Layer data width</spirit:displayName>
      <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_2_DATA_WIDTH" spirit:choiceRef="choices_37" spirit:order="6500" spirit:configGroups="17 Layer2 Configuration">24</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_1_DATA_WIDTH</spirit:name>
      <spirit:displayName>Layer data width</spirit:displayName>
      <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_1_DATA_WIDTH" spirit:choiceRef="choices_36" spirit:order="6400" spirit:configGroups="16 Layer1 Configuration">24</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 1">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_0_DATA_WIDTH</spirit:name>
      <spirit:displayName>Layer data width</spirit:displayName>
      <spirit:description>Select  between 8, 16 or 24 data bits per pixel. For RGB layer, 24 represents an RGB 888 format, 16 represents RGB 565 format, while 8 can represent either RGB 332 or CLUT format, depending on layer alpha mode selection. For YCbCr layer, 24 represents an YCbCr 888 (4:4:4) format and 16 represents an YCb YCr 88 88 (4:2:2) format.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_0_DATA_WIDTH" spirit:choiceRef="choices_35" spirit:order="6300" spirit:configGroups="15 Layer0 Configuration">16</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_4_TYPE</spirit:name>
      <spirit:displayName>Layer type</spirit:displayName>
      <spirit:description>Select between RGB or YCbCr layer.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_4_TYPE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 4" spirit:choiceRef="choices_24" spirit:order="6200" spirit:configGroups="19 Layer4 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 4">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_3_TYPE</spirit:name>
      <spirit:displayName>Layer type</spirit:displayName>
      <spirit:description>Select between RGB, YCbCr or alpha layer.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_3_TYPE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 3" spirit:choiceRef="choices_23" spirit:order="6100" spirit:configGroups="18 Layer3 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 3">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_2_TYPE</spirit:name>
      <spirit:displayName>Layer type</spirit:displayName>
      <spirit:description>Select between RGB or YCbCr layer.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_2_TYPE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 2" spirit:choiceRef="choices_22" spirit:order="6000" spirit:configGroups="17 Layer2 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_1_TYPE</spirit:name>
      <spirit:displayName>Layer type</spirit:displayName>
      <spirit:description>Select between RGB, YCbCr or alpha layer.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_1_TYPE" spirit:dependency="spirit:decode(id(&apos;PARAM_VALUE.C_NUM_OF_LAYERS&apos;)) > 1" spirit:choiceRef="choices_21" spirit:order="5900" spirit:configGroups="16 Layer1 Configuration">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_NUM_OF_LAYERS > 1">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LAYER_0_TYPE</spirit:name>
      <spirit:displayName>Layer type</spirit:displayName>
      <spirit:description>Select between RGB or YCbCr layer.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LAYER_0_TYPE" spirit:choiceRef="choices_19" spirit:order="5800" spirit:configGroups="15 Layer0 Configuration">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_NUM_OF_LAYERS</spirit:name>
      <spirit:displayName>Number of layers</spirit:displayName>
      <spirit:description>Number of logiCVC layers to be instantiated.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_NUM_OF_LAYERS" spirit:order="5700" spirit:configGroups="12 Layer General Settings" spirit:minimum="1" spirit:maximum="5">3</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_VCLK_PERIOD</spirit:name>
      <spirit:displayName>VCLK clock period defined in ps</spirit:displayName>
      <spirit:description>VCLK period in ps when DVI display interface type is implemented.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_VCLK_PERIOD" spirit:order="5600" spirit:configGroups="14 Output Interface Settings" spirit:minimum="8333" spirit:maximum="52631">25000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 5">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LVDS_DATA_WIDTH</spirit:name>
      <spirit:displayName>LVDS data width</spirit:displayName>
      <spirit:description>Data width of the LVDS display interface type.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LVDS_DATA_WIDTH" spirit:order="5500" spirit:configGroups="14 Output Interface Settings" spirit:minimum="3" spirit:maximum="4">4</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 2 || PARAM_VALUE.C_DISPLAY_INTERFACE = 3 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_DISPLAY_COLOR_SPACE</spirit:name>
      <spirit:displayName>Display interface color format</spirit:displayName>
      <spirit:description>Select output color space and format.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_DISPLAY_COLOR_SPACE" spirit:choiceRef="choices_15" spirit:order="5400" spirit:configGroups="14 Output Interface Settings">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_DISPLAY_INTERFACE</spirit:name>
      <spirit:displayName>Display interface type</spirit:displayName>
      <spirit:description>Enable different output types. Parallel output is always active.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_DISPLAY_INTERFACE" spirit:choiceRef="choices_34" spirit:order="5300" spirit:configGroups="14 Output Interface Settings">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_SIZE_POSITION</spirit:name>
      <spirit:displayName>Use layer size, position and offset</spirit:displayName>
      <spirit:description>Enable functionality of configurable layer size, position and offset.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_SIZE_POSITION" spirit:choiceRef="choices_17" spirit:order="5200" spirit:configGroups="12 Layer General Settings">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_XCOLOR</spirit:name>
      <spirit:displayName>XCOLOR function</spirit:displayName>
      <spirit:description>Enable XCOLOR functionality - pixel dithering.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_XCOLOR" spirit:choiceRef="choices_16" spirit:order="5100" spirit:configGroups="12 Layer General Settings">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_PIXEL_DATA_WIDTH = 18 || PARAM_VALUE.C_DISPLAY_INTERFACE = 4">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_ROW_STRIDE</spirit:name>
      <spirit:displayName>Row stride</spirit:displayName>
      <spirit:description>Distance between same column pixels for adjacent rows in pixels.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_ROW_STRIDE" spirit:choiceRef="choices_33" spirit:order="5000" spirit:configGroups="12 Layer General Settings">2048</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_VCLK2</spirit:name>
      <spirit:displayName>Use vclk2 for DDR pixel data output</spirit:displayName>
      <spirit:description>Pixel clock rising edge is set in the middle of the DDR RGB data eye, or if not used, synchronous.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_VCLK2" spirit:choiceRef="choices_14" spirit:order="4900" spirit:configGroups="14 Output Interface Settings">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_PIXEL_DATA_WIDTH = 12">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIXEL_DATA_WIDTH</spirit:name>
      <spirit:displayName>Pixel data width</spirit:displayName>
      <spirit:description>Parallel pixel data width towards the display - bits per pixel (bpp).</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIXEL_DATA_WIDTH" spirit:choiceRef="choices_32" spirit:order="4800" spirit:configGroups="14 Output Interface Settings">16</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
      <spirit:displayName>AXI4-Lite data width</spirit:displayName>
      <spirit:description>AXI4-Lite interface data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_S_AXI_DATA_WIDTH" spirit:order="4700" spirit:configGroups="4 AXI4_Lite Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
      <spirit:displayName>AXI4-Lite address width</spirit:displayName>
      <spirit:description>AXI4-Lite interface address bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_S_AXI_ADDR_WIDTH" spirit:order="4600" spirit:configGroups="4 AXI4_Lite Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SPLB_NATIVE_DWIDTH</spirit:name>
      <spirit:displayName>SPLB native data width</spirit:displayName>
      <spirit:description>SPLB interface native data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SPLB_NATIVE_DWIDTH" spirit:order="4500" spirit:configGroups="5 SPLB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SPLB_DWIDTH</spirit:name>
      <spirit:displayName>SPLB data width</spirit:displayName>
      <spirit:description>SPLB interface data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SPLB_DWIDTH" spirit:order="4400" spirit:configGroups="5 SPLB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SPLB_AWIDTH</spirit:name>
      <spirit:displayName>SPLB address width</spirit:displayName>
      <spirit:description>SPLB interface address bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SPLB_AWIDTH" spirit:order="4300" spirit:configGroups="5 SPLB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SPLB_MID_WIDTH</spirit:name>
      <spirit:displayName>SPLB MID width</spirit:displayName>
      <spirit:description>PLB master ID bus width, the value is log2(C_SPLB_NUM_MASTERS).</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SPLB_MID_WIDTH" spirit:order="4200" spirit:configGroups="5 SPLB Interface">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SPLB_NUM_MASTERS</spirit:name>
      <spirit:displayName>SPLB number of masters</spirit:displayName>
      <spirit:description>Number of masters on SPLB interface bus.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SPLB_NUM_MASTERS" spirit:order="4100" spirit:configGroups="5 SPLB Interface">2</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_OPB_DWIDTH</spirit:name>
      <spirit:displayName>OPB data width</spirit:displayName>
      <spirit:description>OPB interface data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_OPB_DWIDTH" spirit:order="4000" spirit:configGroups="6 OPB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_OPB_AWIDTH</spirit:name>
      <spirit:displayName>OPB address width</spirit:displayName>
      <spirit:description>OPB interface address bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_OPB_AWIDTH" spirit:order="3900" spirit:configGroups="6 OPB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_REGS_HIGHADDR</spirit:name>
      <spirit:displayName>Registers high address</spirit:displayName>
      <spirit:description>Registers high address - used only if OPB or SPLB bus interface is implemented.</spirit:description>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_REGS_HIGHADDR" spirit:order="3800" spirit:configGroups="3 Registers Address Space" spirit:bitStringLength="32">0x4003FFFF</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_REGS_BASEADDR</spirit:name>
      <spirit:displayName>Registers base address</spirit:displayName>
      <spirit:description>Registers base address - used only if OPB or SPLB bus interface is implemented.</spirit:description>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_REGS_BASEADDR" spirit:order="3700" spirit:configGroups="3 Registers Address Space" spirit:bitStringLength="32">0x40030000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_REG_BYTE_SWAP</spirit:name>
      <spirit:displayName>Swap bytes for logiCVC register access</spirit:displayName>
      <spirit:description>If set this will change byte ordering on register interface bus (B0B1B2B3 => B3B2B1B0).</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_REG_BYTE_SWAP" spirit:choiceRef="choices_4" spirit:order="3600" spirit:configGroups="2 Registers General Settings">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_READABLE_REGS</spirit:name>
      <spirit:displayName>Readable logiCVC registers</spirit:displayName>
      <spirit:description>To save additional resources user can disable the read register interface. In this mode only interrupt status register, double/triple video/CLUT buffer registers, power control register and IP version register are readable.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_READABLE_REGS" spirit:choiceRef="choices_3" spirit:order="3500" spirit:configGroups="2 Registers General Settings">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_REGS_INTERFACE</spirit:name>
      <spirit:displayName>Use OPB, SPLB or AXI4-Lite to access logiCVC registers</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_REGS_INTERFACE" spirit:choiceRef="choices_5" spirit:order="3400" spirit:configGroups="2 Registers General Settings">2</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_M_AXI_ADDR_WIDTH</spirit:name>
      <spirit:displayName>AXI4 address width</spirit:displayName>
      <spirit:description>AXI4 interface address bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_M_AXI_ADDR_WIDTH" spirit:order="3300" spirit:configGroups="9 AXI4 Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_M_AXI_DATA_WIDTH</spirit:name>
      <spirit:displayName>AXI4 data width</spirit:displayName>
      <spirit:description>AXI4 interface data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_M_AXI_DATA_WIDTH" spirit:choiceRef="choices_41" spirit:order="3200" spirit:configGroups="9 AXI4 Interface">128</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_M_AXI_THREAD_ID_WIDTH</spirit:name>
      <spirit:displayName>AXI4 thread ID width</spirit:displayName>
      <spirit:description>AXI4 interface thread ID width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_M_AXI_THREAD_ID_WIDTH" spirit:order="3100" spirit:configGroups="9 AXI4 Interface">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_XMB_DATA_BUS_WIDTH</spirit:name>
      <spirit:displayName>XMB data width</spirit:displayName>
      <spirit:description>XMB interface data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_XMB_DATA_BUS_WIDTH" spirit:choiceRef="choices_42" spirit:order="3000" spirit:configGroups="11 XMB Interface">64</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MPLB_SMALLEST_SLAVE</spirit:name>
      <spirit:displayName>MPLB smallest slave</spirit:displayName>
      <spirit:description>Smallest slave on MPLB interface bus.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MPLB_SMALLEST_SLAVE" spirit:order="2900" spirit:configGroups="10 MPLB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MPLB_PRIORITY</spirit:name>
      <spirit:displayName>MPLB priority</spirit:displayName>
      <spirit:description>Priority on MPLB interface bus: 0 - the lowest, 3 - the highest.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MPLB_PRIORITY" spirit:order="2800" spirit:configGroups="10 MPLB Interface" spirit:minimum="0" spirit:maximum="3">3</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MPLB_DWIDTH</spirit:name>
      <spirit:displayName>MPLB data width</spirit:displayName>
      <spirit:description>MPLB interface data bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MPLB_DWIDTH" spirit:choiceRef="choices_40" spirit:order="2700" spirit:configGroups="10 MPLB Interface">64</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 0">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MPLB_AWIDTH</spirit:name>
      <spirit:displayName>MPLB address width</spirit:displayName>
      <spirit:description>MPLB interface address bus width.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MPLB_AWIDTH" spirit:order="2600" spirit:configGroups="10 MPLB Interface">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MPLB_NUM_MASTERS</spirit:name>
      <spirit:displayName>MPLB number of masters</spirit:displayName>
      <spirit:description>Number of masters on MPLB interface bus.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MPLB_NUM_MASTERS" spirit:order="2500" spirit:configGroups="10 MPLB Interface">8</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INCREASE_FIFO</spirit:name>
      <spirit:displayName>FIFO size multiplication factor</spirit:displayName>
      <spirit:description>User can choose to increase the size of each layer FIFO at the expense of bigger BRAM utilization.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INCREASE_FIFO" spirit:choiceRef="choices_11" spirit:order="2400" spirit:configGroups="13 Layer Resources">2</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MEM_LITTLE_ENDIAN</spirit:name>
      <spirit:displayName>Endianness for logiCVC memory access</spirit:displayName>
      <spirit:description>Default endianness for logiCVC memory access is little when AXI4 or XMB is implemented, and big when PLB is implemented.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MEM_LITTLE_ENDIAN" spirit:choiceRef="choices_8" spirit:order="2300" spirit:configGroups="7 Memory General Settings">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MEM_BYTE_SWAP</spirit:name>
      <spirit:displayName>Swap bytes for logiCVC memory access</spirit:displayName>
      <spirit:description>If set this will change byte ordering on memory interface bus (B0B1B2B3 => B3B2B1B0 for 32-bit memory interface data bus width, B0B1B2B3B4B5B6B7 => B7B6B5B4B3B2B1B0 for 64-bit memory interface data bus width).</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MEM_BYTE_SWAP" spirit:choiceRef="choices_7" spirit:order="2200" spirit:configGroups="7 Memory General Settings">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MEM_BURST</spirit:name>
      <spirit:displayName>Number of transfers per burst</spirit:displayName>
      <spirit:description>For AXI4 and XMB interface available values are 16, 32 and 64. For 32-bit PLB interface bus only a burst of 16 words is possible, while for 64-bit and 128-bit PLB interface bus any of the available values can be selected.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MEM_BURST" spirit:choiceRef="choices_30" spirit:order="2100" spirit:configGroups="7 Memory General Settings">4</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_VMEM_INTERFACE = 1 || PARAM_VALUE.C_VMEM_INTERFACE = 2 || (PARAM_VALUE.C_VMEM_INTERAFCE = 0 &amp;&amp; PARAM_VALUE.C_MPLB_DWIDTH > 64)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_VMEM_HIGHADDR</spirit:name>
      <spirit:displayName>Video memory high address</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_VMEM_HIGHADDR" spirit:order="2000" spirit:configGroups="8 Memory Address Space" spirit:bitStringLength="32">0x37ffffff</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_VMEM_BASEADDR</spirit:name>
      <spirit:displayName>Video memory base address</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_VMEM_BASEADDR" spirit:order="1900" spirit:configGroups="8 Memory Address Space" spirit:bitStringLength="32">0x30000000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_VMEM_INTERFACE</spirit:name>
      <spirit:displayName>Use XMB, MPLB or AXI4 to access memory</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_VMEM_INTERFACE" spirit:choiceRef="choices_6" spirit:order="1800" spirit:configGroups="7 Memory General Settings">2</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IP_TIME_BEFORE_BREAK</spirit:name>
      <spirit:displayName>IP time before break</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IP_TIME_BEFORE_BREAK" spirit:choiceRef="choices_2" spirit:order="1700" spirit:configGroups="0 IP License">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IP_LICENSE_CHECK</spirit:name>
      <spirit:displayName>IP license check</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IP_LICENSE_CHECK" spirit:choiceRef="choices_1" spirit:order="1600" spirit:configGroups="0 IP License">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IP_PATCH_LEVEL</spirit:name>
      <spirit:displayName>IP patch level</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IP_PATCH_LEVEL" spirit:choiceRef="choices_29" spirit:order="1500" spirit:configGroups="1 IP Version">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IP_MINOR_REVISION</spirit:name>
      <spirit:displayName>IP minor revision</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IP_MINOR_REVISION" spirit:order="1400" spirit:configGroups="1 IP Version">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IP_MAJOR_REVISION</spirit:name>
      <spirit:displayName>IP major revision</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IP_MAJOR_REVISION" spirit:order="1300" spirit:configGroups="1 IP Version">3</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IP_LICENSE_TYPE</spirit:name>
      <spirit:displayName>IP license type</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IP_LICENSE_TYPE" spirit:choiceRef="choices_0" spirit:order="1200" spirit:configGroups="0 IP License">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled>false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_DVI_CLK_MODE</spirit:name>
      <spirit:displayName>DVI transmitter clocking mode</spirit:displayName>
      <spirit:description>Valid only for 7-series FPGA devices. Please consult the logiCVC-ML user&apos;s manual for more information on selecting the appropriate mode.</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_DVI_CLK_MODE" spirit:choiceRef="choices_43" spirit:order="1100" spirit:configGroups="14 Output Interface Settings">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:presence>required</xilinx:presence>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="PARAM_VALUE.C_DISPLAY_INTERFACE = 5">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Component_Name" spirit:order="1">system_top_LOGICVC_0_0</spirit:value>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:supportedFamilies>
        <xilinx:family xilinx:lifeCycle="Production">aartix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">artix7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">artix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">kintex7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qartix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qartix7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qkintex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qkintex7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qvirtex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">virtex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">kintex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">azynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qzynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">zynq</xilinx:family>
      </xilinx:supportedFamilies>
      <xilinx:taxonomies>
        <xilinx:taxonomy>/Video_&amp;_Image_Processing</xilinx:taxonomy>
      </xilinx:taxonomies>
      <xilinx:displayName>logicvc</xilinx:displayName>
      <xilinx:vendorDisplayName>xylon</xilinx:vendorDisplayName>
      <xilinx:vendorURL>http://www.logicbricks.com</xilinx:vendorURL>
      <xilinx:coreCreationDateTime>2015-12-07T17:42:12</xilinx:coreCreationDateTime>
    </xilinx:coreExtensions>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2012.4</xilinx:xilinxVersion>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
