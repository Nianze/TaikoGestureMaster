// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _set_color_HH_
#define _set_color_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct set_color : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > src_rows_V_read;
    sc_in< sc_lv<12> > src_cols_V_read;
    sc_in< sc_lv<8> > src_data_stream_0_V_dout;
    sc_in< sc_logic > src_data_stream_0_V_empty_n;
    sc_out< sc_logic > src_data_stream_0_V_read;
    sc_out< sc_lv<8> > dst_data_stream_0_V_din;
    sc_in< sc_logic > dst_data_stream_0_V_full_n;
    sc_out< sc_logic > dst_data_stream_0_V_write;
    sc_out< sc_lv<8> > dst_data_stream_1_V_din;
    sc_in< sc_logic > dst_data_stream_1_V_full_n;
    sc_out< sc_logic > dst_data_stream_1_V_write;
    sc_out< sc_lv<8> > dst_data_stream_2_V_din;
    sc_in< sc_logic > dst_data_stream_2_V_full_n;
    sc_out< sc_logic > dst_data_stream_2_V_write;
    sc_in< sc_lv<2> > gesture_V_V_dout;
    sc_in< sc_logic > gesture_V_V_empty_n;
    sc_out< sc_logic > gesture_V_V_read;


    // Module declarations
    set_color(sc_module_name name);
    SC_HAS_PROCESS(set_color);

    ~set_color();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<12> > t_V_reg_132;
    sc_signal< bool > ap_sig_bdd_51;
    sc_signal< sc_lv<13> > op2_assign_fu_148_p2;
    sc_signal< sc_lv<13> > op2_assign_reg_352;
    sc_signal< sc_lv<13> > op2_assign_4_fu_158_p2;
    sc_signal< sc_lv<13> > op2_assign_4_reg_357;
    sc_signal< sc_lv<12> > i_V_fu_173_p2;
    sc_signal< sc_lv<12> > i_V_reg_365;
    sc_signal< sc_lv<1> > not_fu_179_p2;
    sc_signal< sc_lv<1> > not_reg_370;
    sc_signal< sc_lv<1> > tmp_9_fu_168_p2;
    sc_signal< sc_lv<1> > notrhs_fu_184_p2;
    sc_signal< sc_lv<1> > notrhs_reg_375;
    sc_signal< sc_lv<1> > tmp_11_fu_194_p2;
    sc_signal< sc_lv<1> > tmp_11_reg_380;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_lv<1> > or_cond_reg_389;
    sc_signal< bool > ap_sig_bdd_89;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_11_reg_380_pp0_it2;
    sc_signal< sc_lv<1> > not_or_cond_reg_393;
    sc_signal< sc_lv<1> > ap_reg_ppstg_not_or_cond_reg_393_pp0_it2;
    sc_signal< bool > ap_sig_bdd_111;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_11_reg_380_pp0_it1;
    sc_signal< sc_lv<12> > j_V_fu_199_p2;
    sc_signal< sc_lv<1> > or_cond_fu_210_p2;
    sc_signal< sc_lv<1> > not_or_cond_fu_221_p2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_not_or_cond_reg_393_pp0_it1;
    sc_signal< sc_lv<2> > tmp_V_reg_397;
    sc_signal< sc_lv<8> > pixel_out_val_1_2_reg_403;
    sc_signal< sc_lv<1> > tmp_fu_234_p1;
    sc_signal< sc_lv<1> > tmp_reg_408;
    sc_signal< sc_lv<1> > tmp_12_fu_238_p2;
    sc_signal< sc_lv<1> > tmp_12_reg_414;
    sc_signal< sc_lv<1> > sel_tmp_fu_254_p2;
    sc_signal< sc_lv<1> > sel_tmp_reg_421;
    sc_signal< sc_lv<1> > sel_tmp4_fu_272_p2;
    sc_signal< sc_lv<1> > sel_tmp4_reg_427;
    sc_signal< sc_lv<12> > t_V_6_reg_121;
    sc_signal< sc_lv<8> > pixel_out_val_fu_72;
    sc_signal< sc_lv<13> > retval_i4_cast_fu_144_p1;
    sc_signal< sc_lv<13> > retval_i_cast_fu_154_p1;
    sc_signal< sc_lv<13> > tmp_cast_fu_164_p1;
    sc_signal< sc_lv<13> > tmp_10_cast_fu_190_p1;
    sc_signal< sc_lv<1> > not4_fu_205_p2;
    sc_signal< sc_lv<1> > notlhs_fu_215_p2;
    sc_signal< sc_lv<1> > tmp_14_fu_244_p2;
    sc_signal< sc_lv<1> > tmp_15_fu_249_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_260_p2;
    sc_signal< sc_lv<1> > tmp2_fu_266_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_278_p2;
    sc_signal< sc_lv<8> > sel_tmp5_fu_282_p3;
    sc_signal< sc_lv<1> > sel_tmp6_fu_297_p2;
    sc_signal< sc_lv<1> > pixel_out_val_1_fu_301_p2;
    sc_signal< sc_lv<1> > sel_tmp7_fu_311_p2;
    sc_signal< sc_lv<1> > not_sel_tmp4_fu_315_p2;
    sc_signal< sc_lv<1> > sel_tmp8_fu_320_p2;
    sc_signal< sc_lv<1> > pixel_out_val_0_fu_326_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_111();
    void thread_ap_sig_bdd_51();
    void thread_ap_sig_bdd_89();
    void thread_dst_data_stream_0_V_din();
    void thread_dst_data_stream_0_V_write();
    void thread_dst_data_stream_1_V_din();
    void thread_dst_data_stream_1_V_write();
    void thread_dst_data_stream_2_V_din();
    void thread_dst_data_stream_2_V_write();
    void thread_gesture_V_V_read();
    void thread_i_V_fu_173_p2();
    void thread_j_V_fu_199_p2();
    void thread_not4_fu_205_p2();
    void thread_not_fu_179_p2();
    void thread_not_or_cond_fu_221_p2();
    void thread_not_sel_tmp4_fu_315_p2();
    void thread_notlhs_fu_215_p2();
    void thread_notrhs_fu_184_p2();
    void thread_op2_assign_4_fu_158_p2();
    void thread_op2_assign_fu_148_p2();
    void thread_or_cond_fu_210_p2();
    void thread_pixel_out_val_0_fu_326_p2();
    void thread_pixel_out_val_1_fu_301_p2();
    void thread_retval_i4_cast_fu_144_p1();
    void thread_retval_i_cast_fu_154_p1();
    void thread_sel_tmp2_fu_260_p2();
    void thread_sel_tmp4_fu_272_p2();
    void thread_sel_tmp5_fu_282_p3();
    void thread_sel_tmp6_fu_297_p2();
    void thread_sel_tmp7_fu_311_p2();
    void thread_sel_tmp8_fu_320_p2();
    void thread_sel_tmp_fu_254_p2();
    void thread_src_data_stream_0_V_read();
    void thread_tmp2_fu_266_p2();
    void thread_tmp_10_cast_fu_190_p1();
    void thread_tmp_11_fu_194_p2();
    void thread_tmp_12_fu_238_p2();
    void thread_tmp_13_fu_278_p2();
    void thread_tmp_14_fu_244_p2();
    void thread_tmp_15_fu_249_p2();
    void thread_tmp_9_fu_168_p2();
    void thread_tmp_cast_fu_164_p1();
    void thread_tmp_fu_234_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
