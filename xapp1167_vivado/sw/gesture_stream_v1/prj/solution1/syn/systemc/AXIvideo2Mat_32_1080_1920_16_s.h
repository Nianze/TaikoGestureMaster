// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _AXIvideo2Mat_32_1080_1920_16_s_HH_
#define _AXIvideo2Mat_32_1080_1920_16_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AXIvideo2Mat_32_1080_1920_16_s : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > AXI_video_strm_V_data_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_data_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_data_V_read;
    sc_in< sc_lv<4> > AXI_video_strm_V_keep_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_keep_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_keep_V_read;
    sc_in< sc_lv<4> > AXI_video_strm_V_strb_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_strb_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_strb_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_user_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_user_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_user_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_last_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_last_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_last_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_id_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_id_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_id_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_dest_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_dest_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_dest_V_read;
    sc_in< sc_lv<12> > img_rows_V_read;
    sc_in< sc_lv<12> > img_cols_V_read;
    sc_out< sc_lv<8> > img_data_stream_0_V_din;
    sc_in< sc_logic > img_data_stream_0_V_full_n;
    sc_out< sc_logic > img_data_stream_0_V_write;
    sc_out< sc_lv<8> > img_data_stream_1_V_din;
    sc_in< sc_logic > img_data_stream_1_V_full_n;
    sc_out< sc_logic > img_data_stream_1_V_write;
    sc_out< sc_lv<8> > img_data_stream_2_V_din;
    sc_in< sc_logic > img_data_stream_2_V_full_n;
    sc_out< sc_logic > img_data_stream_2_V_write;


    // Module declarations
    AXIvideo2Mat_32_1080_1920_16_s(sc_module_name name);
    SC_HAS_PROCESS(AXIvideo2Mat_32_1080_1920_16_s);

    ~AXIvideo2Mat_32_1080_1920_16_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<12> > t_V_1_reg_229;
    sc_signal< sc_lv<32> > axi_data_V_3_reg_240;
    sc_signal< sc_lv<1> > eol_6_reg_251;
    sc_signal< sc_lv<1> > eol_reg_262;
    sc_signal< sc_logic > AXI_video_strm_V_0_status;
    sc_signal< bool > ap_sig_bdd_91;
    sc_signal< bool > ap_sig_bdd_99;
    sc_signal< bool > ap_sig_bdd_109;
    sc_signal< sc_lv<12> > i_V_fu_385_p2;
    sc_signal< sc_lv<12> > i_V_reg_467;
    sc_signal< sc_lv<1> > exitcond3_fu_391_p2;
    sc_signal< sc_lv<1> > exitcond3_reg_472;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it0;
    sc_signal< sc_lv<1> > sof_load_reg_481;
    sc_signal< bool > ap_sig_bdd_144;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it1;
    sc_signal< sc_lv<12> > j_V_fu_396_p2;
    sc_signal< sc_lv<1> > sof_load_load_fu_402_p1;
    sc_signal< sc_lv<1> > exitcond_fu_380_p2;
    sc_signal< sc_lv<32> > axi_data_V_reg_161;
    sc_signal< sc_lv<1> > axi_last_V_reg_173;
    sc_signal< sc_lv<1> > axi_user_V_reg_185;
    sc_signal< sc_lv<32> > axi_data_V_4_reg_319;
    sc_signal< sc_lv<32> > axi_data_V_2_reg_196;
    sc_signal< sc_lv<1> > axi_last_V_4_reg_331;
    sc_signal< sc_lv<1> > axi_last_V_2_reg_207;
    sc_signal< sc_lv<12> > t_V_reg_218;
    sc_signal< sc_lv<32> > axi_data_V_8_phi_fu_278_p6;
    sc_signal< sc_lv<1> > axi_last_V_7_phi_fu_293_p6;
    sc_signal< sc_lv<1> > eol_5_phi_fu_308_p6;
    sc_signal< sc_lv<1> > eol_1_reg_343;
    sc_signal< sc_logic > AXI_video_strm_V_0_update;
    sc_signal< sc_lv<1> > sof_fu_106;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_322;
    sc_signal< bool > ap_sig_bdd_324;
    sc_signal< bool > ap_sig_bdd_274;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_st4_fsm_3;
    static const sc_lv<3> ap_ST_pp1_stg0_fsm_4;
    static const sc_lv<3> ap_ST_st7_fsm_5;
    static const sc_lv<3> ap_ST_st8_fsm_6;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AXI_video_strm_V_0_status();
    void thread_AXI_video_strm_V_0_update();
    void thread_AXI_video_strm_V_data_V_read();
    void thread_AXI_video_strm_V_dest_V_read();
    void thread_AXI_video_strm_V_id_V_read();
    void thread_AXI_video_strm_V_keep_V_read();
    void thread_AXI_video_strm_V_last_V_read();
    void thread_AXI_video_strm_V_strb_V_read();
    void thread_AXI_video_strm_V_user_V_read();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_109();
    void thread_ap_sig_bdd_144();
    void thread_ap_sig_bdd_274();
    void thread_ap_sig_bdd_322();
    void thread_ap_sig_bdd_324();
    void thread_ap_sig_bdd_91();
    void thread_ap_sig_bdd_99();
    void thread_axi_data_V_8_phi_fu_278_p6();
    void thread_axi_last_V_7_phi_fu_293_p6();
    void thread_eol_5_phi_fu_308_p6();
    void thread_exitcond3_fu_391_p2();
    void thread_exitcond_fu_380_p2();
    void thread_i_V_fu_385_p2();
    void thread_img_data_stream_0_V_din();
    void thread_img_data_stream_0_V_write();
    void thread_img_data_stream_1_V_din();
    void thread_img_data_stream_1_V_write();
    void thread_img_data_stream_2_V_din();
    void thread_img_data_stream_2_V_write();
    void thread_j_V_fu_396_p2();
    void thread_sof_load_load_fu_402_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
