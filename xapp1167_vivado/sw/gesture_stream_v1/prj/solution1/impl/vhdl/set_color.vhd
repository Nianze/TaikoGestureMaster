-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity set_color is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    gesture_V_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    gesture_V_V_empty_n : IN STD_LOGIC;
    gesture_V_V_read : OUT STD_LOGIC );
end;


architecture behav of set_color is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_V_reg_118 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_51 : BOOLEAN;
    signal i_V_fu_135_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_267 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_272_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_272_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_146_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_152_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_2_fu_207_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_out_val_2_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_out_val_1_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_1_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_0_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_0_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_6_reg_107 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_200_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp7_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp5_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal pixel_out_val_0_reg_321_temp: signed (1-1 downto 0);
    signal pixel_out_val_1_reg_316_temp: signed (1-1 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_130_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_fu_141_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_130_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_fu_141_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_130_p2)) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_fu_141_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_130_p2))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_130_p2))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- t_V_6_reg_107 assign process. --
    t_V_6_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_fu_141_p2 = ap_const_lv1_0)))) then 
                t_V_6_reg_107 <= i_V_reg_267;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_51))) then 
                t_V_6_reg_107 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- t_V_reg_118 assign process. --
    t_V_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_130_p2))) then 
                t_V_reg_118 <= ap_const_lv12_0;
            elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_fu_141_p2 = ap_const_lv1_0))) then 
                t_V_reg_118 <= j_V_fu_146_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                ap_reg_ppstg_exitcond_reg_272_pp0_it1 <= exitcond_reg_272;
                ap_reg_ppstg_exitcond_reg_272_pp0_it2 <= ap_reg_ppstg_exitcond_reg_272_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                exitcond_reg_272 <= exitcond_fu_141_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_V_reg_267 <= i_V_fu_135_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it1))) then
                pixel_out_val_0_reg_321 <= pixel_out_val_0_fu_241_p2;
                pixel_out_val_1_reg_316 <= pixel_out_val_1_fu_219_p2;
                pixel_out_val_2_reg_311 <= pixel_out_val_2_fu_207_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_272 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                tmp2_reg_306 <= tmp2_fu_180_p2;
                tmp_28_reg_286 <= tmp_28_fu_152_p1;
                tmp_9_reg_301 <= tmp_9_fu_162_p2;
                tmp_reg_281 <= src_data_stream_0_V_dout;
                tmp_s_reg_292 <= tmp_s_fu_156_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_51 , exitcond_fu_141_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_72 , ap_reg_ppiten_pp0_it1 , ap_reg_ppiten_pp0_it2 , ap_sig_bdd_88 , ap_reg_ppiten_pp0_it3 , exitcond4_fu_130_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_51)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_130_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_fu_141_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_fu_141_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond4_fu_130_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_130_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond4_fu_130_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_130_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_51 assign process. --
    ap_sig_bdd_51_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_51 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(src_data_stream_0_V_empty_n, gesture_V_V_empty_n, exitcond_reg_272)
    begin
                ap_sig_bdd_72 <= (((src_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_reg_272 = ap_const_lv1_0)) or ((exitcond_reg_272 = ap_const_lv1_0) and (gesture_V_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_reg_ppstg_exitcond_reg_272_pp0_it2)
    begin
                ap_sig_bdd_88 <= (((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it2)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it2) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it2) and (dst_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;

    
    pixel_out_val_0_reg_321_temp <= signed(pixel_out_val_0_reg_321);
    dst_data_stream_0_V_din <= std_logic_vector(resize(pixel_out_val_0_reg_321_temp,8));


    -- dst_data_stream_0_V_write assign process. --
    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_272_pp0_it2, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    
    pixel_out_val_1_reg_316_temp <= signed(pixel_out_val_1_reg_316);
    dst_data_stream_1_V_din <= std_logic_vector(resize(pixel_out_val_1_reg_316_temp,8));


    -- dst_data_stream_1_V_write assign process. --
    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_272_pp0_it2, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_2_V_din <= pixel_out_val_2_reg_311;

    -- dst_data_stream_2_V_write assign process. --
    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_272_pp0_it2, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_272_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_130_p2 <= "1" when (t_V_6_reg_107 = src_rows_V_read) else "0";
    exitcond_fu_141_p2 <= "1" when (t_V_reg_118 = src_cols_V_read) else "0";

    -- gesture_V_V_read assign process. --
    gesture_V_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_272, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_272 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            gesture_V_V_read <= ap_const_logic_1;
        else 
            gesture_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_135_p2 <= std_logic_vector(unsigned(t_V_6_reg_107) + unsigned(ap_const_lv12_1));
    j_V_fu_146_p2 <= std_logic_vector(unsigned(t_V_reg_118) + unsigned(ap_const_lv12_1));
    not_sel_tmp5_fu_229_p2 <= (sel_tmp5_fu_190_p2 xor ap_const_lv1_1);
    pixel_out_val_0_fu_241_p2 <= (tmp_s_reg_292 and sel_tmp9_fu_235_p2);
    pixel_out_val_1_fu_219_p2 <= (tmp_s_reg_292 and sel_tmp7_fu_214_p2);
    pixel_out_val_2_fu_207_p3 <= 
        sel_tmp6_fu_200_p3 when (tmp_s_reg_292(0) = '1') else 
        ap_const_lv8_0;
    sel_tmp3_fu_174_p2 <= (tmp_9_fu_162_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_190_p2 <= (tmp2_reg_306 and tmp_s_reg_292);
    sel_tmp6_fu_200_p3 <= 
        ap_const_lv8_0 when (tmp_16_fu_194_p2(0) = '1') else 
        tmp_reg_281;
    sel_tmp7_fu_214_p2 <= (sel_tmp5_fu_190_p2 and tmp_28_reg_286);
    sel_tmp8_fu_224_p2 <= (sel_tmp_fu_186_p2 and tmp_28_reg_286);
    sel_tmp9_fu_235_p2 <= (sel_tmp8_fu_224_p2 and not_sel_tmp5_fu_229_p2);
    sel_tmp_fu_186_p2 <= (tmp_s_reg_292 and tmp_9_reg_301);

    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_272, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_272 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_180_p2 <= (tmp_10_fu_168_p2 and sel_tmp3_fu_174_p2);
    tmp_10_fu_168_p2 <= "1" when (gesture_V_V_dout = ap_const_lv2_1) else "0";
    tmp_16_fu_194_p2 <= (sel_tmp5_fu_190_p2 or sel_tmp_fu_186_p2);
    tmp_28_fu_152_p1 <= src_data_stream_0_V_dout(1 - 1 downto 0);
    tmp_9_fu_162_p2 <= "1" when (gesture_V_V_dout = ap_const_lv2_0) else "0";
    tmp_s_fu_156_p2 <= "1" when (src_data_stream_0_V_dout = ap_const_lv8_FF) else "0";
end behav;
