-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
port (
    input_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_V_data_V_empty_n : IN STD_LOGIC;
    input_V_data_V_read : OUT STD_LOGIC;
    input_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    input_V_keep_V_empty_n : IN STD_LOGIC;
    input_V_keep_V_read : OUT STD_LOGIC;
    input_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    input_V_strb_V_empty_n : IN STD_LOGIC;
    input_V_strb_V_read : OUT STD_LOGIC;
    input_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_user_V_empty_n : IN STD_LOGIC;
    input_V_user_V_read : OUT STD_LOGIC;
    input_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_last_V_empty_n : IN STD_LOGIC;
    input_V_last_V_read : OUT STD_LOGIC;
    input_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_id_V_empty_n : IN STD_LOGIC;
    input_V_id_V_read : OUT STD_LOGIC;
    input_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_dest_V_empty_n : IN STD_LOGIC;
    input_V_dest_V_read : OUT STD_LOGIC;
    output_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_V_data_V_full_n : IN STD_LOGIC;
    output_V_data_V_write : OUT STD_LOGIC;
    output_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_keep_V_full_n : IN STD_LOGIC;
    output_V_keep_V_write : OUT STD_LOGIC;
    output_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_strb_V_full_n : IN STD_LOGIC;
    output_V_strb_V_write : OUT STD_LOGIC;
    output_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_user_V_full_n : IN STD_LOGIC;
    output_V_user_V_write : OUT STD_LOGIC;
    output_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_last_V_full_n : IN STD_LOGIC;
    output_V_last_V_write : OUT STD_LOGIC;
    output_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_id_V_full_n : IN STD_LOGIC;
    output_V_id_V_write : OUT STD_LOGIC;
    output_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_dest_V_full_n : IN STD_LOGIC;
    output_V_dest_V_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2013_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.666670,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.520750,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=16,HLS_SYN_DSP=14,HLS_SYN_FF=6234,HLS_SYN_LUT=9258}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal init_U0_ap_start : STD_LOGIC;
    signal init_U0_ap_done : STD_LOGIC;
    signal init_U0_ap_continue : STD_LOGIC;
    signal init_U0_ap_idle : STD_LOGIC;
    signal init_U0_ap_ready : STD_LOGIC;
    signal init_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_U0_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_U0_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_U0_src_cols_V : STD_LOGIC;
    signal src_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_src_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src_cols_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_U0_src_rows_V : STD_LOGIC;
    signal src_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_src_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_U0_src_rows_V_channel : STD_LOGIC;
    signal src_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_src_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_init_U0_src_cols_V_channel : STD_LOGIC;
    signal src_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_src_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src_cols_V_channel_full_n : STD_LOGIC;
    signal init_1_U0_ap_start : STD_LOGIC;
    signal init_1_U0_ap_done : STD_LOGIC;
    signal init_1_U0_ap_continue : STD_LOGIC;
    signal init_1_U0_ap_idle : STD_LOGIC;
    signal init_1_U0_ap_ready : STD_LOGIC;
    signal init_1_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_1_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_1_U0_ycbcr_rows_V : STD_LOGIC;
    signal ycbcr_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_ycbcr_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_ycbcr_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_1_U0_ycbcr_cols_V : STD_LOGIC;
    signal ycbcr_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_ycbcr_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_ycbcr_cols_V_full_n : STD_LOGIC;
    signal init_1_1_U0_ap_start : STD_LOGIC;
    signal init_1_1_U0_ap_done : STD_LOGIC;
    signal init_1_1_U0_ap_continue : STD_LOGIC;
    signal init_1_1_U0_ap_idle : STD_LOGIC;
    signal init_1_1_U0_ap_ready : STD_LOGIC;
    signal init_1_1_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_1_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_1_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_1_1_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_1_1_U0_medianImage_rows_V : STD_LOGIC;
    signal medianImage_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_medianImage_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_medianImage_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_1_1_U0_medianImage_cols_V : STD_LOGIC;
    signal medianImage_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_medianImage_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_medianImage_cols_V_full_n : STD_LOGIC;
    signal init_2_U0_ap_start : STD_LOGIC;
    signal init_2_U0_ap_done : STD_LOGIC;
    signal init_2_U0_ap_continue : STD_LOGIC;
    signal init_2_U0_ap_idle : STD_LOGIC;
    signal init_2_U0_ap_ready : STD_LOGIC;
    signal init_2_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_2_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_2_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_2_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_2_U0_medianImage2_rows_V : STD_LOGIC;
    signal medianImage2_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_medianImage2_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_medianImage2_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_2_U0_medianImage2_cols_V : STD_LOGIC;
    signal medianImage2_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_medianImage2_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_medianImage2_cols_V_full_n : STD_LOGIC;
    signal init_3_U0_ap_start : STD_LOGIC;
    signal init_3_U0_ap_done : STD_LOGIC;
    signal init_3_U0_ap_continue : STD_LOGIC;
    signal init_3_U0_ap_idle : STD_LOGIC;
    signal init_3_U0_ap_ready : STD_LOGIC;
    signal init_3_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_3_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_3_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_3_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_3_U0_result1_rows_V : STD_LOGIC;
    signal result1_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_result1_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_result1_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_3_U0_result1_cols_V : STD_LOGIC;
    signal result1_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_result1_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_result1_cols_V_full_n : STD_LOGIC;
    signal init_1_2_U0_ap_start : STD_LOGIC;
    signal init_1_2_U0_ap_done : STD_LOGIC;
    signal init_1_2_U0_ap_continue : STD_LOGIC;
    signal init_1_2_U0_ap_idle : STD_LOGIC;
    signal init_1_2_U0_ap_ready : STD_LOGIC;
    signal init_1_2_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_2_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_2_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_1_2_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_1_2_U0_result_rows_V : STD_LOGIC;
    signal result_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_result_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_result_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_1_2_U0_result_cols_V : STD_LOGIC;
    signal result_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_result_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_result_cols_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal Rgb2ycbcr_U0_ap_start : STD_LOGIC;
    signal Rgb2ycbcr_U0_ap_done : STD_LOGIC;
    signal Rgb2ycbcr_U0_ap_continue : STD_LOGIC;
    signal Rgb2ycbcr_U0_ap_idle : STD_LOGIC;
    signal Rgb2ycbcr_U0_ap_ready : STD_LOGIC;
    signal Rgb2ycbcr_U0_rgb_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal Rgb2ycbcr_U0_rgb_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal Rgb2ycbcr_U0_rgb_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Rgb2ycbcr_U0_rgb_data_stream_0_V_empty_n : STD_LOGIC;
    signal Rgb2ycbcr_U0_rgb_data_stream_0_V_read : STD_LOGIC;
    signal Rgb2ycbcr_U0_rgb_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Rgb2ycbcr_U0_rgb_data_stream_1_V_empty_n : STD_LOGIC;
    signal Rgb2ycbcr_U0_rgb_data_stream_1_V_read : STD_LOGIC;
    signal Rgb2ycbcr_U0_rgb_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Rgb2ycbcr_U0_rgb_data_stream_2_V_empty_n : STD_LOGIC;
    signal Rgb2ycbcr_U0_rgb_data_stream_2_V_read : STD_LOGIC;
    signal Rgb2ycbcr_U0_ycbcr_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Rgb2ycbcr_U0_ycbcr_data_stream_0_V_full_n : STD_LOGIC;
    signal Rgb2ycbcr_U0_ycbcr_data_stream_0_V_write : STD_LOGIC;
    signal median_filter_U0_ap_start : STD_LOGIC;
    signal median_filter_U0_ap_done : STD_LOGIC;
    signal median_filter_U0_ap_continue : STD_LOGIC;
    signal median_filter_U0_ap_idle : STD_LOGIC;
    signal median_filter_U0_ap_ready : STD_LOGIC;
    signal median_filter_U0_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal median_filter_U0_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal median_filter_U0_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal median_filter_U0_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal median_filter_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal median_filter_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal median_filter_U0_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal median_filter_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal median_filter_1_U0_ap_start : STD_LOGIC;
    signal median_filter_1_U0_ap_done : STD_LOGIC;
    signal median_filter_1_U0_ap_continue : STD_LOGIC;
    signal median_filter_1_U0_ap_idle : STD_LOGIC;
    signal median_filter_1_U0_ap_ready : STD_LOGIC;
    signal median_filter_1_U0_p_read : STD_LOGIC_VECTOR (11 downto 0);
    signal median_filter_1_U0_p_read1 : STD_LOGIC_VECTOR (11 downto 0);
    signal median_filter_1_U0_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal median_filter_1_U0_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal median_filter_1_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal median_filter_1_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal median_filter_1_U0_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal median_filter_1_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal finger_counter_U0_ap_start : STD_LOGIC;
    signal finger_counter_U0_ap_done : STD_LOGIC;
    signal finger_counter_U0_ap_continue : STD_LOGIC;
    signal finger_counter_U0_ap_idle : STD_LOGIC;
    signal finger_counter_U0_ap_ready : STD_LOGIC;
    signal finger_counter_U0_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal finger_counter_U0_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal finger_counter_U0_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal finger_counter_U0_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal finger_counter_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal finger_counter_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal finger_counter_U0_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal finger_counter_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal finger_counter_U0_gesture_V_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal finger_counter_U0_gesture_V_V_full_n : STD_LOGIC;
    signal finger_counter_U0_gesture_V_V_write : STD_LOGIC;
    signal set_color_U0_ap_start : STD_LOGIC;
    signal set_color_U0_ap_done : STD_LOGIC;
    signal set_color_U0_ap_continue : STD_LOGIC;
    signal set_color_U0_ap_idle : STD_LOGIC;
    signal set_color_U0_ap_ready : STD_LOGIC;
    signal set_color_U0_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal set_color_U0_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal set_color_U0_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal set_color_U0_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal set_color_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal set_color_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal set_color_U0_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal set_color_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal set_color_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal set_color_U0_dst_data_stream_1_V_full_n : STD_LOGIC;
    signal set_color_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal set_color_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal set_color_U0_dst_data_stream_2_V_full_n : STD_LOGIC;
    signal set_color_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal set_color_U0_gesture_V_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal set_color_U0_gesture_V_V_empty_n : STD_LOGIC;
    signal set_color_U0_gesture_V_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal src_rows_V_ap_dummy_ce : STD_LOGIC;
    signal src_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_write : STD_LOGIC;
    signal src_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_empty_n : STD_LOGIC;
    signal src_rows_V_read : STD_LOGIC;
    signal src_rows_V_channel_ap_dummy_ce : STD_LOGIC;
    signal src_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_channel_write : STD_LOGIC;
    signal src_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_channel_empty_n : STD_LOGIC;
    signal src_rows_V_channel_read : STD_LOGIC;
    signal src_cols_V_ap_dummy_ce : STD_LOGIC;
    signal src_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_write : STD_LOGIC;
    signal src_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_empty_n : STD_LOGIC;
    signal src_cols_V_read : STD_LOGIC;
    signal src_cols_V_channel_ap_dummy_ce : STD_LOGIC;
    signal src_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_channel_write : STD_LOGIC;
    signal src_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_channel_empty_n : STD_LOGIC;
    signal src_cols_V_channel_read : STD_LOGIC;
    signal ycbcr_rows_V_ap_dummy_ce : STD_LOGIC;
    signal ycbcr_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal ycbcr_rows_V_write : STD_LOGIC;
    signal ycbcr_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal ycbcr_rows_V_empty_n : STD_LOGIC;
    signal ycbcr_rows_V_read : STD_LOGIC;
    signal ycbcr_cols_V_ap_dummy_ce : STD_LOGIC;
    signal ycbcr_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal ycbcr_cols_V_write : STD_LOGIC;
    signal ycbcr_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal ycbcr_cols_V_empty_n : STD_LOGIC;
    signal ycbcr_cols_V_read : STD_LOGIC;
    signal medianImage_rows_V_ap_dummy_ce : STD_LOGIC;
    signal medianImage_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage_rows_V_write : STD_LOGIC;
    signal medianImage_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage_rows_V_empty_n : STD_LOGIC;
    signal medianImage_rows_V_read : STD_LOGIC;
    signal medianImage_cols_V_ap_dummy_ce : STD_LOGIC;
    signal medianImage_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage_cols_V_write : STD_LOGIC;
    signal medianImage_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage_cols_V_empty_n : STD_LOGIC;
    signal medianImage_cols_V_read : STD_LOGIC;
    signal medianImage2_rows_V_ap_dummy_ce : STD_LOGIC;
    signal medianImage2_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage2_rows_V_write : STD_LOGIC;
    signal medianImage2_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage2_rows_V_empty_n : STD_LOGIC;
    signal medianImage2_rows_V_read : STD_LOGIC;
    signal medianImage2_cols_V_ap_dummy_ce : STD_LOGIC;
    signal medianImage2_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage2_cols_V_write : STD_LOGIC;
    signal medianImage2_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal medianImage2_cols_V_empty_n : STD_LOGIC;
    signal medianImage2_cols_V_read : STD_LOGIC;
    signal result1_rows_V_ap_dummy_ce : STD_LOGIC;
    signal result1_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal result1_rows_V_write : STD_LOGIC;
    signal result1_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal result1_rows_V_empty_n : STD_LOGIC;
    signal result1_rows_V_read : STD_LOGIC;
    signal result1_cols_V_ap_dummy_ce : STD_LOGIC;
    signal result1_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal result1_cols_V_write : STD_LOGIC;
    signal result1_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal result1_cols_V_empty_n : STD_LOGIC;
    signal result1_cols_V_read : STD_LOGIC;
    signal result_rows_V_ap_dummy_ce : STD_LOGIC;
    signal result_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal result_rows_V_write : STD_LOGIC;
    signal result_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal result_rows_V_empty_n : STD_LOGIC;
    signal result_rows_V_read : STD_LOGIC;
    signal result_cols_V_ap_dummy_ce : STD_LOGIC;
    signal result_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal result_cols_V_write : STD_LOGIC;
    signal result_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal result_cols_V_empty_n : STD_LOGIC;
    signal result_cols_V_read : STD_LOGIC;
    signal src_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal src_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_full_n : STD_LOGIC;
    signal src_data_stream_0_V_write : STD_LOGIC;
    signal src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_empty_n : STD_LOGIC;
    signal src_data_stream_0_V_read : STD_LOGIC;
    signal src_data_stream_1_V_ap_dummy_ce : STD_LOGIC;
    signal src_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_1_V_full_n : STD_LOGIC;
    signal src_data_stream_1_V_write : STD_LOGIC;
    signal src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_1_V_empty_n : STD_LOGIC;
    signal src_data_stream_1_V_read : STD_LOGIC;
    signal src_data_stream_2_V_ap_dummy_ce : STD_LOGIC;
    signal src_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_2_V_full_n : STD_LOGIC;
    signal src_data_stream_2_V_write : STD_LOGIC;
    signal src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_2_V_empty_n : STD_LOGIC;
    signal src_data_stream_2_V_read : STD_LOGIC;
    signal ycbcr_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal ycbcr_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ycbcr_data_stream_0_V_full_n : STD_LOGIC;
    signal ycbcr_data_stream_0_V_write : STD_LOGIC;
    signal ycbcr_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ycbcr_data_stream_0_V_empty_n : STD_LOGIC;
    signal ycbcr_data_stream_0_V_read : STD_LOGIC;
    signal medianImage_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal medianImage_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal medianImage_data_stream_0_V_full_n : STD_LOGIC;
    signal medianImage_data_stream_0_V_write : STD_LOGIC;
    signal medianImage_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal medianImage_data_stream_0_V_empty_n : STD_LOGIC;
    signal medianImage_data_stream_0_V_read : STD_LOGIC;
    signal medianImage2_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal medianImage2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal medianImage2_data_stream_0_V_full_n : STD_LOGIC;
    signal medianImage2_data_stream_0_V_write : STD_LOGIC;
    signal medianImage2_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal medianImage2_data_stream_0_V_empty_n : STD_LOGIC;
    signal medianImage2_data_stream_0_V_read : STD_LOGIC;
    signal result1_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal result1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal result1_data_stream_0_V_full_n : STD_LOGIC;
    signal result1_data_stream_0_V_write : STD_LOGIC;
    signal result1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal result1_data_stream_0_V_empty_n : STD_LOGIC;
    signal result1_data_stream_0_V_read : STD_LOGIC;
    signal gesture_V_V_ap_dummy_ce : STD_LOGIC;
    signal gesture_V_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal gesture_V_V_full_n : STD_LOGIC;
    signal gesture_V_V_write : STD_LOGIC;
    signal gesture_V_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal gesture_V_V_empty_n : STD_LOGIC;
    signal gesture_V_V_read : STD_LOGIC;
    signal result_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal result_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal result_data_stream_0_V_full_n : STD_LOGIC;
    signal result_data_stream_0_V_write : STD_LOGIC;
    signal result_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal result_data_stream_0_V_empty_n : STD_LOGIC;
    signal result_data_stream_0_V_read : STD_LOGIC;
    signal result_data_stream_1_V_ap_dummy_ce : STD_LOGIC;
    signal result_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal result_data_stream_1_V_full_n : STD_LOGIC;
    signal result_data_stream_1_V_write : STD_LOGIC;
    signal result_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal result_data_stream_1_V_empty_n : STD_LOGIC;
    signal result_data_stream_1_V_read : STD_LOGIC;
    signal result_data_stream_2_V_ap_dummy_ce : STD_LOGIC;
    signal result_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal result_data_stream_2_V_full_n : STD_LOGIC;
    signal result_data_stream_2_V_write : STD_LOGIC;
    signal result_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal result_data_stream_2_V_empty_n : STD_LOGIC;
    signal result_data_stream_2_V_read : STD_LOGIC;
    signal ap_reg_procdone_init_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_init_1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_init_1_1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_init_2_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_init_3_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_init_1_2_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_Rgb2ycbcr_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_median_filter_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_median_filter_1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_finger_counter_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_set_color_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_init_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_init_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_1_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_1_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_init_1_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_1_1_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_1_1_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_init_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_2_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_2_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_init_3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_3_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_3_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_init_1_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_1_2_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_1_2_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start : STD_LOGIC;

    component init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component init_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component init_1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component init_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component init_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component init_1_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component AXIvideo2Mat_32_1080_1920_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Rgb2ycbcr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rgb_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        rgb_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        rgb_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        rgb_data_stream_0_V_empty_n : IN STD_LOGIC;
        rgb_data_stream_0_V_read : OUT STD_LOGIC;
        rgb_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        rgb_data_stream_1_V_empty_n : IN STD_LOGIC;
        rgb_data_stream_1_V_read : OUT STD_LOGIC;
        rgb_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        rgb_data_stream_2_V_empty_n : IN STD_LOGIC;
        rgb_data_stream_2_V_read : OUT STD_LOGIC;
        ycbcr_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ycbcr_data_stream_0_V_full_n : IN STD_LOGIC;
        ycbcr_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component median_filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component median_filter_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (11 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component finger_counter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        gesture_V_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        gesture_V_V_full_n : IN STD_LOGIC;
        gesture_V_V_write : OUT STD_LOGIC );
    end component;


    component set_color IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        gesture_V_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        gesture_V_V_empty_n : IN STD_LOGIC;
        gesture_V_V_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo_32_1080_1920_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_write : OUT STD_LOGIC );
    end component;


    component FIFO_image_filter_src_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_ycbcr_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_ycbcr_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_medianImage_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_medianImage_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_medianImage2_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_medianImage2_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result1_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result1_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_ycbcr_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_medianImage_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_medianImage2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_gesture_V_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_result_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    init_U0 : component init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_U0_ap_start,
        ap_done => init_U0_ap_done,
        ap_continue => init_U0_ap_continue,
        ap_idle => init_U0_ap_idle,
        ap_ready => init_U0_ap_ready,
        p_rows => init_U0_p_rows,
        p_cols => init_U0_p_cols,
        ap_return_0 => init_U0_ap_return_0,
        ap_return_1 => init_U0_ap_return_1,
        ap_return_2 => init_U0_ap_return_2,
        ap_return_3 => init_U0_ap_return_3);

    init_1_U0 : component init_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_1_U0_ap_start,
        ap_done => init_1_U0_ap_done,
        ap_continue => init_1_U0_ap_continue,
        ap_idle => init_1_U0_ap_idle,
        ap_ready => init_1_U0_ap_ready,
        p_rows => init_1_U0_p_rows,
        p_cols => init_1_U0_p_cols,
        ap_return_0 => init_1_U0_ap_return_0,
        ap_return_1 => init_1_U0_ap_return_1);

    init_1_1_U0 : component init_1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_1_1_U0_ap_start,
        ap_done => init_1_1_U0_ap_done,
        ap_continue => init_1_1_U0_ap_continue,
        ap_idle => init_1_1_U0_ap_idle,
        ap_ready => init_1_1_U0_ap_ready,
        p_rows => init_1_1_U0_p_rows,
        p_cols => init_1_1_U0_p_cols,
        ap_return_0 => init_1_1_U0_ap_return_0,
        ap_return_1 => init_1_1_U0_ap_return_1);

    init_2_U0 : component init_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_2_U0_ap_start,
        ap_done => init_2_U0_ap_done,
        ap_continue => init_2_U0_ap_continue,
        ap_idle => init_2_U0_ap_idle,
        ap_ready => init_2_U0_ap_ready,
        p_rows => init_2_U0_p_rows,
        p_cols => init_2_U0_p_cols,
        ap_return_0 => init_2_U0_ap_return_0,
        ap_return_1 => init_2_U0_ap_return_1);

    init_3_U0 : component init_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_3_U0_ap_start,
        ap_done => init_3_U0_ap_done,
        ap_continue => init_3_U0_ap_continue,
        ap_idle => init_3_U0_ap_idle,
        ap_ready => init_3_U0_ap_ready,
        p_rows => init_3_U0_p_rows,
        p_cols => init_3_U0_p_cols,
        ap_return_0 => init_3_U0_ap_return_0,
        ap_return_1 => init_3_U0_ap_return_1);

    init_1_2_U0 : component init_1_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_1_2_U0_ap_start,
        ap_done => init_1_2_U0_ap_done,
        ap_continue => init_1_2_U0_ap_continue,
        ap_idle => init_1_2_U0_ap_idle,
        ap_ready => init_1_2_U0_ap_ready,
        p_rows => init_1_2_U0_p_rows,
        p_cols => init_1_2_U0_p_cols,
        ap_return_0 => init_1_2_U0_ap_return_0,
        ap_return_1 => init_1_2_U0_ap_return_1);

    AXIvideo2Mat_32_1080_1920_16_U0 : component AXIvideo2Mat_32_1080_1920_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIvideo2Mat_32_1080_1920_16_U0_ap_start,
        ap_done => AXIvideo2Mat_32_1080_1920_16_U0_ap_done,
        ap_continue => AXIvideo2Mat_32_1080_1920_16_U0_ap_continue,
        ap_idle => AXIvideo2Mat_32_1080_1920_16_U0_ap_idle,
        ap_ready => AXIvideo2Mat_32_1080_1920_16_U0_ap_ready,
        AXI_video_strm_V_data_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read,
        img_rows_V_read => AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read,
        img_cols_V_read => AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write);

    Rgb2ycbcr_U0 : component Rgb2ycbcr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Rgb2ycbcr_U0_ap_start,
        ap_done => Rgb2ycbcr_U0_ap_done,
        ap_continue => Rgb2ycbcr_U0_ap_continue,
        ap_idle => Rgb2ycbcr_U0_ap_idle,
        ap_ready => Rgb2ycbcr_U0_ap_ready,
        rgb_rows_V_read => Rgb2ycbcr_U0_rgb_rows_V_read,
        rgb_cols_V_read => Rgb2ycbcr_U0_rgb_cols_V_read,
        rgb_data_stream_0_V_dout => Rgb2ycbcr_U0_rgb_data_stream_0_V_dout,
        rgb_data_stream_0_V_empty_n => Rgb2ycbcr_U0_rgb_data_stream_0_V_empty_n,
        rgb_data_stream_0_V_read => Rgb2ycbcr_U0_rgb_data_stream_0_V_read,
        rgb_data_stream_1_V_dout => Rgb2ycbcr_U0_rgb_data_stream_1_V_dout,
        rgb_data_stream_1_V_empty_n => Rgb2ycbcr_U0_rgb_data_stream_1_V_empty_n,
        rgb_data_stream_1_V_read => Rgb2ycbcr_U0_rgb_data_stream_1_V_read,
        rgb_data_stream_2_V_dout => Rgb2ycbcr_U0_rgb_data_stream_2_V_dout,
        rgb_data_stream_2_V_empty_n => Rgb2ycbcr_U0_rgb_data_stream_2_V_empty_n,
        rgb_data_stream_2_V_read => Rgb2ycbcr_U0_rgb_data_stream_2_V_read,
        ycbcr_data_stream_0_V_din => Rgb2ycbcr_U0_ycbcr_data_stream_0_V_din,
        ycbcr_data_stream_0_V_full_n => Rgb2ycbcr_U0_ycbcr_data_stream_0_V_full_n,
        ycbcr_data_stream_0_V_write => Rgb2ycbcr_U0_ycbcr_data_stream_0_V_write);

    median_filter_U0 : component median_filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => median_filter_U0_ap_start,
        ap_done => median_filter_U0_ap_done,
        ap_continue => median_filter_U0_ap_continue,
        ap_idle => median_filter_U0_ap_idle,
        ap_ready => median_filter_U0_ap_ready,
        src_rows_V_read => median_filter_U0_src_rows_V_read,
        src_cols_V_read => median_filter_U0_src_cols_V_read,
        src_data_stream_0_V_dout => median_filter_U0_src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => median_filter_U0_src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => median_filter_U0_src_data_stream_0_V_read,
        dst_data_stream_0_V_din => median_filter_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => median_filter_U0_dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write => median_filter_U0_dst_data_stream_0_V_write);

    median_filter_1_U0 : component median_filter_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => median_filter_1_U0_ap_start,
        ap_done => median_filter_1_U0_ap_done,
        ap_continue => median_filter_1_U0_ap_continue,
        ap_idle => median_filter_1_U0_ap_idle,
        ap_ready => median_filter_1_U0_ap_ready,
        p_read => median_filter_1_U0_p_read,
        p_read1 => median_filter_1_U0_p_read1,
        src_data_stream_0_V_dout => median_filter_1_U0_src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => median_filter_1_U0_src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => median_filter_1_U0_src_data_stream_0_V_read,
        dst_data_stream_0_V_din => median_filter_1_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => median_filter_1_U0_dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write => median_filter_1_U0_dst_data_stream_0_V_write);

    finger_counter_U0 : component finger_counter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => finger_counter_U0_ap_start,
        ap_done => finger_counter_U0_ap_done,
        ap_continue => finger_counter_U0_ap_continue,
        ap_idle => finger_counter_U0_ap_idle,
        ap_ready => finger_counter_U0_ap_ready,
        src_rows_V_read => finger_counter_U0_src_rows_V_read,
        src_cols_V_read => finger_counter_U0_src_cols_V_read,
        src_data_stream_0_V_dout => finger_counter_U0_src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => finger_counter_U0_src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => finger_counter_U0_src_data_stream_0_V_read,
        dst_data_stream_0_V_din => finger_counter_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => finger_counter_U0_dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write => finger_counter_U0_dst_data_stream_0_V_write,
        gesture_V_V_din => finger_counter_U0_gesture_V_V_din,
        gesture_V_V_full_n => finger_counter_U0_gesture_V_V_full_n,
        gesture_V_V_write => finger_counter_U0_gesture_V_V_write);

    set_color_U0 : component set_color
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => set_color_U0_ap_start,
        ap_done => set_color_U0_ap_done,
        ap_continue => set_color_U0_ap_continue,
        ap_idle => set_color_U0_ap_idle,
        ap_ready => set_color_U0_ap_ready,
        src_rows_V_read => set_color_U0_src_rows_V_read,
        src_cols_V_read => set_color_U0_src_cols_V_read,
        src_data_stream_0_V_dout => set_color_U0_src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => set_color_U0_src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => set_color_U0_src_data_stream_0_V_read,
        dst_data_stream_0_V_din => set_color_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => set_color_U0_dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write => set_color_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => set_color_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => set_color_U0_dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write => set_color_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => set_color_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => set_color_U0_dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write => set_color_U0_dst_data_stream_2_V_write,
        gesture_V_V_dout => set_color_U0_gesture_V_V_dout,
        gesture_V_V_empty_n => set_color_U0_gesture_V_V_empty_n,
        gesture_V_V_read => set_color_U0_gesture_V_V_read);

    Mat2AXIvideo_32_1080_1920_16_U0 : component Mat2AXIvideo_32_1080_1920_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Mat2AXIvideo_32_1080_1920_16_U0_ap_start,
        ap_done => Mat2AXIvideo_32_1080_1920_16_U0_ap_done,
        ap_continue => Mat2AXIvideo_32_1080_1920_16_U0_ap_continue,
        ap_idle => Mat2AXIvideo_32_1080_1920_16_U0_ap_idle,
        ap_ready => Mat2AXIvideo_32_1080_1920_16_U0_ap_ready,
        img_rows_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read,
        img_cols_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read,
        img_data_stream_0_V_dout => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read,
        AXI_video_strm_V_data_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din,
        AXI_video_strm_V_data_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n,
        AXI_video_strm_V_data_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write,
        AXI_video_strm_V_keep_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din,
        AXI_video_strm_V_keep_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n,
        AXI_video_strm_V_keep_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write,
        AXI_video_strm_V_strb_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din,
        AXI_video_strm_V_strb_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n,
        AXI_video_strm_V_strb_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write,
        AXI_video_strm_V_user_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din,
        AXI_video_strm_V_user_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n,
        AXI_video_strm_V_user_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write,
        AXI_video_strm_V_last_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din,
        AXI_video_strm_V_last_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n,
        AXI_video_strm_V_last_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write,
        AXI_video_strm_V_id_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din,
        AXI_video_strm_V_id_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n,
        AXI_video_strm_V_id_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write,
        AXI_video_strm_V_dest_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din,
        AXI_video_strm_V_dest_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n,
        AXI_video_strm_V_dest_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write);

    src_rows_V : component FIFO_image_filter_src_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_rows_V_ap_dummy_ce,
        if_write_ce => src_rows_V_ap_dummy_ce,
        if_din => src_rows_V_din,
        if_full_n => src_rows_V_full_n,
        if_write => src_rows_V_write,
        if_dout => src_rows_V_dout,
        if_empty_n => src_rows_V_empty_n,
        if_read => src_rows_V_read);

    src_rows_V_channel : component FIFO_image_filter_src_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_rows_V_channel_ap_dummy_ce,
        if_write_ce => src_rows_V_channel_ap_dummy_ce,
        if_din => src_rows_V_channel_din,
        if_full_n => src_rows_V_channel_full_n,
        if_write => src_rows_V_channel_write,
        if_dout => src_rows_V_channel_dout,
        if_empty_n => src_rows_V_channel_empty_n,
        if_read => src_rows_V_channel_read);

    src_cols_V : component FIFO_image_filter_src_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_cols_V_ap_dummy_ce,
        if_write_ce => src_cols_V_ap_dummy_ce,
        if_din => src_cols_V_din,
        if_full_n => src_cols_V_full_n,
        if_write => src_cols_V_write,
        if_dout => src_cols_V_dout,
        if_empty_n => src_cols_V_empty_n,
        if_read => src_cols_V_read);

    src_cols_V_channel : component FIFO_image_filter_src_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_cols_V_channel_ap_dummy_ce,
        if_write_ce => src_cols_V_channel_ap_dummy_ce,
        if_din => src_cols_V_channel_din,
        if_full_n => src_cols_V_channel_full_n,
        if_write => src_cols_V_channel_write,
        if_dout => src_cols_V_channel_dout,
        if_empty_n => src_cols_V_channel_empty_n,
        if_read => src_cols_V_channel_read);

    ycbcr_rows_V : component FIFO_image_filter_ycbcr_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ycbcr_rows_V_ap_dummy_ce,
        if_write_ce => ycbcr_rows_V_ap_dummy_ce,
        if_din => ycbcr_rows_V_din,
        if_full_n => ycbcr_rows_V_full_n,
        if_write => ycbcr_rows_V_write,
        if_dout => ycbcr_rows_V_dout,
        if_empty_n => ycbcr_rows_V_empty_n,
        if_read => ycbcr_rows_V_read);

    ycbcr_cols_V : component FIFO_image_filter_ycbcr_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ycbcr_cols_V_ap_dummy_ce,
        if_write_ce => ycbcr_cols_V_ap_dummy_ce,
        if_din => ycbcr_cols_V_din,
        if_full_n => ycbcr_cols_V_full_n,
        if_write => ycbcr_cols_V_write,
        if_dout => ycbcr_cols_V_dout,
        if_empty_n => ycbcr_cols_V_empty_n,
        if_read => ycbcr_cols_V_read);

    medianImage_rows_V : component FIFO_image_filter_medianImage_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => medianImage_rows_V_ap_dummy_ce,
        if_write_ce => medianImage_rows_V_ap_dummy_ce,
        if_din => medianImage_rows_V_din,
        if_full_n => medianImage_rows_V_full_n,
        if_write => medianImage_rows_V_write,
        if_dout => medianImage_rows_V_dout,
        if_empty_n => medianImage_rows_V_empty_n,
        if_read => medianImage_rows_V_read);

    medianImage_cols_V : component FIFO_image_filter_medianImage_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => medianImage_cols_V_ap_dummy_ce,
        if_write_ce => medianImage_cols_V_ap_dummy_ce,
        if_din => medianImage_cols_V_din,
        if_full_n => medianImage_cols_V_full_n,
        if_write => medianImage_cols_V_write,
        if_dout => medianImage_cols_V_dout,
        if_empty_n => medianImage_cols_V_empty_n,
        if_read => medianImage_cols_V_read);

    medianImage2_rows_V : component FIFO_image_filter_medianImage2_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => medianImage2_rows_V_ap_dummy_ce,
        if_write_ce => medianImage2_rows_V_ap_dummy_ce,
        if_din => medianImage2_rows_V_din,
        if_full_n => medianImage2_rows_V_full_n,
        if_write => medianImage2_rows_V_write,
        if_dout => medianImage2_rows_V_dout,
        if_empty_n => medianImage2_rows_V_empty_n,
        if_read => medianImage2_rows_V_read);

    medianImage2_cols_V : component FIFO_image_filter_medianImage2_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => medianImage2_cols_V_ap_dummy_ce,
        if_write_ce => medianImage2_cols_V_ap_dummy_ce,
        if_din => medianImage2_cols_V_din,
        if_full_n => medianImage2_cols_V_full_n,
        if_write => medianImage2_cols_V_write,
        if_dout => medianImage2_cols_V_dout,
        if_empty_n => medianImage2_cols_V_empty_n,
        if_read => medianImage2_cols_V_read);

    result1_rows_V : component FIFO_image_filter_result1_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result1_rows_V_ap_dummy_ce,
        if_write_ce => result1_rows_V_ap_dummy_ce,
        if_din => result1_rows_V_din,
        if_full_n => result1_rows_V_full_n,
        if_write => result1_rows_V_write,
        if_dout => result1_rows_V_dout,
        if_empty_n => result1_rows_V_empty_n,
        if_read => result1_rows_V_read);

    result1_cols_V : component FIFO_image_filter_result1_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result1_cols_V_ap_dummy_ce,
        if_write_ce => result1_cols_V_ap_dummy_ce,
        if_din => result1_cols_V_din,
        if_full_n => result1_cols_V_full_n,
        if_write => result1_cols_V_write,
        if_dout => result1_cols_V_dout,
        if_empty_n => result1_cols_V_empty_n,
        if_read => result1_cols_V_read);

    result_rows_V : component FIFO_image_filter_result_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result_rows_V_ap_dummy_ce,
        if_write_ce => result_rows_V_ap_dummy_ce,
        if_din => result_rows_V_din,
        if_full_n => result_rows_V_full_n,
        if_write => result_rows_V_write,
        if_dout => result_rows_V_dout,
        if_empty_n => result_rows_V_empty_n,
        if_read => result_rows_V_read);

    result_cols_V : component FIFO_image_filter_result_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result_cols_V_ap_dummy_ce,
        if_write_ce => result_cols_V_ap_dummy_ce,
        if_din => result_cols_V_din,
        if_full_n => result_cols_V_full_n,
        if_write => result_cols_V_write,
        if_dout => result_cols_V_dout,
        if_empty_n => result_cols_V_empty_n,
        if_read => result_cols_V_read);

    src_data_stream_0_V : component FIFO_image_filter_src_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_data_stream_0_V_ap_dummy_ce,
        if_write_ce => src_data_stream_0_V_ap_dummy_ce,
        if_din => src_data_stream_0_V_din,
        if_full_n => src_data_stream_0_V_full_n,
        if_write => src_data_stream_0_V_write,
        if_dout => src_data_stream_0_V_dout,
        if_empty_n => src_data_stream_0_V_empty_n,
        if_read => src_data_stream_0_V_read);

    src_data_stream_1_V : component FIFO_image_filter_src_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_data_stream_1_V_ap_dummy_ce,
        if_write_ce => src_data_stream_1_V_ap_dummy_ce,
        if_din => src_data_stream_1_V_din,
        if_full_n => src_data_stream_1_V_full_n,
        if_write => src_data_stream_1_V_write,
        if_dout => src_data_stream_1_V_dout,
        if_empty_n => src_data_stream_1_V_empty_n,
        if_read => src_data_stream_1_V_read);

    src_data_stream_2_V : component FIFO_image_filter_src_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => src_data_stream_2_V_ap_dummy_ce,
        if_write_ce => src_data_stream_2_V_ap_dummy_ce,
        if_din => src_data_stream_2_V_din,
        if_full_n => src_data_stream_2_V_full_n,
        if_write => src_data_stream_2_V_write,
        if_dout => src_data_stream_2_V_dout,
        if_empty_n => src_data_stream_2_V_empty_n,
        if_read => src_data_stream_2_V_read);

    ycbcr_data_stream_0_V : component FIFO_image_filter_ycbcr_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ycbcr_data_stream_0_V_ap_dummy_ce,
        if_write_ce => ycbcr_data_stream_0_V_ap_dummy_ce,
        if_din => ycbcr_data_stream_0_V_din,
        if_full_n => ycbcr_data_stream_0_V_full_n,
        if_write => ycbcr_data_stream_0_V_write,
        if_dout => ycbcr_data_stream_0_V_dout,
        if_empty_n => ycbcr_data_stream_0_V_empty_n,
        if_read => ycbcr_data_stream_0_V_read);

    medianImage_data_stream_0_V : component FIFO_image_filter_medianImage_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => medianImage_data_stream_0_V_ap_dummy_ce,
        if_write_ce => medianImage_data_stream_0_V_ap_dummy_ce,
        if_din => medianImage_data_stream_0_V_din,
        if_full_n => medianImage_data_stream_0_V_full_n,
        if_write => medianImage_data_stream_0_V_write,
        if_dout => medianImage_data_stream_0_V_dout,
        if_empty_n => medianImage_data_stream_0_V_empty_n,
        if_read => medianImage_data_stream_0_V_read);

    medianImage2_data_stream_0_V : component FIFO_image_filter_medianImage2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => medianImage2_data_stream_0_V_ap_dummy_ce,
        if_write_ce => medianImage2_data_stream_0_V_ap_dummy_ce,
        if_din => medianImage2_data_stream_0_V_din,
        if_full_n => medianImage2_data_stream_0_V_full_n,
        if_write => medianImage2_data_stream_0_V_write,
        if_dout => medianImage2_data_stream_0_V_dout,
        if_empty_n => medianImage2_data_stream_0_V_empty_n,
        if_read => medianImage2_data_stream_0_V_read);

    result1_data_stream_0_V : component FIFO_image_filter_result1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result1_data_stream_0_V_ap_dummy_ce,
        if_write_ce => result1_data_stream_0_V_ap_dummy_ce,
        if_din => result1_data_stream_0_V_din,
        if_full_n => result1_data_stream_0_V_full_n,
        if_write => result1_data_stream_0_V_write,
        if_dout => result1_data_stream_0_V_dout,
        if_empty_n => result1_data_stream_0_V_empty_n,
        if_read => result1_data_stream_0_V_read);

    gesture_V_V : component FIFO_image_filter_gesture_V_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => gesture_V_V_ap_dummy_ce,
        if_write_ce => gesture_V_V_ap_dummy_ce,
        if_din => gesture_V_V_din,
        if_full_n => gesture_V_V_full_n,
        if_write => gesture_V_V_write,
        if_dout => gesture_V_V_dout,
        if_empty_n => gesture_V_V_empty_n,
        if_read => gesture_V_V_read);

    result_data_stream_0_V : component FIFO_image_filter_result_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result_data_stream_0_V_ap_dummy_ce,
        if_write_ce => result_data_stream_0_V_ap_dummy_ce,
        if_din => result_data_stream_0_V_din,
        if_full_n => result_data_stream_0_V_full_n,
        if_write => result_data_stream_0_V_write,
        if_dout => result_data_stream_0_V_dout,
        if_empty_n => result_data_stream_0_V_empty_n,
        if_read => result_data_stream_0_V_read);

    result_data_stream_1_V : component FIFO_image_filter_result_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result_data_stream_1_V_ap_dummy_ce,
        if_write_ce => result_data_stream_1_V_ap_dummy_ce,
        if_din => result_data_stream_1_V_din,
        if_full_n => result_data_stream_1_V_full_n,
        if_write => result_data_stream_1_V_write,
        if_dout => result_data_stream_1_V_dout,
        if_empty_n => result_data_stream_1_V_empty_n,
        if_read => result_data_stream_1_V_read);

    result_data_stream_2_V : component FIFO_image_filter_result_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => result_data_stream_2_V_ap_dummy_ce,
        if_write_ce => result_data_stream_2_V_ap_dummy_ce,
        if_din => result_data_stream_2_V_din,
        if_full_n => result_data_stream_2_V_full_n,
        if_write => result_data_stream_2_V_write,
        if_dout => result_data_stream_2_V_dout,
        if_empty_n => result_data_stream_2_V_empty_n,
        if_read => result_data_stream_2_V_read);




    -- ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 assign process. --
    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = AXIvideo2Mat_32_1080_1920_16_U0_ap_done)) then 
                    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 assign process. --
    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Mat2AXIvideo_32_1080_1920_16_U0_ap_done)) then 
                    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Rgb2ycbcr_U0 assign process. --
    ap_reg_procdone_Rgb2ycbcr_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Rgb2ycbcr_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Rgb2ycbcr_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Rgb2ycbcr_U0_ap_done)) then 
                    ap_reg_procdone_Rgb2ycbcr_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_finger_counter_U0 assign process. --
    ap_reg_procdone_finger_counter_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_finger_counter_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_finger_counter_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = finger_counter_U0_ap_done)) then 
                    ap_reg_procdone_finger_counter_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_1_1_U0 assign process. --
    ap_reg_procdone_init_1_1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_1_1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_1_1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_1_U0_ap_done)) then 
                    ap_reg_procdone_init_1_1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_1_2_U0 assign process. --
    ap_reg_procdone_init_1_2_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_1_2_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_1_2_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_2_U0_ap_done)) then 
                    ap_reg_procdone_init_1_2_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_1_U0 assign process. --
    ap_reg_procdone_init_1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_U0_ap_done)) then 
                    ap_reg_procdone_init_1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_2_U0 assign process. --
    ap_reg_procdone_init_2_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_2_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_2_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_2_U0_ap_done)) then 
                    ap_reg_procdone_init_2_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_3_U0 assign process. --
    ap_reg_procdone_init_3_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_3_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_3_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_3_U0_ap_done)) then 
                    ap_reg_procdone_init_3_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_U0 assign process. --
    ap_reg_procdone_init_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_U0 <= ap_const_logic_0;
                elsif ((init_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_init_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_median_filter_1_U0 assign process. --
    ap_reg_procdone_median_filter_1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_median_filter_1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_median_filter_1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = median_filter_1_U0_ap_done)) then 
                    ap_reg_procdone_median_filter_1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_median_filter_U0 assign process. --
    ap_reg_procdone_median_filter_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_median_filter_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_median_filter_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = median_filter_U0_ap_done)) then 
                    ap_reg_procdone_median_filter_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_set_color_U0 assign process. --
    ap_reg_procdone_set_color_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_set_color_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_set_color_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = set_color_U0_ap_done)) then 
                    ap_reg_procdone_set_color_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. --
    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) then 
                    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_1_1_U0_ap_ready assign process. --
    ap_reg_ready_init_1_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_1_U0_ap_ready)) then 
                    ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_1_2_U0_ap_ready assign process. --
    ap_reg_ready_init_1_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_1_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_1_2_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_2_U0_ap_ready)) then 
                    ap_reg_ready_init_1_2_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_1_U0_ap_ready assign process. --
    ap_reg_ready_init_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_U0_ap_ready)) then 
                    ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_2_U0_ap_ready assign process. --
    ap_reg_ready_init_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_2_U0_ap_ready)) then 
                    ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_3_U0_ap_ready assign process. --
    ap_reg_ready_init_3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_3_U0_ap_ready)) then 
                    ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_U0_ap_ready assign process. --
    ap_reg_ready_init_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
                elsif ((init_U0_ap_ready = ap_const_logic_1)) then 
                    ap_reg_ready_init_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_medianImage2_cols_V_full_n assign process. --
    ap_reg_ready_medianImage2_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_medianImage2_cols_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_2_U0_ap_done) and (ap_const_logic_1 = init_2_U0_ap_continue))) then 
                    ap_reg_ready_medianImage2_cols_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_2_U0_ap_done) and (ap_const_logic_1 = medianImage2_cols_V_full_n))) then 
                    ap_reg_ready_medianImage2_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_medianImage2_rows_V_full_n assign process. --
    ap_reg_ready_medianImage2_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_medianImage2_rows_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_2_U0_ap_done) and (ap_const_logic_1 = init_2_U0_ap_continue))) then 
                    ap_reg_ready_medianImage2_rows_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_2_U0_ap_done) and (ap_const_logic_1 = medianImage2_rows_V_full_n))) then 
                    ap_reg_ready_medianImage2_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_medianImage_cols_V_full_n assign process. --
    ap_reg_ready_medianImage_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_medianImage_cols_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_1_U0_ap_done) and (ap_const_logic_1 = init_1_1_U0_ap_continue))) then 
                    ap_reg_ready_medianImage_cols_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_1_U0_ap_done) and (ap_const_logic_1 = medianImage_cols_V_full_n))) then 
                    ap_reg_ready_medianImage_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_medianImage_rows_V_full_n assign process. --
    ap_reg_ready_medianImage_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_medianImage_rows_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_1_U0_ap_done) and (ap_const_logic_1 = init_1_1_U0_ap_continue))) then 
                    ap_reg_ready_medianImage_rows_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_1_U0_ap_done) and (ap_const_logic_1 = medianImage_rows_V_full_n))) then 
                    ap_reg_ready_medianImage_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_result1_cols_V_full_n assign process. --
    ap_reg_ready_result1_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_result1_cols_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_3_U0_ap_done) and (ap_const_logic_1 = init_3_U0_ap_continue))) then 
                    ap_reg_ready_result1_cols_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_3_U0_ap_done) and (ap_const_logic_1 = result1_cols_V_full_n))) then 
                    ap_reg_ready_result1_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_result1_rows_V_full_n assign process. --
    ap_reg_ready_result1_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_result1_rows_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_3_U0_ap_done) and (ap_const_logic_1 = init_3_U0_ap_continue))) then 
                    ap_reg_ready_result1_rows_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_3_U0_ap_done) and (ap_const_logic_1 = result1_rows_V_full_n))) then 
                    ap_reg_ready_result1_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_result_cols_V_full_n assign process. --
    ap_reg_ready_result_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_result_cols_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_2_U0_ap_done) and (ap_const_logic_1 = init_1_2_U0_ap_continue))) then 
                    ap_reg_ready_result_cols_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_2_U0_ap_done) and (ap_const_logic_1 = result_cols_V_full_n))) then 
                    ap_reg_ready_result_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_result_rows_V_full_n assign process. --
    ap_reg_ready_result_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_result_rows_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_2_U0_ap_done) and (ap_const_logic_1 = init_1_2_U0_ap_continue))) then 
                    ap_reg_ready_result_rows_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_2_U0_ap_done) and (ap_const_logic_1 = result_rows_V_full_n))) then 
                    ap_reg_ready_result_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src_cols_V_channel_full_n assign process. --
    ap_reg_ready_src_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_src_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_src_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = src_cols_V_channel_full_n))) then 
                    ap_reg_ready_src_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src_cols_V_full_n assign process. --
    ap_reg_ready_src_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_src_cols_V_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_src_cols_V_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = src_cols_V_full_n))) then 
                    ap_reg_ready_src_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src_rows_V_channel_full_n assign process. --
    ap_reg_ready_src_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_src_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_src_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = src_rows_V_channel_full_n))) then 
                    ap_reg_ready_src_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src_rows_V_full_n assign process. --
    ap_reg_ready_src_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_src_rows_V_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_src_rows_V_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = src_rows_V_full_n))) then 
                    ap_reg_ready_src_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_ycbcr_cols_V_full_n assign process. --
    ap_reg_ready_ycbcr_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_ycbcr_cols_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = init_1_U0_ap_continue))) then 
                    ap_reg_ready_ycbcr_cols_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = ycbcr_cols_V_full_n))) then 
                    ap_reg_ready_ycbcr_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_ycbcr_rows_V_full_n assign process. --
    ap_reg_ready_ycbcr_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_ycbcr_rows_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = init_1_U0_ap_continue))) then 
                    ap_reg_ready_ycbcr_rows_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = ycbcr_rows_V_full_n))) then 
                    ap_reg_ready_ycbcr_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout <= input_V_data_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n <= input_V_data_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout <= input_V_dest_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n <= input_V_dest_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout <= input_V_id_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n <= input_V_id_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout <= input_V_keep_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n <= input_V_keep_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout <= input_V_last_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n <= input_V_last_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout <= input_V_strb_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n <= input_V_strb_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout <= input_V_user_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n <= input_V_user_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_32_1080_1920_16_U0_ap_start <= (src_rows_V_empty_n and src_cols_V_empty_n and ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start);
    AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read <= src_cols_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n <= src_data_stream_0_V_full_n;
    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n <= src_data_stream_1_V_full_n;
    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n <= src_data_stream_2_V_full_n;
    AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read <= src_rows_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n <= output_V_data_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n <= output_V_dest_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n <= output_V_id_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n <= output_V_keep_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n <= output_V_last_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n <= output_V_strb_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n <= output_V_user_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_ap_continue <= ap_sig_hs_continue;
    Mat2AXIvideo_32_1080_1920_16_U0_ap_start <= (result_rows_V_empty_n and result_cols_V_empty_n);
    Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read <= result_cols_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout <= result_data_stream_0_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n <= result_data_stream_0_V_empty_n;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout <= result_data_stream_1_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n <= result_data_stream_1_V_empty_n;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout <= result_data_stream_2_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n <= result_data_stream_2_V_empty_n;
    Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read <= result_rows_V_dout;
    Rgb2ycbcr_U0_ap_continue <= ap_const_logic_1;
    Rgb2ycbcr_U0_ap_start <= (src_rows_V_channel_empty_n and src_cols_V_channel_empty_n);
    Rgb2ycbcr_U0_rgb_cols_V_read <= src_cols_V_channel_dout;
    Rgb2ycbcr_U0_rgb_data_stream_0_V_dout <= src_data_stream_0_V_dout;
    Rgb2ycbcr_U0_rgb_data_stream_0_V_empty_n <= src_data_stream_0_V_empty_n;
    Rgb2ycbcr_U0_rgb_data_stream_1_V_dout <= src_data_stream_1_V_dout;
    Rgb2ycbcr_U0_rgb_data_stream_1_V_empty_n <= src_data_stream_1_V_empty_n;
    Rgb2ycbcr_U0_rgb_data_stream_2_V_dout <= src_data_stream_2_V_dout;
    Rgb2ycbcr_U0_rgb_data_stream_2_V_empty_n <= src_data_stream_2_V_empty_n;
    Rgb2ycbcr_U0_rgb_rows_V_read <= src_rows_V_channel_dout;
    Rgb2ycbcr_U0_ycbcr_data_stream_0_V_full_n <= ycbcr_data_stream_0_V_full_n;

    -- ap_chn_write_init_1_1_U0_medianImage_cols_V assign process. --
    ap_chn_write_init_1_1_U0_medianImage_cols_V_assign_proc : process(init_1_1_U0_ap_done, ap_reg_ready_medianImage_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_medianImage_cols_V_full_n)) then 
            ap_chn_write_init_1_1_U0_medianImage_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_1_U0_medianImage_cols_V <= init_1_1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_1_1_U0_medianImage_rows_V assign process. --
    ap_chn_write_init_1_1_U0_medianImage_rows_V_assign_proc : process(init_1_1_U0_ap_done, ap_reg_ready_medianImage_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_medianImage_rows_V_full_n)) then 
            ap_chn_write_init_1_1_U0_medianImage_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_1_U0_medianImage_rows_V <= init_1_1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_1_2_U0_result_cols_V assign process. --
    ap_chn_write_init_1_2_U0_result_cols_V_assign_proc : process(init_1_2_U0_ap_done, ap_reg_ready_result_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_result_cols_V_full_n)) then 
            ap_chn_write_init_1_2_U0_result_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_2_U0_result_cols_V <= init_1_2_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_1_2_U0_result_rows_V assign process. --
    ap_chn_write_init_1_2_U0_result_rows_V_assign_proc : process(init_1_2_U0_ap_done, ap_reg_ready_result_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_result_rows_V_full_n)) then 
            ap_chn_write_init_1_2_U0_result_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_2_U0_result_rows_V <= init_1_2_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_1_U0_ycbcr_cols_V assign process. --
    ap_chn_write_init_1_U0_ycbcr_cols_V_assign_proc : process(init_1_U0_ap_done, ap_reg_ready_ycbcr_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_ycbcr_cols_V_full_n)) then 
            ap_chn_write_init_1_U0_ycbcr_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_U0_ycbcr_cols_V <= init_1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_1_U0_ycbcr_rows_V assign process. --
    ap_chn_write_init_1_U0_ycbcr_rows_V_assign_proc : process(init_1_U0_ap_done, ap_reg_ready_ycbcr_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_ycbcr_rows_V_full_n)) then 
            ap_chn_write_init_1_U0_ycbcr_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_U0_ycbcr_rows_V <= init_1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_2_U0_medianImage2_cols_V assign process. --
    ap_chn_write_init_2_U0_medianImage2_cols_V_assign_proc : process(init_2_U0_ap_done, ap_reg_ready_medianImage2_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_medianImage2_cols_V_full_n)) then 
            ap_chn_write_init_2_U0_medianImage2_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_2_U0_medianImage2_cols_V <= init_2_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_2_U0_medianImage2_rows_V assign process. --
    ap_chn_write_init_2_U0_medianImage2_rows_V_assign_proc : process(init_2_U0_ap_done, ap_reg_ready_medianImage2_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_medianImage2_rows_V_full_n)) then 
            ap_chn_write_init_2_U0_medianImage2_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_2_U0_medianImage2_rows_V <= init_2_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_3_U0_result1_cols_V assign process. --
    ap_chn_write_init_3_U0_result1_cols_V_assign_proc : process(init_3_U0_ap_done, ap_reg_ready_result1_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_result1_cols_V_full_n)) then 
            ap_chn_write_init_3_U0_result1_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_3_U0_result1_cols_V <= init_3_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_3_U0_result1_rows_V assign process. --
    ap_chn_write_init_3_U0_result1_rows_V_assign_proc : process(init_3_U0_ap_done, ap_reg_ready_result1_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_result1_rows_V_full_n)) then 
            ap_chn_write_init_3_U0_result1_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_3_U0_result1_rows_V <= init_3_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_src_cols_V assign process. --
    ap_chn_write_init_U0_src_cols_V_assign_proc : process(init_U0_ap_done, ap_reg_ready_src_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src_cols_V_full_n)) then 
            ap_chn_write_init_U0_src_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_src_cols_V <= init_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_src_cols_V_channel assign process. --
    ap_chn_write_init_U0_src_cols_V_channel_assign_proc : process(init_U0_ap_done, ap_reg_ready_src_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src_cols_V_channel_full_n)) then 
            ap_chn_write_init_U0_src_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_src_cols_V_channel <= init_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_src_rows_V assign process. --
    ap_chn_write_init_U0_src_rows_V_assign_proc : process(init_U0_ap_done, ap_reg_ready_src_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src_rows_V_full_n)) then 
            ap_chn_write_init_U0_src_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_src_rows_V <= init_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_src_rows_V_channel assign process. --
    ap_chn_write_init_U0_src_rows_V_channel_assign_proc : process(init_U0_ap_done, ap_reg_ready_src_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src_rows_V_channel_full_n)) then 
            ap_chn_write_init_U0_src_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_src_rows_V_channel <= init_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(init_U0_ap_idle, init_1_U0_ap_idle, init_1_1_U0_ap_idle, init_2_U0_ap_idle, init_3_U0_ap_idle, init_1_2_U0_ap_idle, AXIvideo2Mat_32_1080_1920_16_U0_ap_idle, Rgb2ycbcr_U0_ap_idle, median_filter_U0_ap_idle, median_filter_1_U0_ap_idle, finger_counter_U0_ap_idle, set_color_U0_ap_idle, Mat2AXIvideo_32_1080_1920_16_U0_ap_idle, src_rows_V_empty_n, src_rows_V_channel_empty_n, src_cols_V_empty_n, src_cols_V_channel_empty_n, ycbcr_rows_V_empty_n, ycbcr_cols_V_empty_n, medianImage_rows_V_empty_n, medianImage_cols_V_empty_n, medianImage2_rows_V_empty_n, medianImage2_cols_V_empty_n, result1_rows_V_empty_n, result1_cols_V_empty_n, result_rows_V_empty_n, result_cols_V_empty_n)
    begin
        if (((init_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = init_1_U0_ap_idle) and (ap_const_logic_1 = init_1_1_U0_ap_idle) and (ap_const_logic_1 = init_2_U0_ap_idle) and (ap_const_logic_1 = init_3_U0_ap_idle) and (ap_const_logic_1 = init_1_2_U0_ap_idle) and (ap_const_logic_1 = AXIvideo2Mat_32_1080_1920_16_U0_ap_idle) and (ap_const_logic_1 = Rgb2ycbcr_U0_ap_idle) and (ap_const_logic_1 = median_filter_U0_ap_idle) and (ap_const_logic_1 = median_filter_1_U0_ap_idle) and (ap_const_logic_1 = finger_counter_U0_ap_idle) and (ap_const_logic_1 = set_color_U0_ap_idle) and (ap_const_logic_1 = Mat2AXIvideo_32_1080_1920_16_U0_ap_idle) and (ap_const_logic_0 = src_rows_V_empty_n) and (ap_const_logic_0 = src_rows_V_channel_empty_n) and (ap_const_logic_0 = src_cols_V_empty_n) and (ap_const_logic_0 = src_cols_V_channel_empty_n) and (ap_const_logic_0 = ycbcr_rows_V_empty_n) and (ap_const_logic_0 = ycbcr_cols_V_empty_n) and (ap_const_logic_0 = medianImage_rows_V_empty_n) and (ap_const_logic_0 = medianImage_cols_V_empty_n) and (ap_const_logic_0 = medianImage2_rows_V_empty_n) and (ap_const_logic_0 = medianImage2_cols_V_empty_n) and (ap_const_logic_0 = result1_rows_V_empty_n) and (ap_const_logic_0 = result1_cols_V_empty_n) and (ap_const_logic_0 = result_rows_V_empty_n) and (ap_const_logic_0 = result_cols_V_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(Mat2AXIvideo_32_1080_1920_16_U0_ap_done, ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0)
    begin
        if (((ap_const_logic_1 = Mat2AXIvideo_32_1080_1920_16_U0_ap_done) or (ap_const_logic_1 = ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0))) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. --
    ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready_assign_proc : process(AXIvideo2Mat_32_1080_1920_16_U0_ap_ready, ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) then 
            ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
        else 
            ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_1_1_U0_ap_ready assign process. --
    ap_sig_ready_init_1_1_U0_ap_ready_assign_proc : process(init_1_1_U0_ap_ready, ap_reg_ready_init_1_1_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_1_1_U0_ap_ready)) then 
            ap_sig_ready_init_1_1_U0_ap_ready <= init_1_1_U0_ap_ready;
        else 
            ap_sig_ready_init_1_1_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_1_2_U0_ap_ready assign process. --
    ap_sig_ready_init_1_2_U0_ap_ready_assign_proc : process(init_1_2_U0_ap_ready, ap_reg_ready_init_1_2_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_1_2_U0_ap_ready)) then 
            ap_sig_ready_init_1_2_U0_ap_ready <= init_1_2_U0_ap_ready;
        else 
            ap_sig_ready_init_1_2_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_1_U0_ap_ready assign process. --
    ap_sig_ready_init_1_U0_ap_ready_assign_proc : process(init_1_U0_ap_ready, ap_reg_ready_init_1_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_1_U0_ap_ready)) then 
            ap_sig_ready_init_1_U0_ap_ready <= init_1_U0_ap_ready;
        else 
            ap_sig_ready_init_1_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_2_U0_ap_ready assign process. --
    ap_sig_ready_init_2_U0_ap_ready_assign_proc : process(init_2_U0_ap_ready, ap_reg_ready_init_2_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_2_U0_ap_ready)) then 
            ap_sig_ready_init_2_U0_ap_ready <= init_2_U0_ap_ready;
        else 
            ap_sig_ready_init_2_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_3_U0_ap_ready assign process. --
    ap_sig_ready_init_3_U0_ap_ready_assign_proc : process(init_3_U0_ap_ready, ap_reg_ready_init_3_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_3_U0_ap_ready)) then 
            ap_sig_ready_init_3_U0_ap_ready <= init_3_U0_ap_ready;
        else 
            ap_sig_ready_init_3_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_U0_ap_ready assign process. --
    ap_sig_ready_init_U0_ap_ready_assign_proc : process(init_U0_ap_ready, ap_reg_ready_init_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_U0_ap_ready)) then 
            ap_sig_ready_init_U0_ap_ready <= init_U0_ap_ready;
        else 
            ap_sig_ready_init_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_medianImage2_cols_V_full_n assign process. --
    ap_sig_ready_medianImage2_cols_V_full_n_assign_proc : process(medianImage2_cols_V_full_n, ap_reg_ready_medianImage2_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_medianImage2_cols_V_full_n)) then 
            ap_sig_ready_medianImage2_cols_V_full_n <= medianImage2_cols_V_full_n;
        else 
            ap_sig_ready_medianImage2_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_medianImage2_rows_V_full_n assign process. --
    ap_sig_ready_medianImage2_rows_V_full_n_assign_proc : process(medianImage2_rows_V_full_n, ap_reg_ready_medianImage2_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_medianImage2_rows_V_full_n)) then 
            ap_sig_ready_medianImage2_rows_V_full_n <= medianImage2_rows_V_full_n;
        else 
            ap_sig_ready_medianImage2_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_medianImage_cols_V_full_n assign process. --
    ap_sig_ready_medianImage_cols_V_full_n_assign_proc : process(medianImage_cols_V_full_n, ap_reg_ready_medianImage_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_medianImage_cols_V_full_n)) then 
            ap_sig_ready_medianImage_cols_V_full_n <= medianImage_cols_V_full_n;
        else 
            ap_sig_ready_medianImage_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_medianImage_rows_V_full_n assign process. --
    ap_sig_ready_medianImage_rows_V_full_n_assign_proc : process(medianImage_rows_V_full_n, ap_reg_ready_medianImage_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_medianImage_rows_V_full_n)) then 
            ap_sig_ready_medianImage_rows_V_full_n <= medianImage_rows_V_full_n;
        else 
            ap_sig_ready_medianImage_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_result1_cols_V_full_n assign process. --
    ap_sig_ready_result1_cols_V_full_n_assign_proc : process(result1_cols_V_full_n, ap_reg_ready_result1_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_result1_cols_V_full_n)) then 
            ap_sig_ready_result1_cols_V_full_n <= result1_cols_V_full_n;
        else 
            ap_sig_ready_result1_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_result1_rows_V_full_n assign process. --
    ap_sig_ready_result1_rows_V_full_n_assign_proc : process(result1_rows_V_full_n, ap_reg_ready_result1_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_result1_rows_V_full_n)) then 
            ap_sig_ready_result1_rows_V_full_n <= result1_rows_V_full_n;
        else 
            ap_sig_ready_result1_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_result_cols_V_full_n assign process. --
    ap_sig_ready_result_cols_V_full_n_assign_proc : process(result_cols_V_full_n, ap_reg_ready_result_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_result_cols_V_full_n)) then 
            ap_sig_ready_result_cols_V_full_n <= result_cols_V_full_n;
        else 
            ap_sig_ready_result_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_result_rows_V_full_n assign process. --
    ap_sig_ready_result_rows_V_full_n_assign_proc : process(result_rows_V_full_n, ap_reg_ready_result_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_result_rows_V_full_n)) then 
            ap_sig_ready_result_rows_V_full_n <= result_rows_V_full_n;
        else 
            ap_sig_ready_result_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src_cols_V_channel_full_n assign process. --
    ap_sig_ready_src_cols_V_channel_full_n_assign_proc : process(src_cols_V_channel_full_n, ap_reg_ready_src_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src_cols_V_channel_full_n)) then 
            ap_sig_ready_src_cols_V_channel_full_n <= src_cols_V_channel_full_n;
        else 
            ap_sig_ready_src_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src_cols_V_full_n assign process. --
    ap_sig_ready_src_cols_V_full_n_assign_proc : process(src_cols_V_full_n, ap_reg_ready_src_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src_cols_V_full_n)) then 
            ap_sig_ready_src_cols_V_full_n <= src_cols_V_full_n;
        else 
            ap_sig_ready_src_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src_rows_V_channel_full_n assign process. --
    ap_sig_ready_src_rows_V_channel_full_n_assign_proc : process(src_rows_V_channel_full_n, ap_reg_ready_src_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src_rows_V_channel_full_n)) then 
            ap_sig_ready_src_rows_V_channel_full_n <= src_rows_V_channel_full_n;
        else 
            ap_sig_ready_src_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src_rows_V_full_n assign process. --
    ap_sig_ready_src_rows_V_full_n_assign_proc : process(src_rows_V_full_n, ap_reg_ready_src_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src_rows_V_full_n)) then 
            ap_sig_ready_src_rows_V_full_n <= src_rows_V_full_n;
        else 
            ap_sig_ready_src_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_ycbcr_cols_V_full_n assign process. --
    ap_sig_ready_ycbcr_cols_V_full_n_assign_proc : process(ycbcr_cols_V_full_n, ap_reg_ready_ycbcr_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_ycbcr_cols_V_full_n)) then 
            ap_sig_ready_ycbcr_cols_V_full_n <= ycbcr_cols_V_full_n;
        else 
            ap_sig_ready_ycbcr_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_ycbcr_rows_V_full_n assign process. --
    ap_sig_ready_ycbcr_rows_V_full_n_assign_proc : process(ycbcr_rows_V_full_n, ap_reg_ready_ycbcr_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_ycbcr_rows_V_full_n)) then 
            ap_sig_ready_ycbcr_rows_V_full_n <= ycbcr_rows_V_full_n;
        else 
            ap_sig_ready_ycbcr_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start assign process. --
    ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) then 
            ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_1_1_U0_ap_start assign process. --
    ap_sig_start_in_init_1_1_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_1_1_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_init_1_1_U0_ap_ready))) then 
            ap_sig_start_in_init_1_1_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_1_1_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_1_2_U0_ap_start assign process. --
    ap_sig_start_in_init_1_2_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_1_2_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_init_1_2_U0_ap_ready))) then 
            ap_sig_start_in_init_1_2_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_1_2_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_1_U0_ap_start assign process. --
    ap_sig_start_in_init_1_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_1_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_init_1_U0_ap_ready))) then 
            ap_sig_start_in_init_1_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_1_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_2_U0_ap_start assign process. --
    ap_sig_start_in_init_2_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_2_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_init_2_U0_ap_ready))) then 
            ap_sig_start_in_init_2_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_2_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_3_U0_ap_start assign process. --
    ap_sig_start_in_init_3_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_3_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_init_3_U0_ap_ready))) then 
            ap_sig_start_in_init_3_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_3_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_U0_ap_start assign process. --
    ap_sig_start_in_init_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_init_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_init_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_init_U0_ap_ready, ap_sig_ready_init_1_U0_ap_ready, ap_sig_ready_init_1_1_U0_ap_ready, ap_sig_ready_init_2_U0_ap_ready, ap_sig_ready_init_3_U0_ap_ready, ap_sig_ready_init_1_2_U0_ap_ready, ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_init_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_init_1_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_init_1_1_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_init_2_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_init_3_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_init_1_2_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    finger_counter_U0_ap_continue <= ap_const_logic_1;
    finger_counter_U0_ap_start <= (medianImage2_rows_V_empty_n and medianImage2_cols_V_empty_n);
    finger_counter_U0_dst_data_stream_0_V_full_n <= result1_data_stream_0_V_full_n;
    finger_counter_U0_gesture_V_V_full_n <= gesture_V_V_full_n;
    finger_counter_U0_src_cols_V_read <= medianImage2_cols_V_dout;
    finger_counter_U0_src_data_stream_0_V_dout <= medianImage2_data_stream_0_V_dout;
    finger_counter_U0_src_data_stream_0_V_empty_n <= medianImage2_data_stream_0_V_empty_n;
    finger_counter_U0_src_rows_V_read <= medianImage2_rows_V_dout;
    gesture_V_V_ap_dummy_ce <= ap_const_logic_1;
    gesture_V_V_din <= finger_counter_U0_gesture_V_V_din;
    gesture_V_V_read <= set_color_U0_gesture_V_V_read;
    gesture_V_V_write <= finger_counter_U0_gesture_V_V_write;

    -- init_1_1_U0_ap_continue assign process. --
    init_1_1_U0_ap_continue_assign_proc : process(ap_sig_ready_medianImage_rows_V_full_n, ap_sig_ready_medianImage_cols_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_medianImage_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_medianImage_cols_V_full_n))) then 
            init_1_1_U0_ap_continue <= ap_const_logic_1;
        else 
            init_1_1_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_1_1_U0_ap_start <= ap_sig_start_in_init_1_1_U0_ap_start;
    init_1_1_U0_p_cols <= cols;
    init_1_1_U0_p_rows <= rows;

    -- init_1_2_U0_ap_continue assign process. --
    init_1_2_U0_ap_continue_assign_proc : process(ap_sig_ready_result_rows_V_full_n, ap_sig_ready_result_cols_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_result_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_result_cols_V_full_n))) then 
            init_1_2_U0_ap_continue <= ap_const_logic_1;
        else 
            init_1_2_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_1_2_U0_ap_start <= ap_sig_start_in_init_1_2_U0_ap_start;
    init_1_2_U0_p_cols <= cols;
    init_1_2_U0_p_rows <= rows;

    -- init_1_U0_ap_continue assign process. --
    init_1_U0_ap_continue_assign_proc : process(ap_sig_ready_ycbcr_rows_V_full_n, ap_sig_ready_ycbcr_cols_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_ycbcr_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_ycbcr_cols_V_full_n))) then 
            init_1_U0_ap_continue <= ap_const_logic_1;
        else 
            init_1_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_1_U0_ap_start <= ap_sig_start_in_init_1_U0_ap_start;
    init_1_U0_p_cols <= cols;
    init_1_U0_p_rows <= rows;

    -- init_2_U0_ap_continue assign process. --
    init_2_U0_ap_continue_assign_proc : process(ap_sig_ready_medianImage2_rows_V_full_n, ap_sig_ready_medianImage2_cols_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_medianImage2_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_medianImage2_cols_V_full_n))) then 
            init_2_U0_ap_continue <= ap_const_logic_1;
        else 
            init_2_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_2_U0_ap_start <= ap_sig_start_in_init_2_U0_ap_start;
    init_2_U0_p_cols <= cols;
    init_2_U0_p_rows <= rows;

    -- init_3_U0_ap_continue assign process. --
    init_3_U0_ap_continue_assign_proc : process(ap_sig_ready_result1_rows_V_full_n, ap_sig_ready_result1_cols_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_result1_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_result1_cols_V_full_n))) then 
            init_3_U0_ap_continue <= ap_const_logic_1;
        else 
            init_3_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_3_U0_ap_start <= ap_sig_start_in_init_3_U0_ap_start;
    init_3_U0_p_cols <= cols;
    init_3_U0_p_rows <= rows;

    -- init_U0_ap_continue assign process. --
    init_U0_ap_continue_assign_proc : process(ap_sig_ready_src_cols_V_full_n, ap_sig_ready_src_rows_V_full_n, ap_sig_ready_src_rows_V_channel_full_n, ap_sig_ready_src_cols_V_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_src_cols_V_full_n) and (ap_const_logic_1 = ap_sig_ready_src_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_src_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_src_cols_V_channel_full_n))) then 
            init_U0_ap_continue <= ap_const_logic_1;
        else 
            init_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_U0_ap_start <= ap_sig_start_in_init_U0_ap_start;
    init_U0_p_cols <= cols;
    init_U0_p_rows <= rows;
    input_V_data_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read;
    input_V_dest_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read;
    input_V_id_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read;
    input_V_keep_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read;
    input_V_last_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read;
    input_V_strb_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read;
    input_V_user_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read;
    medianImage2_cols_V_ap_dummy_ce <= ap_const_logic_1;
    medianImage2_cols_V_din <= init_2_U0_ap_return_1;
    medianImage2_cols_V_read <= finger_counter_U0_ap_ready;
    medianImage2_cols_V_write <= ap_chn_write_init_2_U0_medianImage2_cols_V;
    medianImage2_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    medianImage2_data_stream_0_V_din <= median_filter_1_U0_dst_data_stream_0_V_din;
    medianImage2_data_stream_0_V_read <= finger_counter_U0_src_data_stream_0_V_read;
    medianImage2_data_stream_0_V_write <= median_filter_1_U0_dst_data_stream_0_V_write;
    medianImage2_rows_V_ap_dummy_ce <= ap_const_logic_1;
    medianImage2_rows_V_din <= init_2_U0_ap_return_0;
    medianImage2_rows_V_read <= finger_counter_U0_ap_ready;
    medianImage2_rows_V_write <= ap_chn_write_init_2_U0_medianImage2_rows_V;
    medianImage_cols_V_ap_dummy_ce <= ap_const_logic_1;
    medianImage_cols_V_din <= init_1_1_U0_ap_return_1;
    medianImage_cols_V_read <= median_filter_1_U0_ap_ready;
    medianImage_cols_V_write <= ap_chn_write_init_1_1_U0_medianImage_cols_V;
    medianImage_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    medianImage_data_stream_0_V_din <= median_filter_U0_dst_data_stream_0_V_din;
    medianImage_data_stream_0_V_read <= median_filter_1_U0_src_data_stream_0_V_read;
    medianImage_data_stream_0_V_write <= median_filter_U0_dst_data_stream_0_V_write;
    medianImage_rows_V_ap_dummy_ce <= ap_const_logic_1;
    medianImage_rows_V_din <= init_1_1_U0_ap_return_0;
    medianImage_rows_V_read <= median_filter_1_U0_ap_ready;
    medianImage_rows_V_write <= ap_chn_write_init_1_1_U0_medianImage_rows_V;
    median_filter_1_U0_ap_continue <= ap_const_logic_1;
    median_filter_1_U0_ap_start <= (medianImage_rows_V_empty_n and medianImage_cols_V_empty_n);
    median_filter_1_U0_dst_data_stream_0_V_full_n <= medianImage2_data_stream_0_V_full_n;
    median_filter_1_U0_p_read <= medianImage_rows_V_dout;
    median_filter_1_U0_p_read1 <= medianImage_cols_V_dout;
    median_filter_1_U0_src_data_stream_0_V_dout <= medianImage_data_stream_0_V_dout;
    median_filter_1_U0_src_data_stream_0_V_empty_n <= medianImage_data_stream_0_V_empty_n;
    median_filter_U0_ap_continue <= ap_const_logic_1;
    median_filter_U0_ap_start <= (ycbcr_rows_V_empty_n and ycbcr_cols_V_empty_n);
    median_filter_U0_dst_data_stream_0_V_full_n <= medianImage_data_stream_0_V_full_n;
    median_filter_U0_src_cols_V_read <= ycbcr_cols_V_dout;
    median_filter_U0_src_data_stream_0_V_dout <= ycbcr_data_stream_0_V_dout;
    median_filter_U0_src_data_stream_0_V_empty_n <= ycbcr_data_stream_0_V_empty_n;
    median_filter_U0_src_rows_V_read <= ycbcr_rows_V_dout;
    output_V_data_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din;
    output_V_data_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write;
    output_V_dest_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din;
    output_V_dest_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write;
    output_V_id_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din;
    output_V_id_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write;
    output_V_keep_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din;
    output_V_keep_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write;
    output_V_last_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din;
    output_V_last_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write;
    output_V_strb_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din;
    output_V_strb_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write;
    output_V_user_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din;
    output_V_user_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write;
    result1_cols_V_ap_dummy_ce <= ap_const_logic_1;
    result1_cols_V_din <= init_3_U0_ap_return_1;
    result1_cols_V_read <= set_color_U0_ap_ready;
    result1_cols_V_write <= ap_chn_write_init_3_U0_result1_cols_V;
    result1_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    result1_data_stream_0_V_din <= finger_counter_U0_dst_data_stream_0_V_din;
    result1_data_stream_0_V_read <= set_color_U0_src_data_stream_0_V_read;
    result1_data_stream_0_V_write <= finger_counter_U0_dst_data_stream_0_V_write;
    result1_rows_V_ap_dummy_ce <= ap_const_logic_1;
    result1_rows_V_din <= init_3_U0_ap_return_0;
    result1_rows_V_read <= set_color_U0_ap_ready;
    result1_rows_V_write <= ap_chn_write_init_3_U0_result1_rows_V;
    result_cols_V_ap_dummy_ce <= ap_const_logic_1;
    result_cols_V_din <= init_1_2_U0_ap_return_1;
    result_cols_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
    result_cols_V_write <= ap_chn_write_init_1_2_U0_result_cols_V;
    result_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    result_data_stream_0_V_din <= set_color_U0_dst_data_stream_0_V_din;
    result_data_stream_0_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read;
    result_data_stream_0_V_write <= set_color_U0_dst_data_stream_0_V_write;
    result_data_stream_1_V_ap_dummy_ce <= ap_const_logic_1;
    result_data_stream_1_V_din <= set_color_U0_dst_data_stream_1_V_din;
    result_data_stream_1_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read;
    result_data_stream_1_V_write <= set_color_U0_dst_data_stream_1_V_write;
    result_data_stream_2_V_ap_dummy_ce <= ap_const_logic_1;
    result_data_stream_2_V_din <= set_color_U0_dst_data_stream_2_V_din;
    result_data_stream_2_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read;
    result_data_stream_2_V_write <= set_color_U0_dst_data_stream_2_V_write;
    result_rows_V_ap_dummy_ce <= ap_const_logic_1;
    result_rows_V_din <= init_1_2_U0_ap_return_0;
    result_rows_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
    result_rows_V_write <= ap_chn_write_init_1_2_U0_result_rows_V;
    set_color_U0_ap_continue <= ap_const_logic_1;
    set_color_U0_ap_start <= (result1_rows_V_empty_n and result1_cols_V_empty_n);
    set_color_U0_dst_data_stream_0_V_full_n <= result_data_stream_0_V_full_n;
    set_color_U0_dst_data_stream_1_V_full_n <= result_data_stream_1_V_full_n;
    set_color_U0_dst_data_stream_2_V_full_n <= result_data_stream_2_V_full_n;
    set_color_U0_gesture_V_V_dout <= gesture_V_V_dout;
    set_color_U0_gesture_V_V_empty_n <= gesture_V_V_empty_n;
    set_color_U0_src_cols_V_read <= result1_cols_V_dout;
    set_color_U0_src_data_stream_0_V_dout <= result1_data_stream_0_V_dout;
    set_color_U0_src_data_stream_0_V_empty_n <= result1_data_stream_0_V_empty_n;
    set_color_U0_src_rows_V_read <= result1_rows_V_dout;
    src_cols_V_ap_dummy_ce <= ap_const_logic_1;
    src_cols_V_channel_ap_dummy_ce <= ap_const_logic_1;
    src_cols_V_channel_din <= init_U0_ap_return_3;
    src_cols_V_channel_read <= Rgb2ycbcr_U0_ap_ready;
    src_cols_V_channel_write <= ap_chn_write_init_U0_src_cols_V_channel;
    src_cols_V_din <= init_U0_ap_return_2;
    src_cols_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
    src_cols_V_write <= ap_chn_write_init_U0_src_cols_V;
    src_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    src_data_stream_0_V_din <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din;
    src_data_stream_0_V_read <= Rgb2ycbcr_U0_rgb_data_stream_0_V_read;
    src_data_stream_0_V_write <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write;
    src_data_stream_1_V_ap_dummy_ce <= ap_const_logic_1;
    src_data_stream_1_V_din <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din;
    src_data_stream_1_V_read <= Rgb2ycbcr_U0_rgb_data_stream_1_V_read;
    src_data_stream_1_V_write <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write;
    src_data_stream_2_V_ap_dummy_ce <= ap_const_logic_1;
    src_data_stream_2_V_din <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din;
    src_data_stream_2_V_read <= Rgb2ycbcr_U0_rgb_data_stream_2_V_read;
    src_data_stream_2_V_write <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write;
    src_rows_V_ap_dummy_ce <= ap_const_logic_1;
    src_rows_V_channel_ap_dummy_ce <= ap_const_logic_1;
    src_rows_V_channel_din <= init_U0_ap_return_1;
    src_rows_V_channel_read <= Rgb2ycbcr_U0_ap_ready;
    src_rows_V_channel_write <= ap_chn_write_init_U0_src_rows_V_channel;
    src_rows_V_din <= init_U0_ap_return_0;
    src_rows_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
    src_rows_V_write <= ap_chn_write_init_U0_src_rows_V;
    ycbcr_cols_V_ap_dummy_ce <= ap_const_logic_1;
    ycbcr_cols_V_din <= init_1_U0_ap_return_1;
    ycbcr_cols_V_read <= median_filter_U0_ap_ready;
    ycbcr_cols_V_write <= ap_chn_write_init_1_U0_ycbcr_cols_V;
    ycbcr_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    ycbcr_data_stream_0_V_din <= Rgb2ycbcr_U0_ycbcr_data_stream_0_V_din;
    ycbcr_data_stream_0_V_read <= median_filter_U0_src_data_stream_0_V_read;
    ycbcr_data_stream_0_V_write <= Rgb2ycbcr_U0_ycbcr_data_stream_0_V_write;
    ycbcr_rows_V_ap_dummy_ce <= ap_const_logic_1;
    ycbcr_rows_V_din <= init_1_U0_ap_return_0;
    ycbcr_rows_V_read <= median_filter_U0_ap_ready;
    ycbcr_rows_V_write <= ap_chn_write_init_1_U0_ycbcr_rows_V;
end behav;
