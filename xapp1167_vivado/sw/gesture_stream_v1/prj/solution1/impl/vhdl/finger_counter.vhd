-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity finger_counter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    gesture_V_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    gesture_V_V_full_n : IN STD_LOGIC;
    gesture_V_V_write : OUT STD_LOGIC );
end;


architecture behav of finger_counter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st7_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st8_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st9_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st10_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st11_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st12_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st13_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st14_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st15_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st16_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st17_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st18_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st19_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st20_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st21_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st22_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st23_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st24_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st25_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st26_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st27_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st28_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3FD3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001100110011001100110011001100110011001100110011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_14 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal prevGesture_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_V_5_reg_181 : STD_LOGIC_VECTOR (11 downto 0);
    signal rowcnt_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_bdd_74 : BOOLEAN;
    signal op2_assign_fu_234_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal op2_assign_reg_591 : STD_LOGIC_VECTOR (12 downto 0);
    signal op2_assign_3_fu_244_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal op2_assign_3_reg_596 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_V_fu_274_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_604 : STD_LOGIC_VECTOR (11 downto 0);
    signal not_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal flip2_reg_145_temp: signed (32-1 downto 0);
    signal tmp_20_cast_fu_296_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_cast_reg_624 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal tmp_6_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_113 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_tmp_6_reg_629_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_not_or_cond_reg_647_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_127 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_tmp_6_reg_629_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_137 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_cond_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prevcol_1_fu_321_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal prevcol_1_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_prevcol_1_reg_642_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal not_or_cond_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal rowcnt_2_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flip2_2_fu_457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flip4_2_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flip8_2_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal flip8_reg_169_temp: signed (32-1 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_697 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_134 : STD_LOGIC_VECTOR (11 downto 0);
    signal flip2_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal flip4_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal flip8_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_V_fu_551_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal prevcol_fu_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal prevcol_3_fu_407_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_3_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_in_val_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_210_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal flip4_reg_157_temp: signed (32-1 downto 0);
    signal retval_i_cast_fu_230_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal retval_i3_cast_fu_240_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_fu_265_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal not6_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_cast_fu_357_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_361_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal retval_s_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_2_fu_384_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prevcol_2_fu_400_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp10_v_cast_cast_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowcnt_1_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flip2_1_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flip4_1_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flip8_1_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_543_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_205_ce : STD_LOGIC;
    signal grp_fu_210_ce : STD_LOGIC;
    signal grp_fu_210_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_214_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_218_ce : STD_LOGIC;
    signal grp_fu_221_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component image_filter_dmul_64ns_64ns_64_9_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component image_filter_dcmp_64ns_64ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component image_filter_sitodp_64s_64_9 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    image_filter_dmul_64ns_64ns_64_9_max_dsp_U43 : component image_filter_dmul_64ns_64ns_64_9_max_dsp
    generic map (
        ID => 43,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p2);

    image_filter_dcmp_64ns_64ns_1_3_U44 : component image_filter_dcmp_64ns_64ns_1_3
    generic map (
        ID => 44,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_210_p0,
        din1 => grp_fu_210_p1,
        ce => grp_fu_210_ce,
        opcode => grp_fu_210_opcode,
        dout => grp_fu_210_p2);

    image_filter_dcmp_64ns_64ns_1_3_U45 : component image_filter_dcmp_64ns_64ns_1_3
    generic map (
        ID => 45,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => grp_fu_214_ce,
        opcode => grp_fu_214_opcode,
        dout => grp_fu_214_p2);

    image_filter_sitodp_64s_64_9_U46 : component image_filter_sitodp_64s_64_9
    generic map (
        ID => 46,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p1);

    image_filter_sitodp_64s_64_9_U47 : component image_filter_sitodp_64s_64_9
    generic map (
        ID => 47,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_ST_st28_fsm_24 = ap_CS_fsm)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = tmp_6_fu_300_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_lv1_0 = tmp_6_fu_300_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0))) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = tmp_6_fu_300_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- flip2_reg_145 assign process. --
    flip2_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                flip2_reg_145 <= ap_const_lv32_0;
            elsif ((ap_ST_st7_fsm_3 = ap_CS_fsm)) then 
                flip2_reg_145 <= flip2_2_fu_457_p3;
            end if; 
        end if;
    end process;

    -- flip4_reg_157 assign process. --
    flip4_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                flip4_reg_157 <= ap_const_lv32_0;
            elsif ((ap_ST_st7_fsm_3 = ap_CS_fsm)) then 
                flip4_reg_157 <= flip4_2_fu_477_p3;
            end if; 
        end if;
    end process;

    -- flip8_reg_169 assign process. --
    flip8_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                flip8_reg_169 <= ap_const_lv32_0;
            elsif ((ap_ST_st7_fsm_3 = ap_CS_fsm)) then 
                flip8_reg_169 <= flip8_2_fu_509_p3;
            end if; 
        end if;
    end process;

    -- pixel_in_val_fu_88 assign process. --
    pixel_in_val_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_reg_629)) and not((ap_const_lv1_0 = or_cond_reg_638)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                pixel_in_val_fu_88 <= src_data_stream_0_V_dout;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                pixel_in_val_fu_88 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- prev_fu_84 assign process. --
    prev_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                prev_fu_84 <= prev_3_fu_392_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                prev_fu_84 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- prevcol_fu_80 assign process. --
    prevcol_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                prevcol_fu_80 <= prevcol_3_fu_407_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                prevcol_fu_80 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- rowcnt_reg_192 assign process. --
    rowcnt_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0)))) then 
                rowcnt_reg_192 <= ap_const_lv32_0;
            elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it2)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                rowcnt_reg_192 <= rowcnt_2_fu_438_p3;
            end if; 
        end if;
    end process;

    -- t_V_5_reg_181 assign process. --
    t_V_5_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0)))) then 
                t_V_5_reg_181 <= ap_const_lv12_0;
            elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_lv1_0 = tmp_6_fu_300_p2)))) then 
                t_V_5_reg_181 <= j_V_fu_305_p2;
            end if; 
        end if;
    end process;

    -- t_V_reg_134 assign process. --
    t_V_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then 
                t_V_reg_134 <= ap_const_lv12_0;
            elsif ((ap_ST_st7_fsm_3 = ap_CS_fsm)) then 
                t_V_reg_134 <= i_V_reg_604;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                ap_reg_ppstg_not_or_cond_reg_647_pp0_it1 <= not_or_cond_reg_647;
                ap_reg_ppstg_prevcol_1_reg_642_pp0_it1 <= prevcol_1_reg_642;
                ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(0) <= tmp_20_cast_reg_624(0);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(1) <= tmp_20_cast_reg_624(1);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(2) <= tmp_20_cast_reg_624(2);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(3) <= tmp_20_cast_reg_624(3);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(4) <= tmp_20_cast_reg_624(4);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(5) <= tmp_20_cast_reg_624(5);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(6) <= tmp_20_cast_reg_624(6);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(7) <= tmp_20_cast_reg_624(7);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(8) <= tmp_20_cast_reg_624(8);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(9) <= tmp_20_cast_reg_624(9);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(10) <= tmp_20_cast_reg_624(10);
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(11) <= tmp_20_cast_reg_624(11);
                ap_reg_ppstg_tmp_6_reg_629_pp0_it1 <= tmp_6_reg_629;
                ap_reg_ppstg_tmp_6_reg_629_pp0_it2 <= ap_reg_ppstg_tmp_6_reg_629_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_V_reg_604 <= i_V_fu_274_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_lv1_0 = tmp_6_fu_300_p2)))) then
                not_or_cond_reg_647 <= not_or_cond_fu_331_p2;
                or_cond_reg_638 <= or_cond_fu_316_p2;
                prevcol_1_reg_642 <= prevcol_1_fu_321_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0)))) then
                not_reg_609 <= not_fu_280_p2;
                notrhs_reg_614 <= notrhs_fu_285_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_74))) then
                op2_assign_3_reg_596 <= op2_assign_3_fu_244_p2;
                op2_assign_reg_591 <= op2_assign_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st28_fsm_24 = ap_CS_fsm)) then
                prevGesture_V <= temp_V_fu_551_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st15_fsm_11 = ap_CS_fsm) or (ap_ST_st24_fsm_20 = ap_CS_fsm))) then
                reg_224 <= grp_fu_218_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                sel_tmp1_reg_656 <= sel_tmp1_fu_378_p2;
                tmp_14_reg_651 <= tmp_14_fu_351_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                tmp_20_cast_reg_624(0) <= tmp_20_cast_fu_296_p1(0);
    tmp_20_cast_reg_624(1) <= tmp_20_cast_fu_296_p1(1);
    tmp_20_cast_reg_624(2) <= tmp_20_cast_fu_296_p1(2);
    tmp_20_cast_reg_624(3) <= tmp_20_cast_fu_296_p1(3);
    tmp_20_cast_reg_624(4) <= tmp_20_cast_fu_296_p1(4);
    tmp_20_cast_reg_624(5) <= tmp_20_cast_fu_296_p1(5);
    tmp_20_cast_reg_624(6) <= tmp_20_cast_fu_296_p1(6);
    tmp_20_cast_reg_624(7) <= tmp_20_cast_fu_296_p1(7);
    tmp_20_cast_reg_624(8) <= tmp_20_cast_fu_296_p1(8);
    tmp_20_cast_reg_624(9) <= tmp_20_cast_fu_296_p1(9);
    tmp_20_cast_reg_624(10) <= tmp_20_cast_fu_296_p1(10);
    tmp_20_cast_reg_624(11) <= tmp_20_cast_fu_296_p1(11);
                tmp_6_reg_629 <= tmp_6_fu_300_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_23 = ap_CS_fsm)) then
                tmp_23_reg_707 <= grp_fu_214_p2;
                tmp_reg_702 <= grp_fu_210_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_20 = ap_CS_fsm)) then
                tmp_3_reg_691 <= grp_fu_205_p2;
                tmp_5_reg_697 <= grp_fu_221_p1;
            end if;
        end if;
    end process;
    tmp_20_cast_reg_624(12) <= '0';
    ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1(12) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_74 , tmp_s_fu_269_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_113 , ap_reg_ppiten_pp0_it1 , ap_sig_bdd_127 , ap_reg_ppiten_pp0_it2 , ap_sig_bdd_137 , ap_reg_ppiten_pp0_it3 , tmp_6_fu_300_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_74)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_s_fu_269_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_4;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = tmp_6_fu_300_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = tmp_6_fu_300_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st7_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st8_fsm_4 => 
                ap_NS_fsm <= ap_ST_st9_fsm_5;
            when ap_ST_st9_fsm_5 => 
                ap_NS_fsm <= ap_ST_st10_fsm_6;
            when ap_ST_st10_fsm_6 => 
                ap_NS_fsm <= ap_ST_st11_fsm_7;
            when ap_ST_st11_fsm_7 => 
                ap_NS_fsm <= ap_ST_st12_fsm_8;
            when ap_ST_st12_fsm_8 => 
                ap_NS_fsm <= ap_ST_st13_fsm_9;
            when ap_ST_st13_fsm_9 => 
                ap_NS_fsm <= ap_ST_st14_fsm_10;
            when ap_ST_st14_fsm_10 => 
                ap_NS_fsm <= ap_ST_st15_fsm_11;
            when ap_ST_st15_fsm_11 => 
                ap_NS_fsm <= ap_ST_st16_fsm_12;
            when ap_ST_st16_fsm_12 => 
                ap_NS_fsm <= ap_ST_st17_fsm_13;
            when ap_ST_st17_fsm_13 => 
                ap_NS_fsm <= ap_ST_st18_fsm_14;
            when ap_ST_st18_fsm_14 => 
                ap_NS_fsm <= ap_ST_st19_fsm_15;
            when ap_ST_st19_fsm_15 => 
                ap_NS_fsm <= ap_ST_st20_fsm_16;
            when ap_ST_st20_fsm_16 => 
                ap_NS_fsm <= ap_ST_st21_fsm_17;
            when ap_ST_st21_fsm_17 => 
                ap_NS_fsm <= ap_ST_st22_fsm_18;
            when ap_ST_st22_fsm_18 => 
                ap_NS_fsm <= ap_ST_st23_fsm_19;
            when ap_ST_st23_fsm_19 => 
                ap_NS_fsm <= ap_ST_st24_fsm_20;
            when ap_ST_st24_fsm_20 => 
                ap_NS_fsm <= ap_ST_st25_fsm_21;
            when ap_ST_st25_fsm_21 => 
                ap_NS_fsm <= ap_ST_st26_fsm_22;
            when ap_ST_st26_fsm_22 => 
                ap_NS_fsm <= ap_ST_st27_fsm_23;
            when ap_ST_st27_fsm_23 => 
                ap_NS_fsm <= ap_ST_st28_fsm_24;
            when ap_ST_st28_fsm_24 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_ST_st28_fsm_24 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st28_fsm_24 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(src_data_stream_0_V_empty_n, tmp_6_reg_629, or_cond_reg_638)
    begin
                ap_sig_bdd_113 <= ((src_data_stream_0_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_6_reg_629)) and not((ap_const_lv1_0 = or_cond_reg_638)));
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(dst_data_stream_0_V_full_n, ap_reg_ppstg_tmp_6_reg_629_pp0_it1, ap_reg_ppstg_not_or_cond_reg_647_pp0_it1)
    begin
                ap_sig_bdd_127 <= ((dst_data_stream_0_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it1)) and not((ap_const_lv1_0 = ap_reg_ppstg_not_or_cond_reg_647_pp0_it1)));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(gesture_V_V_full_n, ap_reg_ppstg_tmp_6_reg_629_pp0_it2)
    begin
                ap_sig_bdd_137 <= ((gesture_V_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it2)));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_74 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

    dst_data_stream_0_V_din <= pixel_in_val_fu_88;

    -- dst_data_stream_0_V_write assign process. --
    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_113, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_tmp_6_reg_629_pp0_it1, ap_reg_ppstg_not_or_cond_reg_647_pp0_it1, ap_sig_bdd_127, ap_reg_ppiten_pp0_it2, ap_sig_bdd_137, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it1)) and not((ap_const_lv1_0 = ap_reg_ppstg_not_or_cond_reg_647_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    flip2_1_fu_445_p2 <= std_logic_vector(unsigned(flip2_reg_145) + unsigned(ap_const_lv32_1));
    flip2_2_fu_457_p3 <= 
        flip2_1_fu_445_p2 when (tmp_10_fu_451_p2(0) = '1') else 
        flip2_reg_145;
    flip4_1_fu_465_p2 <= std_logic_vector(unsigned(flip4_reg_157) + unsigned(ap_const_lv32_1));
    flip4_2_fu_477_p3 <= 
        flip4_1_fu_465_p2 when (tmp_11_fu_471_p2(0) = '1') else 
        flip4_reg_157;
    flip8_1_fu_497_p2 <= std_logic_vector(unsigned(flip8_reg_169) + unsigned(ap_const_lv32_1));
    flip8_2_fu_509_p3 <= 
        flip8_1_fu_497_p2 when (or_cond5_fu_503_p2(0) = '1') else 
        flip8_reg_169;
    gesture_V_V_din <= prevGesture_V;

    -- gesture_V_V_write assign process. --
    gesture_V_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_113, ap_reg_ppiten_pp0_it1, ap_sig_bdd_127, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_tmp_6_reg_629_pp0_it2, ap_sig_bdd_137, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_reg_629_pp0_it2)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            gesture_V_V_write <= ap_const_logic_1;
        else 
            gesture_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_205_ce <= ap_const_logic_1;
    grp_fu_205_p0 <= reg_224;
    grp_fu_205_p1 <= ap_const_lv64_3FD3333333333333;
    grp_fu_210_ce <= ap_const_logic_1;
    grp_fu_210_opcode <= ap_const_lv5_3;
    grp_fu_210_p0 <= reg_224;
    grp_fu_210_p1 <= tmp_3_reg_691;
    grp_fu_214_ce <= ap_const_logic_1;
    grp_fu_214_opcode <= ap_const_lv5_3;
    grp_fu_214_p0 <= tmp_5_reg_697;
    grp_fu_214_p1 <= tmp_3_reg_691;

    -- grp_fu_218_ce assign process. --
    grp_fu_218_ce_assign_proc : process(ap_CS_fsm, tmp_s_fu_269_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_fu_269_p2 = ap_const_lv1_0))) or (ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) or (ap_ST_st7_fsm_3 = ap_CS_fsm) or (ap_ST_st27_fsm_23 = ap_CS_fsm) or (ap_ST_st28_fsm_24 = ap_CS_fsm) or (ap_ST_st25_fsm_21 = ap_CS_fsm) or (ap_ST_st26_fsm_22 = ap_CS_fsm))) then 
            grp_fu_218_ce <= ap_const_logic_0;
        else 
            grp_fu_218_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_218_p0 assign process. --
    grp_fu_218_p0_assign_proc : process(ap_CS_fsm, tmp_s_fu_269_p2, tmp_2_fu_291_p1, tmp_1_fu_517_p1)
    begin
        if ((ap_ST_st16_fsm_12 = ap_CS_fsm)) then 
            grp_fu_218_p0 <= tmp_1_fu_517_p1;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_s_fu_269_p2 = ap_const_lv1_0))) then 
            grp_fu_218_p0 <= tmp_2_fu_291_p1;
        else 
            grp_fu_218_p0 <= tmp_1_fu_517_p1;
        end if; 
    end process;

    grp_fu_221_ce <= ap_const_logic_1;
    
    flip4_reg_157_temp <= signed(flip4_reg_157);
    grp_fu_221_p0 <= std_logic_vector(resize(flip4_reg_157_temp,64));

    i_V_fu_274_p2 <= std_logic_vector(unsigned(t_V_reg_134) + unsigned(ap_const_lv12_1));
    j_V_fu_305_p2 <= std_logic_vector(unsigned(t_V_5_reg_181) + unsigned(ap_const_lv12_1));
    not6_fu_311_p2 <= "1" when (unsigned(t_V_5_reg_181) < unsigned(src_cols_V_read)) else "0";
    not_fu_280_p2 <= "1" when (unsigned(t_V_reg_134) < unsigned(src_rows_V_read)) else "0";
    not_or_cond_fu_331_p2 <= (notrhs_reg_614 and notlhs_fu_325_p2);
    notlhs_fu_325_p2 <= "0" when (t_V_5_reg_181 = ap_const_lv12_0) else "1";
    notrhs_fu_285_p2 <= "0" when (t_V_reg_134 = ap_const_lv12_0) else "1";
    op2_assign_3_fu_244_p2 <= std_logic_vector(unsigned(retval_i3_cast_fu_240_p1) + unsigned(ap_const_lv13_1));
    op2_assign_fu_234_p2 <= std_logic_vector(unsigned(retval_i_cast_fu_230_p1) + unsigned(ap_const_lv13_1));
    or_cond5_fu_503_p2 <= (tmp_12_fu_485_p2 or tmp_13_fu_491_p2);
    or_cond_fu_316_p2 <= (not_reg_609 and not6_fu_311_p2);
    prev_2_fu_384_p3 <= 
        pixel_in_val_fu_88 when (sel_tmp1_fu_378_p2(0) = '1') else 
        prev_fu_84;
    prev_3_fu_392_p3 <= 
        prev_fu_84 when (tmp_14_fu_351_p2(0) = '1') else 
        prev_2_fu_384_p3;
    prevcol_1_fu_321_p1 <= t_V_5_reg_181(8 - 1 downto 0);
    prevcol_2_fu_400_p3 <= 
        ap_reg_ppstg_prevcol_1_reg_642_pp0_it1 when (sel_tmp1_fu_378_p2(0) = '1') else 
        prevcol_fu_80;
    prevcol_3_fu_407_p3 <= 
        prevcol_fu_80 when (tmp_14_fu_351_p2(0) = '1') else 
        prevcol_2_fu_400_p3;
    retval_i3_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(src_cols_V_read),13));
    retval_i_cast_fu_230_p1 <= std_logic_vector(resize(unsigned(src_rows_V_read),13));
    retval_s_fu_366_p2 <= "1" when (unsigned(tmp_15_fu_361_p2) > unsigned(ap_const_lv13_14)) else "0";
    rowcnt_1_fu_432_p2 <= std_logic_vector(unsigned(rowcnt_reg_192) + unsigned(sel_tmp10_v_cast_cast_fu_425_p3));
    rowcnt_2_fu_438_p3 <= 
        rowcnt_reg_192 when (tmp_14_reg_651(0) = '1') else 
        rowcnt_1_fu_432_p2;
    sel_tmp10_v_cast_cast_fu_425_p3 <= 
        ap_const_lv32_1 when (sel_tmp1_reg_656(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    sel_tmp1_fu_378_p2 <= (retval_s_fu_366_p2 and sel_tmp_fu_372_p2);
    sel_tmp3_fu_537_p2 <= (tmp_22_fu_527_p2 and tmp_24_fu_532_p2);
    sel_tmp4_fu_543_p3 <= 
        ap_const_lv2_2 when (sel_tmp3_fu_537_p2(0) = '1') else 
        ap_const_lv2_1;
    sel_tmp_fu_372_p2 <= (tmp_14_fu_351_p2 xor ap_const_lv1_1);

    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, tmp_6_reg_629, or_cond_reg_638, ap_sig_bdd_113, ap_reg_ppiten_pp0_it1, ap_sig_bdd_127, ap_reg_ppiten_pp0_it2, ap_sig_bdd_137, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_reg_629)) and not((ap_const_lv1_0 = or_cond_reg_638)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_113 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_127 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_137 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_fu_551_p3 <= 
        sel_tmp4_fu_543_p3 when (tmp_22_fu_527_p2(0) = '1') else 
        ap_const_lv2_0;
    tmp_10_fu_451_p2 <= "1" when (rowcnt_reg_192 = ap_const_lv32_2) else "0";
    tmp_11_fu_471_p2 <= "1" when (rowcnt_reg_192 = ap_const_lv32_4) else "0";
    tmp_12_fu_485_p2 <= "1" when (rowcnt_reg_192 = ap_const_lv32_6) else "0";
    tmp_13_fu_491_p2 <= "1" when (rowcnt_reg_192 = ap_const_lv32_8) else "0";
    tmp_14_fu_351_p2 <= "1" when (pixel_in_val_fu_88 = prev_fu_84) else "0";
    tmp_15_fu_361_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_20_cast_reg_624_pp0_it1) - unsigned(tmp_29_cast_fu_357_p1));
    
    flip8_reg_169_temp <= signed(flip8_reg_169);
    tmp_1_fu_517_p1 <= std_logic_vector(resize(flip8_reg_169_temp,64));

    tmp_20_cast_fu_296_p1 <= std_logic_vector(resize(unsigned(t_V_5_reg_181),13));
    tmp_22_fu_527_p2 <= (tmp_reg_702 xor ap_const_lv1_1);
    tmp_24_fu_532_p2 <= (tmp_23_reg_707 xor ap_const_lv1_1);
    tmp_29_cast_fu_357_p1 <= std_logic_vector(resize(unsigned(prevcol_fu_80),13));
    
    flip2_reg_145_temp <= signed(flip2_reg_145);
    tmp_2_fu_291_p1 <= std_logic_vector(resize(flip2_reg_145_temp,64));

    tmp_6_fu_300_p2 <= "1" when (unsigned(tmp_20_cast_fu_296_p1) < unsigned(op2_assign_3_reg_596)) else "0";
    tmp_cast_fu_265_p1 <= std_logic_vector(resize(unsigned(t_V_reg_134),13));
    tmp_s_fu_269_p2 <= "1" when (unsigned(tmp_cast_fu_265_p1) < unsigned(op2_assign_reg_591)) else "0";
end behav;
