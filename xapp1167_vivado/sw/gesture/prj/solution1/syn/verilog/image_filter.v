// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="image_filter,hls_ip_2013_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.666670,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.710000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=16,HLS_SYN_DSP=3,HLS_SYN_FF=3808,HLS_SYN_LUT=5412}" *)

module image_filter (
        input_V_data_V_dout,
        input_V_data_V_empty_n,
        input_V_data_V_read,
        input_V_keep_V_dout,
        input_V_keep_V_empty_n,
        input_V_keep_V_read,
        input_V_strb_V_dout,
        input_V_strb_V_empty_n,
        input_V_strb_V_read,
        input_V_user_V_dout,
        input_V_user_V_empty_n,
        input_V_user_V_read,
        input_V_last_V_dout,
        input_V_last_V_empty_n,
        input_V_last_V_read,
        input_V_id_V_dout,
        input_V_id_V_empty_n,
        input_V_id_V_read,
        input_V_dest_V_dout,
        input_V_dest_V_empty_n,
        input_V_dest_V_read,
        output_V_data_V_din,
        output_V_data_V_full_n,
        output_V_data_V_write,
        output_V_keep_V_din,
        output_V_keep_V_full_n,
        output_V_keep_V_write,
        output_V_strb_V_din,
        output_V_strb_V_full_n,
        output_V_strb_V_write,
        output_V_user_V_din,
        output_V_user_V_full_n,
        output_V_user_V_write,
        output_V_last_V_din,
        output_V_last_V_full_n,
        output_V_last_V_write,
        output_V_id_V_din,
        output_V_id_V_full_n,
        output_V_id_V_write,
        output_V_dest_V_din,
        output_V_dest_V_full_n,
        output_V_dest_V_write,
        rows,
        cols,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

input  [31:0] input_V_data_V_dout;
input   input_V_data_V_empty_n;
output   input_V_data_V_read;
input  [3:0] input_V_keep_V_dout;
input   input_V_keep_V_empty_n;
output   input_V_keep_V_read;
input  [3:0] input_V_strb_V_dout;
input   input_V_strb_V_empty_n;
output   input_V_strb_V_read;
input  [0:0] input_V_user_V_dout;
input   input_V_user_V_empty_n;
output   input_V_user_V_read;
input  [0:0] input_V_last_V_dout;
input   input_V_last_V_empty_n;
output   input_V_last_V_read;
input  [0:0] input_V_id_V_dout;
input   input_V_id_V_empty_n;
output   input_V_id_V_read;
input  [0:0] input_V_dest_V_dout;
input   input_V_dest_V_empty_n;
output   input_V_dest_V_read;
output  [31:0] output_V_data_V_din;
input   output_V_data_V_full_n;
output   output_V_data_V_write;
output  [3:0] output_V_keep_V_din;
input   output_V_keep_V_full_n;
output   output_V_keep_V_write;
output  [3:0] output_V_strb_V_din;
input   output_V_strb_V_full_n;
output   output_V_strb_V_write;
output  [0:0] output_V_user_V_din;
input   output_V_user_V_full_n;
output   output_V_user_V_write;
output  [0:0] output_V_last_V_din;
input   output_V_last_V_full_n;
output   output_V_last_V_write;
output  [0:0] output_V_id_V_din;
input   output_V_id_V_full_n;
output   output_V_id_V_write;
output  [0:0] output_V_dest_V_din;
input   output_V_dest_V_full_n;
output   output_V_dest_V_write;
input  [31:0] rows;
input  [31:0] cols;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    init_U0_ap_start;
wire    init_U0_ap_done;
reg    init_U0_ap_continue;
wire    init_U0_ap_idle;
wire    init_U0_ap_ready;
wire   [31:0] init_U0_p_rows;
wire   [31:0] init_U0_p_cols;
wire   [11:0] init_U0_ap_return_0;
wire   [11:0] init_U0_ap_return_1;
wire   [11:0] init_U0_ap_return_2;
wire   [11:0] init_U0_ap_return_3;
reg    ap_chn_write_init_U0_src_cols_V_channel;
wire    src_cols_V_channel_full_n;
reg    ap_reg_ready_src_cols_V_channel_full_n = 1'b0;
reg    ap_sig_ready_src_cols_V_channel_full_n;
reg    ap_chn_write_init_U0_src_rows_V;
wire    src_rows_V_full_n;
reg    ap_reg_ready_src_rows_V_full_n = 1'b0;
reg    ap_sig_ready_src_rows_V_full_n;
reg    ap_chn_write_init_U0_src_rows_V_channel;
wire    src_rows_V_channel_full_n;
reg    ap_reg_ready_src_rows_V_channel_full_n = 1'b0;
reg    ap_sig_ready_src_rows_V_channel_full_n;
reg    ap_chn_write_init_U0_src_cols_V;
wire    src_cols_V_full_n;
reg    ap_reg_ready_src_cols_V_full_n = 1'b0;
reg    ap_sig_ready_src_cols_V_full_n;
wire    init_1_U0_ap_start;
wire    init_1_U0_ap_done;
reg    init_1_U0_ap_continue;
wire    init_1_U0_ap_idle;
wire    init_1_U0_ap_ready;
wire   [31:0] init_1_U0_p_rows;
wire   [31:0] init_1_U0_p_cols;
wire   [11:0] init_1_U0_ap_return_0;
wire   [11:0] init_1_U0_ap_return_1;
reg    ap_chn_write_init_1_U0_ycbcr_rows_V;
wire    ycbcr_rows_V_full_n;
reg    ap_reg_ready_ycbcr_rows_V_full_n = 1'b0;
reg    ap_sig_ready_ycbcr_rows_V_full_n;
reg    ap_chn_write_init_1_U0_ycbcr_cols_V;
wire    ycbcr_cols_V_full_n;
reg    ap_reg_ready_ycbcr_cols_V_full_n = 1'b0;
reg    ap_sig_ready_ycbcr_cols_V_full_n;
wire    init_1_1_U0_ap_start;
wire    init_1_1_U0_ap_done;
reg    init_1_1_U0_ap_continue;
wire    init_1_1_U0_ap_idle;
wire    init_1_1_U0_ap_ready;
wire   [31:0] init_1_1_U0_p_rows;
wire   [31:0] init_1_1_U0_p_cols;
wire   [11:0] init_1_1_U0_ap_return_0;
wire   [11:0] init_1_1_U0_ap_return_1;
reg    ap_chn_write_init_1_1_U0_medianImage_rows_V;
wire    medianImage_rows_V_full_n;
reg    ap_reg_ready_medianImage_rows_V_full_n = 1'b0;
reg    ap_sig_ready_medianImage_rows_V_full_n;
reg    ap_chn_write_init_1_1_U0_medianImage_cols_V;
wire    medianImage_cols_V_full_n;
reg    ap_reg_ready_medianImage_cols_V_full_n = 1'b0;
reg    ap_sig_ready_medianImage_cols_V_full_n;
wire    init_2_U0_ap_start;
wire    init_2_U0_ap_done;
reg    init_2_U0_ap_continue;
wire    init_2_U0_ap_idle;
wire    init_2_U0_ap_ready;
wire   [31:0] init_2_U0_p_rows;
wire   [31:0] init_2_U0_p_cols;
wire   [11:0] init_2_U0_ap_return_0;
wire   [11:0] init_2_U0_ap_return_1;
reg    ap_chn_write_init_2_U0_medianImage2_rows_V;
wire    medianImage2_rows_V_full_n;
reg    ap_reg_ready_medianImage2_rows_V_full_n = 1'b0;
reg    ap_sig_ready_medianImage2_rows_V_full_n;
reg    ap_chn_write_init_2_U0_medianImage2_cols_V;
wire    medianImage2_cols_V_full_n;
reg    ap_reg_ready_medianImage2_cols_V_full_n = 1'b0;
reg    ap_sig_ready_medianImage2_cols_V_full_n;
wire    init_3_U0_ap_start;
wire    init_3_U0_ap_done;
wire    init_3_U0_ap_continue;
wire    init_3_U0_ap_idle;
wire    init_3_U0_ap_ready;
wire    init_3_U1_1_ap_start;
wire    init_3_U1_1_ap_done;
wire    init_3_U1_1_ap_continue;
wire    init_3_U1_1_ap_idle;
wire    init_3_U1_1_ap_ready;
wire    init_1_2_U0_ap_start;
wire    init_1_2_U0_ap_done;
reg    init_1_2_U0_ap_continue;
wire    init_1_2_U0_ap_idle;
wire    init_1_2_U0_ap_ready;
wire   [31:0] init_1_2_U0_p_rows;
wire   [31:0] init_1_2_U0_p_cols;
wire   [11:0] init_1_2_U0_ap_return_0;
wire   [11:0] init_1_2_U0_ap_return_1;
reg    ap_chn_write_init_1_2_U0_result_rows_V;
wire    result_rows_V_full_n;
reg    ap_reg_ready_result_rows_V_full_n = 1'b0;
reg    ap_sig_ready_result_rows_V_full_n;
reg    ap_chn_write_init_1_2_U0_result_cols_V;
wire    result_cols_V_full_n;
reg    ap_reg_ready_result_cols_V_full_n = 1'b0;
reg    ap_sig_ready_result_cols_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_start;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_done;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_continue;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_idle;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
wire   [31:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read;
wire   [3:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read;
wire   [3:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read;
wire   [11:0] AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read;
wire   [11:0] AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read;
wire   [7:0] AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write;
wire   [7:0] AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write;
wire   [7:0] AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write;
wire    Rgb2ycbcr_U0_ap_start;
wire    Rgb2ycbcr_U0_ap_done;
wire    Rgb2ycbcr_U0_ap_continue;
wire    Rgb2ycbcr_U0_ap_idle;
wire    Rgb2ycbcr_U0_ap_ready;
wire   [11:0] Rgb2ycbcr_U0_rgb_rows_V_read;
wire   [11:0] Rgb2ycbcr_U0_rgb_cols_V_read;
wire   [7:0] Rgb2ycbcr_U0_rgb_data_stream_0_V_dout;
wire    Rgb2ycbcr_U0_rgb_data_stream_0_V_empty_n;
wire    Rgb2ycbcr_U0_rgb_data_stream_0_V_read;
wire   [7:0] Rgb2ycbcr_U0_rgb_data_stream_1_V_dout;
wire    Rgb2ycbcr_U0_rgb_data_stream_1_V_empty_n;
wire    Rgb2ycbcr_U0_rgb_data_stream_1_V_read;
wire   [7:0] Rgb2ycbcr_U0_rgb_data_stream_2_V_dout;
wire    Rgb2ycbcr_U0_rgb_data_stream_2_V_empty_n;
wire    Rgb2ycbcr_U0_rgb_data_stream_2_V_read;
wire   [7:0] Rgb2ycbcr_U0_ycbcr_data_stream_0_V_din;
wire    Rgb2ycbcr_U0_ycbcr_data_stream_0_V_full_n;
wire    Rgb2ycbcr_U0_ycbcr_data_stream_0_V_write;
wire    median_filter_U0_ap_start;
wire    median_filter_U0_ap_done;
wire    median_filter_U0_ap_continue;
wire    median_filter_U0_ap_idle;
wire    median_filter_U0_ap_ready;
wire   [11:0] median_filter_U0_src_rows_V_read;
wire   [11:0] median_filter_U0_src_cols_V_read;
wire   [7:0] median_filter_U0_src_data_stream_0_V_dout;
wire    median_filter_U0_src_data_stream_0_V_empty_n;
wire    median_filter_U0_src_data_stream_0_V_read;
wire   [7:0] median_filter_U0_dst_data_stream_0_V_din;
wire    median_filter_U0_dst_data_stream_0_V_full_n;
wire    median_filter_U0_dst_data_stream_0_V_write;
wire    median_filter_1_U0_ap_start;
wire    median_filter_1_U0_ap_done;
wire    median_filter_1_U0_ap_continue;
wire    median_filter_1_U0_ap_idle;
wire    median_filter_1_U0_ap_ready;
wire   [11:0] median_filter_1_U0_p_read;
wire   [11:0] median_filter_1_U0_p_read1;
wire   [7:0] median_filter_1_U0_src_data_stream_0_V_dout;
wire    median_filter_1_U0_src_data_stream_0_V_empty_n;
wire    median_filter_1_U0_src_data_stream_0_V_read;
wire   [7:0] median_filter_1_U0_dst_data_stream_0_V_din;
wire    median_filter_1_U0_dst_data_stream_0_V_full_n;
wire    median_filter_1_U0_dst_data_stream_0_V_write;
wire    finger_counter_U0_ap_start;
wire    finger_counter_U0_ap_done;
wire    finger_counter_U0_ap_continue;
wire    finger_counter_U0_ap_idle;
wire    finger_counter_U0_ap_ready;
wire   [11:0] finger_counter_U0_src_rows_V_read;
wire   [11:0] finger_counter_U0_src_cols_V_read;
wire   [7:0] finger_counter_U0_src_data_stream_0_V_dout;
wire    finger_counter_U0_src_data_stream_0_V_empty_n;
wire    finger_counter_U0_src_data_stream_0_V_read;
wire   [7:0] finger_counter_U0_dst_data_stream_0_V_din;
wire    finger_counter_U0_dst_data_stream_0_V_full_n;
wire    finger_counter_U0_dst_data_stream_0_V_write;
wire   [7:0] finger_counter_U0_dst_data_stream_1_V_din;
wire    finger_counter_U0_dst_data_stream_1_V_full_n;
wire    finger_counter_U0_dst_data_stream_1_V_write;
wire   [7:0] finger_counter_U0_dst_data_stream_2_V_din;
wire    finger_counter_U0_dst_data_stream_2_V_full_n;
wire    finger_counter_U0_dst_data_stream_2_V_write;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_start;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_done;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_continue;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_idle;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
wire   [11:0] Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read;
wire   [11:0] Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read;
wire   [7:0] Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read;
wire   [7:0] Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read;
wire   [7:0] Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read;
wire   [31:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write;
wire   [3:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write;
wire   [3:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write;
wire    ap_sig_hs_continue;
wire    src_rows_V_ap_dummy_ce;
wire   [11:0] src_rows_V_din;
wire    src_rows_V_write;
wire   [11:0] src_rows_V_dout;
wire    src_rows_V_empty_n;
wire    src_rows_V_read;
wire    src_rows_V_channel_ap_dummy_ce;
wire   [11:0] src_rows_V_channel_din;
wire    src_rows_V_channel_write;
wire   [11:0] src_rows_V_channel_dout;
wire    src_rows_V_channel_empty_n;
wire    src_rows_V_channel_read;
wire    src_cols_V_ap_dummy_ce;
wire   [11:0] src_cols_V_din;
wire    src_cols_V_write;
wire   [11:0] src_cols_V_dout;
wire    src_cols_V_empty_n;
wire    src_cols_V_read;
wire    src_cols_V_channel_ap_dummy_ce;
wire   [11:0] src_cols_V_channel_din;
wire    src_cols_V_channel_write;
wire   [11:0] src_cols_V_channel_dout;
wire    src_cols_V_channel_empty_n;
wire    src_cols_V_channel_read;
wire    ycbcr_rows_V_ap_dummy_ce;
wire   [11:0] ycbcr_rows_V_din;
wire    ycbcr_rows_V_write;
wire   [11:0] ycbcr_rows_V_dout;
wire    ycbcr_rows_V_empty_n;
wire    ycbcr_rows_V_read;
wire    ycbcr_cols_V_ap_dummy_ce;
wire   [11:0] ycbcr_cols_V_din;
wire    ycbcr_cols_V_write;
wire   [11:0] ycbcr_cols_V_dout;
wire    ycbcr_cols_V_empty_n;
wire    ycbcr_cols_V_read;
wire    medianImage_rows_V_ap_dummy_ce;
wire   [11:0] medianImage_rows_V_din;
wire    medianImage_rows_V_write;
wire   [11:0] medianImage_rows_V_dout;
wire    medianImage_rows_V_empty_n;
wire    medianImage_rows_V_read;
wire    medianImage_cols_V_ap_dummy_ce;
wire   [11:0] medianImage_cols_V_din;
wire    medianImage_cols_V_write;
wire   [11:0] medianImage_cols_V_dout;
wire    medianImage_cols_V_empty_n;
wire    medianImage_cols_V_read;
wire    medianImage2_rows_V_ap_dummy_ce;
wire   [11:0] medianImage2_rows_V_din;
wire    medianImage2_rows_V_write;
wire   [11:0] medianImage2_rows_V_dout;
wire    medianImage2_rows_V_empty_n;
wire    medianImage2_rows_V_read;
wire    medianImage2_cols_V_ap_dummy_ce;
wire   [11:0] medianImage2_cols_V_din;
wire    medianImage2_cols_V_write;
wire   [11:0] medianImage2_cols_V_dout;
wire    medianImage2_cols_V_empty_n;
wire    medianImage2_cols_V_read;
wire    result_rows_V_ap_dummy_ce;
wire   [11:0] result_rows_V_din;
wire    result_rows_V_write;
wire   [11:0] result_rows_V_dout;
wire    result_rows_V_empty_n;
wire    result_rows_V_read;
wire    result_cols_V_ap_dummy_ce;
wire   [11:0] result_cols_V_din;
wire    result_cols_V_write;
wire   [11:0] result_cols_V_dout;
wire    result_cols_V_empty_n;
wire    result_cols_V_read;
wire    src_data_stream_0_V_ap_dummy_ce;
wire   [7:0] src_data_stream_0_V_din;
wire    src_data_stream_0_V_full_n;
wire    src_data_stream_0_V_write;
wire   [7:0] src_data_stream_0_V_dout;
wire    src_data_stream_0_V_empty_n;
wire    src_data_stream_0_V_read;
wire    src_data_stream_1_V_ap_dummy_ce;
wire   [7:0] src_data_stream_1_V_din;
wire    src_data_stream_1_V_full_n;
wire    src_data_stream_1_V_write;
wire   [7:0] src_data_stream_1_V_dout;
wire    src_data_stream_1_V_empty_n;
wire    src_data_stream_1_V_read;
wire    src_data_stream_2_V_ap_dummy_ce;
wire   [7:0] src_data_stream_2_V_din;
wire    src_data_stream_2_V_full_n;
wire    src_data_stream_2_V_write;
wire   [7:0] src_data_stream_2_V_dout;
wire    src_data_stream_2_V_empty_n;
wire    src_data_stream_2_V_read;
wire    ycbcr_data_stream_0_V_ap_dummy_ce;
wire   [7:0] ycbcr_data_stream_0_V_din;
wire    ycbcr_data_stream_0_V_full_n;
wire    ycbcr_data_stream_0_V_write;
wire   [7:0] ycbcr_data_stream_0_V_dout;
wire    ycbcr_data_stream_0_V_empty_n;
wire    ycbcr_data_stream_0_V_read;
wire    medianImage_data_stream_0_V_ap_dummy_ce;
wire   [7:0] medianImage_data_stream_0_V_din;
wire    medianImage_data_stream_0_V_full_n;
wire    medianImage_data_stream_0_V_write;
wire   [7:0] medianImage_data_stream_0_V_dout;
wire    medianImage_data_stream_0_V_empty_n;
wire    medianImage_data_stream_0_V_read;
wire    medianImage2_data_stream_0_V_ap_dummy_ce;
wire   [7:0] medianImage2_data_stream_0_V_din;
wire    medianImage2_data_stream_0_V_full_n;
wire    medianImage2_data_stream_0_V_write;
wire   [7:0] medianImage2_data_stream_0_V_dout;
wire    medianImage2_data_stream_0_V_empty_n;
wire    medianImage2_data_stream_0_V_read;
wire    result_data_stream_0_V_ap_dummy_ce;
wire   [7:0] result_data_stream_0_V_din;
wire    result_data_stream_0_V_full_n;
wire    result_data_stream_0_V_write;
wire   [7:0] result_data_stream_0_V_dout;
wire    result_data_stream_0_V_empty_n;
wire    result_data_stream_0_V_read;
wire    result_data_stream_1_V_ap_dummy_ce;
wire   [7:0] result_data_stream_1_V_din;
wire    result_data_stream_1_V_full_n;
wire    result_data_stream_1_V_write;
wire   [7:0] result_data_stream_1_V_dout;
wire    result_data_stream_1_V_empty_n;
wire    result_data_stream_1_V_read;
wire    result_data_stream_2_V_ap_dummy_ce;
wire   [7:0] result_data_stream_2_V_din;
wire    result_data_stream_2_V_full_n;
wire    result_data_stream_2_V_write;
wire   [7:0] result_data_stream_2_V_dout;
wire    result_data_stream_2_V_empty_n;
wire    result_data_stream_2_V_read;
reg    ap_reg_procdone_init_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_init_1_U0 = 1'b0;
reg    ap_reg_procdone_init_1_1_U0 = 1'b0;
reg    ap_reg_procdone_init_2_U0 = 1'b0;
reg    ap_reg_procdone_init_3_U0 = 1'b0;
reg    ap_reg_procdone_init_3_U1_1 = 1'b0;
reg    ap_reg_procdone_init_1_2_U0 = 1'b0;
reg    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 = 1'b0;
reg    ap_reg_procdone_Rgb2ycbcr_U0 = 1'b0;
reg    ap_reg_procdone_median_filter_U0 = 1'b0;
reg    ap_reg_procdone_median_filter_1_U0 = 1'b0;
reg    ap_reg_procdone_finger_counter_U0 = 1'b0;
reg    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 = 1'b0;
wire    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_init_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_U0_ap_ready;
reg    ap_sig_start_in_init_U0_ap_start;
reg    ap_reg_ready_init_1_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_1_U0_ap_ready;
reg    ap_sig_start_in_init_1_U0_ap_start;
reg    ap_reg_ready_init_1_1_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_1_1_U0_ap_ready;
reg    ap_sig_start_in_init_1_1_U0_ap_start;
reg    ap_reg_ready_init_2_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_2_U0_ap_ready;
reg    ap_sig_start_in_init_2_U0_ap_start;
reg    ap_reg_ready_init_3_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_3_U0_ap_ready;
reg    ap_sig_start_in_init_3_U0_ap_start;
reg    ap_reg_ready_init_3_U1_1_ap_ready = 1'b0;
reg    ap_sig_ready_init_3_U1_1_ap_ready;
reg    ap_sig_start_in_init_3_U1_1_ap_start;
reg    ap_reg_ready_init_1_2_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_1_2_U0_ap_ready;
reg    ap_sig_start_in_init_1_2_U0_ap_start;
reg    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready = 1'b0;
reg    ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
reg    ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;


init init_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_U0_ap_start ),
    .ap_done( init_U0_ap_done ),
    .ap_continue( init_U0_ap_continue ),
    .ap_idle( init_U0_ap_idle ),
    .ap_ready( init_U0_ap_ready ),
    .p_rows( init_U0_p_rows ),
    .p_cols( init_U0_p_cols ),
    .ap_return_0( init_U0_ap_return_0 ),
    .ap_return_1( init_U0_ap_return_1 ),
    .ap_return_2( init_U0_ap_return_2 ),
    .ap_return_3( init_U0_ap_return_3 )
);

init_1 init_1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_1_U0_ap_start ),
    .ap_done( init_1_U0_ap_done ),
    .ap_continue( init_1_U0_ap_continue ),
    .ap_idle( init_1_U0_ap_idle ),
    .ap_ready( init_1_U0_ap_ready ),
    .p_rows( init_1_U0_p_rows ),
    .p_cols( init_1_U0_p_cols ),
    .ap_return_0( init_1_U0_ap_return_0 ),
    .ap_return_1( init_1_U0_ap_return_1 )
);

init_1_1 init_1_1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_1_1_U0_ap_start ),
    .ap_done( init_1_1_U0_ap_done ),
    .ap_continue( init_1_1_U0_ap_continue ),
    .ap_idle( init_1_1_U0_ap_idle ),
    .ap_ready( init_1_1_U0_ap_ready ),
    .p_rows( init_1_1_U0_p_rows ),
    .p_cols( init_1_1_U0_p_cols ),
    .ap_return_0( init_1_1_U0_ap_return_0 ),
    .ap_return_1( init_1_1_U0_ap_return_1 )
);

init_2 init_2_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_2_U0_ap_start ),
    .ap_done( init_2_U0_ap_done ),
    .ap_continue( init_2_U0_ap_continue ),
    .ap_idle( init_2_U0_ap_idle ),
    .ap_ready( init_2_U0_ap_ready ),
    .p_rows( init_2_U0_p_rows ),
    .p_cols( init_2_U0_p_cols ),
    .ap_return_0( init_2_U0_ap_return_0 ),
    .ap_return_1( init_2_U0_ap_return_1 )
);

init_3 init_3_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_3_U0_ap_start ),
    .ap_done( init_3_U0_ap_done ),
    .ap_continue( init_3_U0_ap_continue ),
    .ap_idle( init_3_U0_ap_idle ),
    .ap_ready( init_3_U0_ap_ready )
);

init_3 init_3_U1_1(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_3_U1_1_ap_start ),
    .ap_done( init_3_U1_1_ap_done ),
    .ap_continue( init_3_U1_1_ap_continue ),
    .ap_idle( init_3_U1_1_ap_idle ),
    .ap_ready( init_3_U1_1_ap_ready )
);

init_1_2 init_1_2_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_1_2_U0_ap_start ),
    .ap_done( init_1_2_U0_ap_done ),
    .ap_continue( init_1_2_U0_ap_continue ),
    .ap_idle( init_1_2_U0_ap_idle ),
    .ap_ready( init_1_2_U0_ap_ready ),
    .p_rows( init_1_2_U0_p_rows ),
    .p_cols( init_1_2_U0_p_cols ),
    .ap_return_0( init_1_2_U0_ap_return_0 ),
    .ap_return_1( init_1_2_U0_ap_return_1 )
);

AXIvideo2Mat_32_1080_1920_16_s AXIvideo2Mat_32_1080_1920_16_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( AXIvideo2Mat_32_1080_1920_16_U0_ap_start ),
    .ap_done( AXIvideo2Mat_32_1080_1920_16_U0_ap_done ),
    .ap_continue( AXIvideo2Mat_32_1080_1920_16_U0_ap_continue ),
    .ap_idle( AXIvideo2Mat_32_1080_1920_16_U0_ap_idle ),
    .ap_ready( AXIvideo2Mat_32_1080_1920_16_U0_ap_ready ),
    .AXI_video_strm_V_data_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout ),
    .AXI_video_strm_V_data_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n ),
    .AXI_video_strm_V_data_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read ),
    .AXI_video_strm_V_keep_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout ),
    .AXI_video_strm_V_keep_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n ),
    .AXI_video_strm_V_keep_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read ),
    .AXI_video_strm_V_strb_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout ),
    .AXI_video_strm_V_strb_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n ),
    .AXI_video_strm_V_strb_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read ),
    .AXI_video_strm_V_user_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout ),
    .AXI_video_strm_V_user_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n ),
    .AXI_video_strm_V_user_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read ),
    .AXI_video_strm_V_last_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout ),
    .AXI_video_strm_V_last_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n ),
    .AXI_video_strm_V_last_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read ),
    .AXI_video_strm_V_id_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout ),
    .AXI_video_strm_V_id_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n ),
    .AXI_video_strm_V_id_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read ),
    .AXI_video_strm_V_dest_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout ),
    .AXI_video_strm_V_dest_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n ),
    .AXI_video_strm_V_dest_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read ),
    .img_rows_V_read( AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read ),
    .img_cols_V_read( AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read ),
    .img_data_stream_0_V_din( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din ),
    .img_data_stream_0_V_full_n( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n ),
    .img_data_stream_0_V_write( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write ),
    .img_data_stream_1_V_din( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din ),
    .img_data_stream_1_V_full_n( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n ),
    .img_data_stream_1_V_write( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write ),
    .img_data_stream_2_V_din( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din ),
    .img_data_stream_2_V_full_n( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n ),
    .img_data_stream_2_V_write( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write )
);

Rgb2ycbcr Rgb2ycbcr_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Rgb2ycbcr_U0_ap_start ),
    .ap_done( Rgb2ycbcr_U0_ap_done ),
    .ap_continue( Rgb2ycbcr_U0_ap_continue ),
    .ap_idle( Rgb2ycbcr_U0_ap_idle ),
    .ap_ready( Rgb2ycbcr_U0_ap_ready ),
    .rgb_rows_V_read( Rgb2ycbcr_U0_rgb_rows_V_read ),
    .rgb_cols_V_read( Rgb2ycbcr_U0_rgb_cols_V_read ),
    .rgb_data_stream_0_V_dout( Rgb2ycbcr_U0_rgb_data_stream_0_V_dout ),
    .rgb_data_stream_0_V_empty_n( Rgb2ycbcr_U0_rgb_data_stream_0_V_empty_n ),
    .rgb_data_stream_0_V_read( Rgb2ycbcr_U0_rgb_data_stream_0_V_read ),
    .rgb_data_stream_1_V_dout( Rgb2ycbcr_U0_rgb_data_stream_1_V_dout ),
    .rgb_data_stream_1_V_empty_n( Rgb2ycbcr_U0_rgb_data_stream_1_V_empty_n ),
    .rgb_data_stream_1_V_read( Rgb2ycbcr_U0_rgb_data_stream_1_V_read ),
    .rgb_data_stream_2_V_dout( Rgb2ycbcr_U0_rgb_data_stream_2_V_dout ),
    .rgb_data_stream_2_V_empty_n( Rgb2ycbcr_U0_rgb_data_stream_2_V_empty_n ),
    .rgb_data_stream_2_V_read( Rgb2ycbcr_U0_rgb_data_stream_2_V_read ),
    .ycbcr_data_stream_0_V_din( Rgb2ycbcr_U0_ycbcr_data_stream_0_V_din ),
    .ycbcr_data_stream_0_V_full_n( Rgb2ycbcr_U0_ycbcr_data_stream_0_V_full_n ),
    .ycbcr_data_stream_0_V_write( Rgb2ycbcr_U0_ycbcr_data_stream_0_V_write )
);

median_filter median_filter_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( median_filter_U0_ap_start ),
    .ap_done( median_filter_U0_ap_done ),
    .ap_continue( median_filter_U0_ap_continue ),
    .ap_idle( median_filter_U0_ap_idle ),
    .ap_ready( median_filter_U0_ap_ready ),
    .src_rows_V_read( median_filter_U0_src_rows_V_read ),
    .src_cols_V_read( median_filter_U0_src_cols_V_read ),
    .src_data_stream_0_V_dout( median_filter_U0_src_data_stream_0_V_dout ),
    .src_data_stream_0_V_empty_n( median_filter_U0_src_data_stream_0_V_empty_n ),
    .src_data_stream_0_V_read( median_filter_U0_src_data_stream_0_V_read ),
    .dst_data_stream_0_V_din( median_filter_U0_dst_data_stream_0_V_din ),
    .dst_data_stream_0_V_full_n( median_filter_U0_dst_data_stream_0_V_full_n ),
    .dst_data_stream_0_V_write( median_filter_U0_dst_data_stream_0_V_write )
);

median_filter_1 median_filter_1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( median_filter_1_U0_ap_start ),
    .ap_done( median_filter_1_U0_ap_done ),
    .ap_continue( median_filter_1_U0_ap_continue ),
    .ap_idle( median_filter_1_U0_ap_idle ),
    .ap_ready( median_filter_1_U0_ap_ready ),
    .p_read( median_filter_1_U0_p_read ),
    .p_read1( median_filter_1_U0_p_read1 ),
    .src_data_stream_0_V_dout( median_filter_1_U0_src_data_stream_0_V_dout ),
    .src_data_stream_0_V_empty_n( median_filter_1_U0_src_data_stream_0_V_empty_n ),
    .src_data_stream_0_V_read( median_filter_1_U0_src_data_stream_0_V_read ),
    .dst_data_stream_0_V_din( median_filter_1_U0_dst_data_stream_0_V_din ),
    .dst_data_stream_0_V_full_n( median_filter_1_U0_dst_data_stream_0_V_full_n ),
    .dst_data_stream_0_V_write( median_filter_1_U0_dst_data_stream_0_V_write )
);

finger_counter finger_counter_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( finger_counter_U0_ap_start ),
    .ap_done( finger_counter_U0_ap_done ),
    .ap_continue( finger_counter_U0_ap_continue ),
    .ap_idle( finger_counter_U0_ap_idle ),
    .ap_ready( finger_counter_U0_ap_ready ),
    .src_rows_V_read( finger_counter_U0_src_rows_V_read ),
    .src_cols_V_read( finger_counter_U0_src_cols_V_read ),
    .src_data_stream_0_V_dout( finger_counter_U0_src_data_stream_0_V_dout ),
    .src_data_stream_0_V_empty_n( finger_counter_U0_src_data_stream_0_V_empty_n ),
    .src_data_stream_0_V_read( finger_counter_U0_src_data_stream_0_V_read ),
    .dst_data_stream_0_V_din( finger_counter_U0_dst_data_stream_0_V_din ),
    .dst_data_stream_0_V_full_n( finger_counter_U0_dst_data_stream_0_V_full_n ),
    .dst_data_stream_0_V_write( finger_counter_U0_dst_data_stream_0_V_write ),
    .dst_data_stream_1_V_din( finger_counter_U0_dst_data_stream_1_V_din ),
    .dst_data_stream_1_V_full_n( finger_counter_U0_dst_data_stream_1_V_full_n ),
    .dst_data_stream_1_V_write( finger_counter_U0_dst_data_stream_1_V_write ),
    .dst_data_stream_2_V_din( finger_counter_U0_dst_data_stream_2_V_din ),
    .dst_data_stream_2_V_full_n( finger_counter_U0_dst_data_stream_2_V_full_n ),
    .dst_data_stream_2_V_write( finger_counter_U0_dst_data_stream_2_V_write )
);

Mat2AXIvideo_32_1080_1920_16_s Mat2AXIvideo_32_1080_1920_16_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Mat2AXIvideo_32_1080_1920_16_U0_ap_start ),
    .ap_done( Mat2AXIvideo_32_1080_1920_16_U0_ap_done ),
    .ap_continue( Mat2AXIvideo_32_1080_1920_16_U0_ap_continue ),
    .ap_idle( Mat2AXIvideo_32_1080_1920_16_U0_ap_idle ),
    .ap_ready( Mat2AXIvideo_32_1080_1920_16_U0_ap_ready ),
    .img_rows_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read ),
    .img_cols_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read ),
    .img_data_stream_0_V_dout( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout ),
    .img_data_stream_0_V_empty_n( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n ),
    .img_data_stream_0_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read ),
    .img_data_stream_1_V_dout( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout ),
    .img_data_stream_1_V_empty_n( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n ),
    .img_data_stream_1_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read ),
    .img_data_stream_2_V_dout( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout ),
    .img_data_stream_2_V_empty_n( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n ),
    .img_data_stream_2_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read ),
    .AXI_video_strm_V_data_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din ),
    .AXI_video_strm_V_data_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n ),
    .AXI_video_strm_V_data_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write ),
    .AXI_video_strm_V_keep_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din ),
    .AXI_video_strm_V_keep_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n ),
    .AXI_video_strm_V_keep_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write ),
    .AXI_video_strm_V_strb_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din ),
    .AXI_video_strm_V_strb_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n ),
    .AXI_video_strm_V_strb_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write ),
    .AXI_video_strm_V_user_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din ),
    .AXI_video_strm_V_user_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n ),
    .AXI_video_strm_V_user_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write ),
    .AXI_video_strm_V_last_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din ),
    .AXI_video_strm_V_last_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n ),
    .AXI_video_strm_V_last_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write ),
    .AXI_video_strm_V_id_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din ),
    .AXI_video_strm_V_id_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n ),
    .AXI_video_strm_V_id_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write ),
    .AXI_video_strm_V_dest_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din ),
    .AXI_video_strm_V_dest_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n ),
    .AXI_video_strm_V_dest_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write )
);

FIFO_image_filter_src_rows_V src_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_rows_V_ap_dummy_ce ),
    .if_write_ce( src_rows_V_ap_dummy_ce ),
    .if_din( src_rows_V_din ),
    .if_full_n( src_rows_V_full_n ),
    .if_write( src_rows_V_write ),
    .if_dout( src_rows_V_dout ),
    .if_empty_n( src_rows_V_empty_n ),
    .if_read( src_rows_V_read )
);

FIFO_image_filter_src_rows_V_channel src_rows_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_rows_V_channel_ap_dummy_ce ),
    .if_write_ce( src_rows_V_channel_ap_dummy_ce ),
    .if_din( src_rows_V_channel_din ),
    .if_full_n( src_rows_V_channel_full_n ),
    .if_write( src_rows_V_channel_write ),
    .if_dout( src_rows_V_channel_dout ),
    .if_empty_n( src_rows_V_channel_empty_n ),
    .if_read( src_rows_V_channel_read )
);

FIFO_image_filter_src_cols_V src_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_cols_V_ap_dummy_ce ),
    .if_write_ce( src_cols_V_ap_dummy_ce ),
    .if_din( src_cols_V_din ),
    .if_full_n( src_cols_V_full_n ),
    .if_write( src_cols_V_write ),
    .if_dout( src_cols_V_dout ),
    .if_empty_n( src_cols_V_empty_n ),
    .if_read( src_cols_V_read )
);

FIFO_image_filter_src_cols_V_channel src_cols_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_cols_V_channel_ap_dummy_ce ),
    .if_write_ce( src_cols_V_channel_ap_dummy_ce ),
    .if_din( src_cols_V_channel_din ),
    .if_full_n( src_cols_V_channel_full_n ),
    .if_write( src_cols_V_channel_write ),
    .if_dout( src_cols_V_channel_dout ),
    .if_empty_n( src_cols_V_channel_empty_n ),
    .if_read( src_cols_V_channel_read )
);

FIFO_image_filter_ycbcr_rows_V ycbcr_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( ycbcr_rows_V_ap_dummy_ce ),
    .if_write_ce( ycbcr_rows_V_ap_dummy_ce ),
    .if_din( ycbcr_rows_V_din ),
    .if_full_n( ycbcr_rows_V_full_n ),
    .if_write( ycbcr_rows_V_write ),
    .if_dout( ycbcr_rows_V_dout ),
    .if_empty_n( ycbcr_rows_V_empty_n ),
    .if_read( ycbcr_rows_V_read )
);

FIFO_image_filter_ycbcr_cols_V ycbcr_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( ycbcr_cols_V_ap_dummy_ce ),
    .if_write_ce( ycbcr_cols_V_ap_dummy_ce ),
    .if_din( ycbcr_cols_V_din ),
    .if_full_n( ycbcr_cols_V_full_n ),
    .if_write( ycbcr_cols_V_write ),
    .if_dout( ycbcr_cols_V_dout ),
    .if_empty_n( ycbcr_cols_V_empty_n ),
    .if_read( ycbcr_cols_V_read )
);

FIFO_image_filter_medianImage_rows_V medianImage_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( medianImage_rows_V_ap_dummy_ce ),
    .if_write_ce( medianImage_rows_V_ap_dummy_ce ),
    .if_din( medianImage_rows_V_din ),
    .if_full_n( medianImage_rows_V_full_n ),
    .if_write( medianImage_rows_V_write ),
    .if_dout( medianImage_rows_V_dout ),
    .if_empty_n( medianImage_rows_V_empty_n ),
    .if_read( medianImage_rows_V_read )
);

FIFO_image_filter_medianImage_cols_V medianImage_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( medianImage_cols_V_ap_dummy_ce ),
    .if_write_ce( medianImage_cols_V_ap_dummy_ce ),
    .if_din( medianImage_cols_V_din ),
    .if_full_n( medianImage_cols_V_full_n ),
    .if_write( medianImage_cols_V_write ),
    .if_dout( medianImage_cols_V_dout ),
    .if_empty_n( medianImage_cols_V_empty_n ),
    .if_read( medianImage_cols_V_read )
);

FIFO_image_filter_medianImage2_rows_V medianImage2_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( medianImage2_rows_V_ap_dummy_ce ),
    .if_write_ce( medianImage2_rows_V_ap_dummy_ce ),
    .if_din( medianImage2_rows_V_din ),
    .if_full_n( medianImage2_rows_V_full_n ),
    .if_write( medianImage2_rows_V_write ),
    .if_dout( medianImage2_rows_V_dout ),
    .if_empty_n( medianImage2_rows_V_empty_n ),
    .if_read( medianImage2_rows_V_read )
);

FIFO_image_filter_medianImage2_cols_V medianImage2_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( medianImage2_cols_V_ap_dummy_ce ),
    .if_write_ce( medianImage2_cols_V_ap_dummy_ce ),
    .if_din( medianImage2_cols_V_din ),
    .if_full_n( medianImage2_cols_V_full_n ),
    .if_write( medianImage2_cols_V_write ),
    .if_dout( medianImage2_cols_V_dout ),
    .if_empty_n( medianImage2_cols_V_empty_n ),
    .if_read( medianImage2_cols_V_read )
);

FIFO_image_filter_result_rows_V result_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( result_rows_V_ap_dummy_ce ),
    .if_write_ce( result_rows_V_ap_dummy_ce ),
    .if_din( result_rows_V_din ),
    .if_full_n( result_rows_V_full_n ),
    .if_write( result_rows_V_write ),
    .if_dout( result_rows_V_dout ),
    .if_empty_n( result_rows_V_empty_n ),
    .if_read( result_rows_V_read )
);

FIFO_image_filter_result_cols_V result_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( result_cols_V_ap_dummy_ce ),
    .if_write_ce( result_cols_V_ap_dummy_ce ),
    .if_din( result_cols_V_din ),
    .if_full_n( result_cols_V_full_n ),
    .if_write( result_cols_V_write ),
    .if_dout( result_cols_V_dout ),
    .if_empty_n( result_cols_V_empty_n ),
    .if_read( result_cols_V_read )
);

FIFO_image_filter_src_data_stream_0_V src_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( src_data_stream_0_V_ap_dummy_ce ),
    .if_din( src_data_stream_0_V_din ),
    .if_full_n( src_data_stream_0_V_full_n ),
    .if_write( src_data_stream_0_V_write ),
    .if_dout( src_data_stream_0_V_dout ),
    .if_empty_n( src_data_stream_0_V_empty_n ),
    .if_read( src_data_stream_0_V_read )
);

FIFO_image_filter_src_data_stream_1_V src_data_stream_1_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_data_stream_1_V_ap_dummy_ce ),
    .if_write_ce( src_data_stream_1_V_ap_dummy_ce ),
    .if_din( src_data_stream_1_V_din ),
    .if_full_n( src_data_stream_1_V_full_n ),
    .if_write( src_data_stream_1_V_write ),
    .if_dout( src_data_stream_1_V_dout ),
    .if_empty_n( src_data_stream_1_V_empty_n ),
    .if_read( src_data_stream_1_V_read )
);

FIFO_image_filter_src_data_stream_2_V src_data_stream_2_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src_data_stream_2_V_ap_dummy_ce ),
    .if_write_ce( src_data_stream_2_V_ap_dummy_ce ),
    .if_din( src_data_stream_2_V_din ),
    .if_full_n( src_data_stream_2_V_full_n ),
    .if_write( src_data_stream_2_V_write ),
    .if_dout( src_data_stream_2_V_dout ),
    .if_empty_n( src_data_stream_2_V_empty_n ),
    .if_read( src_data_stream_2_V_read )
);

FIFO_image_filter_ycbcr_data_stream_0_V ycbcr_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( ycbcr_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( ycbcr_data_stream_0_V_ap_dummy_ce ),
    .if_din( ycbcr_data_stream_0_V_din ),
    .if_full_n( ycbcr_data_stream_0_V_full_n ),
    .if_write( ycbcr_data_stream_0_V_write ),
    .if_dout( ycbcr_data_stream_0_V_dout ),
    .if_empty_n( ycbcr_data_stream_0_V_empty_n ),
    .if_read( ycbcr_data_stream_0_V_read )
);

FIFO_image_filter_medianImage_data_stream_0_V medianImage_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( medianImage_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( medianImage_data_stream_0_V_ap_dummy_ce ),
    .if_din( medianImage_data_stream_0_V_din ),
    .if_full_n( medianImage_data_stream_0_V_full_n ),
    .if_write( medianImage_data_stream_0_V_write ),
    .if_dout( medianImage_data_stream_0_V_dout ),
    .if_empty_n( medianImage_data_stream_0_V_empty_n ),
    .if_read( medianImage_data_stream_0_V_read )
);

FIFO_image_filter_medianImage2_data_stream_0_V medianImage2_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( medianImage2_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( medianImage2_data_stream_0_V_ap_dummy_ce ),
    .if_din( medianImage2_data_stream_0_V_din ),
    .if_full_n( medianImage2_data_stream_0_V_full_n ),
    .if_write( medianImage2_data_stream_0_V_write ),
    .if_dout( medianImage2_data_stream_0_V_dout ),
    .if_empty_n( medianImage2_data_stream_0_V_empty_n ),
    .if_read( medianImage2_data_stream_0_V_read )
);

FIFO_image_filter_result_data_stream_0_V result_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( result_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( result_data_stream_0_V_ap_dummy_ce ),
    .if_din( result_data_stream_0_V_din ),
    .if_full_n( result_data_stream_0_V_full_n ),
    .if_write( result_data_stream_0_V_write ),
    .if_dout( result_data_stream_0_V_dout ),
    .if_empty_n( result_data_stream_0_V_empty_n ),
    .if_read( result_data_stream_0_V_read )
);

FIFO_image_filter_result_data_stream_1_V result_data_stream_1_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( result_data_stream_1_V_ap_dummy_ce ),
    .if_write_ce( result_data_stream_1_V_ap_dummy_ce ),
    .if_din( result_data_stream_1_V_din ),
    .if_full_n( result_data_stream_1_V_full_n ),
    .if_write( result_data_stream_1_V_write ),
    .if_dout( result_data_stream_1_V_dout ),
    .if_empty_n( result_data_stream_1_V_empty_n ),
    .if_read( result_data_stream_1_V_read )
);

FIFO_image_filter_result_data_stream_2_V result_data_stream_2_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( result_data_stream_2_V_ap_dummy_ce ),
    .if_write_ce( result_data_stream_2_V_ap_dummy_ce ),
    .if_din( result_data_stream_2_V_din ),
    .if_full_n( result_data_stream_2_V_full_n ),
    .if_write( result_data_stream_2_V_write ),
    .if_dout( result_data_stream_2_V_dout ),
    .if_empty_n( result_data_stream_2_V_empty_n ),
    .if_read( result_data_stream_2_V_read )
);



/// ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == AXIvideo2Mat_32_1080_1920_16_U0_ap_done)) begin
            ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Mat2AXIvideo_32_1080_1920_16_U0_ap_done)) begin
            ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Rgb2ycbcr_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Rgb2ycbcr_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Rgb2ycbcr_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Rgb2ycbcr_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Rgb2ycbcr_U0_ap_done)) begin
            ap_reg_procdone_Rgb2ycbcr_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_finger_counter_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_finger_counter_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_finger_counter_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_finger_counter_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == finger_counter_U0_ap_done)) begin
            ap_reg_procdone_finger_counter_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_1_1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_1_1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_1_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_1_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_1_U0_ap_done)) begin
            ap_reg_procdone_init_1_1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_1_2_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_1_2_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_1_2_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_1_2_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_2_U0_ap_done)) begin
            ap_reg_procdone_init_1_2_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_U0_ap_done)) begin
            ap_reg_procdone_init_1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_2_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_2_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_2_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_2_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_2_U0_ap_done)) begin
            ap_reg_procdone_init_2_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_3_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_3_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_3_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_3_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_3_U0_ap_done)) begin
            ap_reg_procdone_init_3_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_3_U1_1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_3_U1_1
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_3_U1_1 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_3_U1_1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_3_U1_1_ap_done)) begin
            ap_reg_procdone_init_3_U1_1 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_U0 <= ap_const_logic_0;
        end else if ((init_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_init_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_median_filter_1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_median_filter_1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_median_filter_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_median_filter_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == median_filter_1_U0_ap_done)) begin
            ap_reg_procdone_median_filter_1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_median_filter_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_median_filter_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_median_filter_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_median_filter_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == median_filter_U0_ap_done)) begin
            ap_reg_procdone_median_filter_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) begin
            ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_1_1_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_1_1_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_1_U0_ap_ready)) begin
            ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_1_2_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_1_2_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_1_2_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_1_2_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_2_U0_ap_ready)) begin
            ap_reg_ready_init_1_2_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_1_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_1_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_U0_ap_ready)) begin
            ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_2_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_2_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_2_U0_ap_ready)) begin
            ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_3_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_3_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_3_U0_ap_ready)) begin
            ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_3_U1_1_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_3_U1_1_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_3_U1_1_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_3_U1_1_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_3_U1_1_ap_ready)) begin
            ap_reg_ready_init_3_U1_1_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
        end else if ((init_U0_ap_ready == ap_const_logic_1)) begin
            ap_reg_ready_init_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_medianImage2_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_medianImage2_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_medianImage2_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == init_2_U0_ap_continue))) begin
            ap_reg_ready_medianImage2_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == medianImage2_cols_V_full_n))) begin
            ap_reg_ready_medianImage2_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_medianImage2_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_medianImage2_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_medianImage2_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == init_2_U0_ap_continue))) begin
            ap_reg_ready_medianImage2_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == medianImage2_rows_V_full_n))) begin
            ap_reg_ready_medianImage2_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_medianImage_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_medianImage_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_medianImage_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == init_1_1_U0_ap_continue))) begin
            ap_reg_ready_medianImage_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == medianImage_cols_V_full_n))) begin
            ap_reg_ready_medianImage_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_medianImage_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_medianImage_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_medianImage_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == init_1_1_U0_ap_continue))) begin
            ap_reg_ready_medianImage_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == medianImage_rows_V_full_n))) begin
            ap_reg_ready_medianImage_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_result_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_result_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_result_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_2_U0_ap_done) & (ap_const_logic_1 == init_1_2_U0_ap_continue))) begin
            ap_reg_ready_result_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_2_U0_ap_done) & (ap_const_logic_1 == result_cols_V_full_n))) begin
            ap_reg_ready_result_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_result_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_result_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_result_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_2_U0_ap_done) & (ap_const_logic_1 == init_1_2_U0_ap_continue))) begin
            ap_reg_ready_result_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_2_U0_ap_done) & (ap_const_logic_1 == result_rows_V_full_n))) begin
            ap_reg_ready_result_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src_cols_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src_cols_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src_cols_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_src_cols_V_channel_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == src_cols_V_channel_full_n))) begin
            ap_reg_ready_src_cols_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_src_cols_V_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == src_cols_V_full_n))) begin
            ap_reg_ready_src_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src_rows_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src_rows_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src_rows_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_src_rows_V_channel_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == src_rows_V_channel_full_n))) begin
            ap_reg_ready_src_rows_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_src_rows_V_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == src_rows_V_full_n))) begin
            ap_reg_ready_src_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_ycbcr_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_ycbcr_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_ycbcr_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == init_1_U0_ap_continue))) begin
            ap_reg_ready_ycbcr_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == ycbcr_cols_V_full_n))) begin
            ap_reg_ready_ycbcr_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_ycbcr_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_ycbcr_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_ycbcr_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == init_1_U0_ap_continue))) begin
            ap_reg_ready_ycbcr_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == ycbcr_rows_V_full_n))) begin
            ap_reg_ready_ycbcr_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_chn_write_init_1_1_U0_medianImage_cols_V assign process. ///
always @ (init_1_1_U0_ap_done or ap_reg_ready_medianImage_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_medianImage_cols_V_full_n)) begin
        ap_chn_write_init_1_1_U0_medianImage_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_1_U0_medianImage_cols_V = init_1_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_1_U0_medianImage_rows_V assign process. ///
always @ (init_1_1_U0_ap_done or ap_reg_ready_medianImage_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_medianImage_rows_V_full_n)) begin
        ap_chn_write_init_1_1_U0_medianImage_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_1_U0_medianImage_rows_V = init_1_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_2_U0_result_cols_V assign process. ///
always @ (init_1_2_U0_ap_done or ap_reg_ready_result_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_result_cols_V_full_n)) begin
        ap_chn_write_init_1_2_U0_result_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_2_U0_result_cols_V = init_1_2_U0_ap_done;
    end
end

/// ap_chn_write_init_1_2_U0_result_rows_V assign process. ///
always @ (init_1_2_U0_ap_done or ap_reg_ready_result_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_result_rows_V_full_n)) begin
        ap_chn_write_init_1_2_U0_result_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_2_U0_result_rows_V = init_1_2_U0_ap_done;
    end
end

/// ap_chn_write_init_1_U0_ycbcr_cols_V assign process. ///
always @ (init_1_U0_ap_done or ap_reg_ready_ycbcr_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_ycbcr_cols_V_full_n)) begin
        ap_chn_write_init_1_U0_ycbcr_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_U0_ycbcr_cols_V = init_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_U0_ycbcr_rows_V assign process. ///
always @ (init_1_U0_ap_done or ap_reg_ready_ycbcr_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_ycbcr_rows_V_full_n)) begin
        ap_chn_write_init_1_U0_ycbcr_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_U0_ycbcr_rows_V = init_1_U0_ap_done;
    end
end

/// ap_chn_write_init_2_U0_medianImage2_cols_V assign process. ///
always @ (init_2_U0_ap_done or ap_reg_ready_medianImage2_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_medianImage2_cols_V_full_n)) begin
        ap_chn_write_init_2_U0_medianImage2_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_U0_medianImage2_cols_V = init_2_U0_ap_done;
    end
end

/// ap_chn_write_init_2_U0_medianImage2_rows_V assign process. ///
always @ (init_2_U0_ap_done or ap_reg_ready_medianImage2_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_medianImage2_rows_V_full_n)) begin
        ap_chn_write_init_2_U0_medianImage2_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_U0_medianImage2_rows_V = init_2_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_src_cols_V assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_src_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src_cols_V_full_n)) begin
        ap_chn_write_init_U0_src_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_src_cols_V = init_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_src_cols_V_channel assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_src_cols_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src_cols_V_channel_full_n)) begin
        ap_chn_write_init_U0_src_cols_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_src_cols_V_channel = init_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_src_rows_V assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_src_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src_rows_V_full_n)) begin
        ap_chn_write_init_U0_src_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_src_rows_V = init_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_src_rows_V_channel assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_src_rows_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src_rows_V_channel_full_n)) begin
        ap_chn_write_init_U0_src_rows_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_src_rows_V_channel = init_U0_ap_done;
    end
end

/// ap_idle assign process. ///
always @ (init_U0_ap_idle or init_1_U0_ap_idle or init_1_1_U0_ap_idle or init_2_U0_ap_idle or init_3_U0_ap_idle or init_3_U1_1_ap_idle or init_1_2_U0_ap_idle or AXIvideo2Mat_32_1080_1920_16_U0_ap_idle or Rgb2ycbcr_U0_ap_idle or median_filter_U0_ap_idle or median_filter_1_U0_ap_idle or finger_counter_U0_ap_idle or Mat2AXIvideo_32_1080_1920_16_U0_ap_idle or src_rows_V_empty_n or src_rows_V_channel_empty_n or src_cols_V_empty_n or src_cols_V_channel_empty_n or ycbcr_rows_V_empty_n or ycbcr_cols_V_empty_n or medianImage_rows_V_empty_n or medianImage_cols_V_empty_n or medianImage2_rows_V_empty_n or medianImage2_cols_V_empty_n or result_rows_V_empty_n or result_cols_V_empty_n)
begin
    if (((init_U0_ap_idle == ap_const_logic_1) & (ap_const_logic_1 == init_1_U0_ap_idle) & (ap_const_logic_1 == init_1_1_U0_ap_idle) & (ap_const_logic_1 == init_2_U0_ap_idle) & (ap_const_logic_1 == init_3_U0_ap_idle) & (ap_const_logic_1 == init_3_U1_1_ap_idle) & (ap_const_logic_1 == init_1_2_U0_ap_idle) & (ap_const_logic_1 == AXIvideo2Mat_32_1080_1920_16_U0_ap_idle) & (ap_const_logic_1 == Rgb2ycbcr_U0_ap_idle) & (ap_const_logic_1 == median_filter_U0_ap_idle) & (ap_const_logic_1 == median_filter_1_U0_ap_idle) & (ap_const_logic_1 == finger_counter_U0_ap_idle) & (ap_const_logic_1 == Mat2AXIvideo_32_1080_1920_16_U0_ap_idle) & (ap_const_logic_0 == src_rows_V_empty_n) & (ap_const_logic_0 == src_rows_V_channel_empty_n) & (ap_const_logic_0 == src_cols_V_empty_n) & (ap_const_logic_0 == src_cols_V_channel_empty_n) & (ap_const_logic_0 == ycbcr_rows_V_empty_n) & (ap_const_logic_0 == ycbcr_cols_V_empty_n) & (ap_const_logic_0 == medianImage_rows_V_empty_n) & (ap_const_logic_0 == medianImage_cols_V_empty_n) & (ap_const_logic_0 == medianImage2_rows_V_empty_n) & (ap_const_logic_0 == medianImage2_cols_V_empty_n) & (ap_const_logic_0 == result_rows_V_empty_n) & (ap_const_logic_0 == result_cols_V_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (Mat2AXIvideo_32_1080_1920_16_U0_ap_done or ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0)
begin
    if (((ap_const_logic_1 == Mat2AXIvideo_32_1080_1920_16_U0_ap_done) | (ap_const_logic_1 == ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0))) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

/// ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. ///
always @ (AXIvideo2Mat_32_1080_1920_16_U0_ap_ready or ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) begin
        ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
    end else begin
        ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_1_1_U0_ap_ready assign process. ///
always @ (init_1_1_U0_ap_ready or ap_reg_ready_init_1_1_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_1_1_U0_ap_ready)) begin
        ap_sig_ready_init_1_1_U0_ap_ready = init_1_1_U0_ap_ready;
    end else begin
        ap_sig_ready_init_1_1_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_1_2_U0_ap_ready assign process. ///
always @ (init_1_2_U0_ap_ready or ap_reg_ready_init_1_2_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_1_2_U0_ap_ready)) begin
        ap_sig_ready_init_1_2_U0_ap_ready = init_1_2_U0_ap_ready;
    end else begin
        ap_sig_ready_init_1_2_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_1_U0_ap_ready assign process. ///
always @ (init_1_U0_ap_ready or ap_reg_ready_init_1_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_1_U0_ap_ready)) begin
        ap_sig_ready_init_1_U0_ap_ready = init_1_U0_ap_ready;
    end else begin
        ap_sig_ready_init_1_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_2_U0_ap_ready assign process. ///
always @ (init_2_U0_ap_ready or ap_reg_ready_init_2_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_2_U0_ap_ready)) begin
        ap_sig_ready_init_2_U0_ap_ready = init_2_U0_ap_ready;
    end else begin
        ap_sig_ready_init_2_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_3_U0_ap_ready assign process. ///
always @ (init_3_U0_ap_ready or ap_reg_ready_init_3_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_3_U0_ap_ready)) begin
        ap_sig_ready_init_3_U0_ap_ready = init_3_U0_ap_ready;
    end else begin
        ap_sig_ready_init_3_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_3_U1_1_ap_ready assign process. ///
always @ (init_3_U1_1_ap_ready or ap_reg_ready_init_3_U1_1_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_3_U1_1_ap_ready)) begin
        ap_sig_ready_init_3_U1_1_ap_ready = init_3_U1_1_ap_ready;
    end else begin
        ap_sig_ready_init_3_U1_1_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_U0_ap_ready assign process. ///
always @ (init_U0_ap_ready or ap_reg_ready_init_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_U0_ap_ready)) begin
        ap_sig_ready_init_U0_ap_ready = init_U0_ap_ready;
    end else begin
        ap_sig_ready_init_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_medianImage2_cols_V_full_n assign process. ///
always @ (medianImage2_cols_V_full_n or ap_reg_ready_medianImage2_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_medianImage2_cols_V_full_n)) begin
        ap_sig_ready_medianImage2_cols_V_full_n = medianImage2_cols_V_full_n;
    end else begin
        ap_sig_ready_medianImage2_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_medianImage2_rows_V_full_n assign process. ///
always @ (medianImage2_rows_V_full_n or ap_reg_ready_medianImage2_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_medianImage2_rows_V_full_n)) begin
        ap_sig_ready_medianImage2_rows_V_full_n = medianImage2_rows_V_full_n;
    end else begin
        ap_sig_ready_medianImage2_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_medianImage_cols_V_full_n assign process. ///
always @ (medianImage_cols_V_full_n or ap_reg_ready_medianImage_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_medianImage_cols_V_full_n)) begin
        ap_sig_ready_medianImage_cols_V_full_n = medianImage_cols_V_full_n;
    end else begin
        ap_sig_ready_medianImage_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_medianImage_rows_V_full_n assign process. ///
always @ (medianImage_rows_V_full_n or ap_reg_ready_medianImage_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_medianImage_rows_V_full_n)) begin
        ap_sig_ready_medianImage_rows_V_full_n = medianImage_rows_V_full_n;
    end else begin
        ap_sig_ready_medianImage_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_result_cols_V_full_n assign process. ///
always @ (result_cols_V_full_n or ap_reg_ready_result_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_result_cols_V_full_n)) begin
        ap_sig_ready_result_cols_V_full_n = result_cols_V_full_n;
    end else begin
        ap_sig_ready_result_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_result_rows_V_full_n assign process. ///
always @ (result_rows_V_full_n or ap_reg_ready_result_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_result_rows_V_full_n)) begin
        ap_sig_ready_result_rows_V_full_n = result_rows_V_full_n;
    end else begin
        ap_sig_ready_result_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src_cols_V_channel_full_n assign process. ///
always @ (src_cols_V_channel_full_n or ap_reg_ready_src_cols_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src_cols_V_channel_full_n)) begin
        ap_sig_ready_src_cols_V_channel_full_n = src_cols_V_channel_full_n;
    end else begin
        ap_sig_ready_src_cols_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src_cols_V_full_n assign process. ///
always @ (src_cols_V_full_n or ap_reg_ready_src_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src_cols_V_full_n)) begin
        ap_sig_ready_src_cols_V_full_n = src_cols_V_full_n;
    end else begin
        ap_sig_ready_src_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src_rows_V_channel_full_n assign process. ///
always @ (src_rows_V_channel_full_n or ap_reg_ready_src_rows_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src_rows_V_channel_full_n)) begin
        ap_sig_ready_src_rows_V_channel_full_n = src_rows_V_channel_full_n;
    end else begin
        ap_sig_ready_src_rows_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src_rows_V_full_n assign process. ///
always @ (src_rows_V_full_n or ap_reg_ready_src_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src_rows_V_full_n)) begin
        ap_sig_ready_src_rows_V_full_n = src_rows_V_full_n;
    end else begin
        ap_sig_ready_src_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_ycbcr_cols_V_full_n assign process. ///
always @ (ycbcr_cols_V_full_n or ap_reg_ready_ycbcr_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_ycbcr_cols_V_full_n)) begin
        ap_sig_ready_ycbcr_cols_V_full_n = ycbcr_cols_V_full_n;
    end else begin
        ap_sig_ready_ycbcr_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_ycbcr_rows_V_full_n assign process. ///
always @ (ycbcr_rows_V_full_n or ap_reg_ready_ycbcr_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_ycbcr_rows_V_full_n)) begin
        ap_sig_ready_ycbcr_rows_V_full_n = ycbcr_rows_V_full_n;
    end else begin
        ap_sig_ready_ycbcr_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) begin
        ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_1_1_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_1_1_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_1_1_U0_ap_ready))) begin
        ap_sig_start_in_init_1_1_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_1_1_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_1_2_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_1_2_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_1_2_U0_ap_ready))) begin
        ap_sig_start_in_init_1_2_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_1_2_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_1_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_1_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_1_U0_ap_ready))) begin
        ap_sig_start_in_init_1_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_1_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_2_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_2_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_2_U0_ap_ready))) begin
        ap_sig_start_in_init_2_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_2_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_3_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_3_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_3_U0_ap_ready))) begin
        ap_sig_start_in_init_3_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_3_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_3_U1_1_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_3_U1_1_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_3_U1_1_ap_ready))) begin
        ap_sig_start_in_init_3_U1_1_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_3_U1_1_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_U0_ap_ready)
begin
    if (((ap_const_logic_0 == ap_reg_ready_init_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_init_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_top_allready assign process. ///
always @ (ap_sig_ready_init_U0_ap_ready or ap_sig_ready_init_1_U0_ap_ready or ap_sig_ready_init_1_1_U0_ap_ready or ap_sig_ready_init_2_U0_ap_ready or ap_sig_ready_init_3_U0_ap_ready or ap_sig_ready_init_3_U1_1_ap_ready or ap_sig_ready_init_1_2_U0_ap_ready or ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_sig_ready_init_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_1_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_1_1_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_2_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_3_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_3_U1_1_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_1_2_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end

/// init_1_1_U0_ap_continue assign process. ///
always @ (ap_sig_ready_medianImage_rows_V_full_n or ap_sig_ready_medianImage_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_medianImage_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_medianImage_cols_V_full_n))) begin
        init_1_1_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_1_1_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_1_2_U0_ap_continue assign process. ///
always @ (ap_sig_ready_result_rows_V_full_n or ap_sig_ready_result_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_result_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_result_cols_V_full_n))) begin
        init_1_2_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_1_2_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_1_U0_ap_continue assign process. ///
always @ (ap_sig_ready_ycbcr_rows_V_full_n or ap_sig_ready_ycbcr_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_ycbcr_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_ycbcr_cols_V_full_n))) begin
        init_1_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_1_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_2_U0_ap_continue assign process. ///
always @ (ap_sig_ready_medianImage2_rows_V_full_n or ap_sig_ready_medianImage2_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_medianImage2_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_medianImage2_cols_V_full_n))) begin
        init_2_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_2_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_U0_ap_continue assign process. ///
always @ (ap_sig_ready_src_cols_V_channel_full_n or ap_sig_ready_src_rows_V_full_n or ap_sig_ready_src_rows_V_channel_full_n or ap_sig_ready_src_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_src_cols_V_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_src_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_src_rows_V_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_src_cols_V_full_n))) begin
        init_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_U0_ap_continue = ap_const_logic_0;
    end
end
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout = input_V_data_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n = input_V_data_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout = input_V_dest_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n = input_V_dest_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout = input_V_id_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n = input_V_id_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout = input_V_keep_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n = input_V_keep_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout = input_V_last_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n = input_V_last_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout = input_V_strb_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n = input_V_strb_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout = input_V_user_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n = input_V_user_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_ap_continue = ap_const_logic_1;
assign AXIvideo2Mat_32_1080_1920_16_U0_ap_start = (src_rows_V_empty_n & src_cols_V_empty_n & ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start);
assign AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read = src_cols_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n = src_data_stream_0_V_full_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n = src_data_stream_1_V_full_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n = src_data_stream_2_V_full_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read = src_rows_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n = output_V_data_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n = output_V_dest_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n = output_V_id_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n = output_V_keep_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n = output_V_last_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n = output_V_strb_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n = output_V_user_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_ap_continue = ap_sig_hs_continue;
assign Mat2AXIvideo_32_1080_1920_16_U0_ap_start = (result_rows_V_empty_n & result_cols_V_empty_n);
assign Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read = result_cols_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout = result_data_stream_0_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n = result_data_stream_0_V_empty_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout = result_data_stream_1_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n = result_data_stream_1_V_empty_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout = result_data_stream_2_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n = result_data_stream_2_V_empty_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read = result_rows_V_dout;
assign Rgb2ycbcr_U0_ap_continue = ap_const_logic_1;
assign Rgb2ycbcr_U0_ap_start = (src_rows_V_channel_empty_n & src_cols_V_channel_empty_n);
assign Rgb2ycbcr_U0_rgb_cols_V_read = src_cols_V_channel_dout;
assign Rgb2ycbcr_U0_rgb_data_stream_0_V_dout = src_data_stream_0_V_dout;
assign Rgb2ycbcr_U0_rgb_data_stream_0_V_empty_n = src_data_stream_0_V_empty_n;
assign Rgb2ycbcr_U0_rgb_data_stream_1_V_dout = src_data_stream_1_V_dout;
assign Rgb2ycbcr_U0_rgb_data_stream_1_V_empty_n = src_data_stream_1_V_empty_n;
assign Rgb2ycbcr_U0_rgb_data_stream_2_V_dout = src_data_stream_2_V_dout;
assign Rgb2ycbcr_U0_rgb_data_stream_2_V_empty_n = src_data_stream_2_V_empty_n;
assign Rgb2ycbcr_U0_rgb_rows_V_read = src_rows_V_channel_dout;
assign Rgb2ycbcr_U0_ycbcr_data_stream_0_V_full_n = ycbcr_data_stream_0_V_full_n;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;
assign finger_counter_U0_ap_continue = ap_const_logic_1;
assign finger_counter_U0_ap_start = (medianImage2_rows_V_empty_n & medianImage2_cols_V_empty_n);
assign finger_counter_U0_dst_data_stream_0_V_full_n = result_data_stream_0_V_full_n;
assign finger_counter_U0_dst_data_stream_1_V_full_n = result_data_stream_1_V_full_n;
assign finger_counter_U0_dst_data_stream_2_V_full_n = result_data_stream_2_V_full_n;
assign finger_counter_U0_src_cols_V_read = medianImage2_cols_V_dout;
assign finger_counter_U0_src_data_stream_0_V_dout = medianImage2_data_stream_0_V_dout;
assign finger_counter_U0_src_data_stream_0_V_empty_n = medianImage2_data_stream_0_V_empty_n;
assign finger_counter_U0_src_rows_V_read = medianImage2_rows_V_dout;
assign init_1_1_U0_ap_start = ap_sig_start_in_init_1_1_U0_ap_start;
assign init_1_1_U0_p_cols = cols;
assign init_1_1_U0_p_rows = rows;
assign init_1_2_U0_ap_start = ap_sig_start_in_init_1_2_U0_ap_start;
assign init_1_2_U0_p_cols = cols;
assign init_1_2_U0_p_rows = rows;
assign init_1_U0_ap_start = ap_sig_start_in_init_1_U0_ap_start;
assign init_1_U0_p_cols = cols;
assign init_1_U0_p_rows = rows;
assign init_2_U0_ap_start = ap_sig_start_in_init_2_U0_ap_start;
assign init_2_U0_p_cols = cols;
assign init_2_U0_p_rows = rows;
assign init_3_U0_ap_continue = ap_const_logic_1;
assign init_3_U0_ap_start = ap_sig_start_in_init_3_U0_ap_start;
assign init_3_U1_1_ap_continue = ap_const_logic_1;
assign init_3_U1_1_ap_start = ap_sig_start_in_init_3_U1_1_ap_start;
assign init_U0_ap_start = ap_sig_start_in_init_U0_ap_start;
assign init_U0_p_cols = cols;
assign init_U0_p_rows = rows;
assign input_V_data_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read;
assign input_V_dest_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read;
assign input_V_id_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read;
assign input_V_keep_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read;
assign input_V_last_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read;
assign input_V_strb_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read;
assign input_V_user_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read;
assign medianImage2_cols_V_ap_dummy_ce = ap_const_logic_1;
assign medianImage2_cols_V_din = init_2_U0_ap_return_1;
assign medianImage2_cols_V_read = finger_counter_U0_ap_ready;
assign medianImage2_cols_V_write = ap_chn_write_init_2_U0_medianImage2_cols_V;
assign medianImage2_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign medianImage2_data_stream_0_V_din = median_filter_1_U0_dst_data_stream_0_V_din;
assign medianImage2_data_stream_0_V_read = finger_counter_U0_src_data_stream_0_V_read;
assign medianImage2_data_stream_0_V_write = median_filter_1_U0_dst_data_stream_0_V_write;
assign medianImage2_rows_V_ap_dummy_ce = ap_const_logic_1;
assign medianImage2_rows_V_din = init_2_U0_ap_return_0;
assign medianImage2_rows_V_read = finger_counter_U0_ap_ready;
assign medianImage2_rows_V_write = ap_chn_write_init_2_U0_medianImage2_rows_V;
assign medianImage_cols_V_ap_dummy_ce = ap_const_logic_1;
assign medianImage_cols_V_din = init_1_1_U0_ap_return_1;
assign medianImage_cols_V_read = median_filter_1_U0_ap_ready;
assign medianImage_cols_V_write = ap_chn_write_init_1_1_U0_medianImage_cols_V;
assign medianImage_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign medianImage_data_stream_0_V_din = median_filter_U0_dst_data_stream_0_V_din;
assign medianImage_data_stream_0_V_read = median_filter_1_U0_src_data_stream_0_V_read;
assign medianImage_data_stream_0_V_write = median_filter_U0_dst_data_stream_0_V_write;
assign medianImage_rows_V_ap_dummy_ce = ap_const_logic_1;
assign medianImage_rows_V_din = init_1_1_U0_ap_return_0;
assign medianImage_rows_V_read = median_filter_1_U0_ap_ready;
assign medianImage_rows_V_write = ap_chn_write_init_1_1_U0_medianImage_rows_V;
assign median_filter_1_U0_ap_continue = ap_const_logic_1;
assign median_filter_1_U0_ap_start = (medianImage_rows_V_empty_n & medianImage_cols_V_empty_n);
assign median_filter_1_U0_dst_data_stream_0_V_full_n = medianImage2_data_stream_0_V_full_n;
assign median_filter_1_U0_p_read = medianImage_rows_V_dout;
assign median_filter_1_U0_p_read1 = medianImage_cols_V_dout;
assign median_filter_1_U0_src_data_stream_0_V_dout = medianImage_data_stream_0_V_dout;
assign median_filter_1_U0_src_data_stream_0_V_empty_n = medianImage_data_stream_0_V_empty_n;
assign median_filter_U0_ap_continue = ap_const_logic_1;
assign median_filter_U0_ap_start = (ycbcr_rows_V_empty_n & ycbcr_cols_V_empty_n);
assign median_filter_U0_dst_data_stream_0_V_full_n = medianImage_data_stream_0_V_full_n;
assign median_filter_U0_src_cols_V_read = ycbcr_cols_V_dout;
assign median_filter_U0_src_data_stream_0_V_dout = ycbcr_data_stream_0_V_dout;
assign median_filter_U0_src_data_stream_0_V_empty_n = ycbcr_data_stream_0_V_empty_n;
assign median_filter_U0_src_rows_V_read = ycbcr_rows_V_dout;
assign output_V_data_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din;
assign output_V_data_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write;
assign output_V_dest_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din;
assign output_V_dest_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write;
assign output_V_id_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din;
assign output_V_id_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write;
assign output_V_keep_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din;
assign output_V_keep_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write;
assign output_V_last_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din;
assign output_V_last_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write;
assign output_V_strb_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din;
assign output_V_strb_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write;
assign output_V_user_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din;
assign output_V_user_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write;
assign result_cols_V_ap_dummy_ce = ap_const_logic_1;
assign result_cols_V_din = init_1_2_U0_ap_return_1;
assign result_cols_V_read = Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
assign result_cols_V_write = ap_chn_write_init_1_2_U0_result_cols_V;
assign result_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign result_data_stream_0_V_din = finger_counter_U0_dst_data_stream_0_V_din;
assign result_data_stream_0_V_read = Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read;
assign result_data_stream_0_V_write = finger_counter_U0_dst_data_stream_0_V_write;
assign result_data_stream_1_V_ap_dummy_ce = ap_const_logic_1;
assign result_data_stream_1_V_din = finger_counter_U0_dst_data_stream_1_V_din;
assign result_data_stream_1_V_read = Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read;
assign result_data_stream_1_V_write = finger_counter_U0_dst_data_stream_1_V_write;
assign result_data_stream_2_V_ap_dummy_ce = ap_const_logic_1;
assign result_data_stream_2_V_din = finger_counter_U0_dst_data_stream_2_V_din;
assign result_data_stream_2_V_read = Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read;
assign result_data_stream_2_V_write = finger_counter_U0_dst_data_stream_2_V_write;
assign result_rows_V_ap_dummy_ce = ap_const_logic_1;
assign result_rows_V_din = init_1_2_U0_ap_return_0;
assign result_rows_V_read = Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
assign result_rows_V_write = ap_chn_write_init_1_2_U0_result_rows_V;
assign src_cols_V_ap_dummy_ce = ap_const_logic_1;
assign src_cols_V_channel_ap_dummy_ce = ap_const_logic_1;
assign src_cols_V_channel_din = init_U0_ap_return_3;
assign src_cols_V_channel_read = Rgb2ycbcr_U0_ap_ready;
assign src_cols_V_channel_write = ap_chn_write_init_U0_src_cols_V_channel;
assign src_cols_V_din = init_U0_ap_return_2;
assign src_cols_V_read = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
assign src_cols_V_write = ap_chn_write_init_U0_src_cols_V;
assign src_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign src_data_stream_0_V_din = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din;
assign src_data_stream_0_V_read = Rgb2ycbcr_U0_rgb_data_stream_0_V_read;
assign src_data_stream_0_V_write = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write;
assign src_data_stream_1_V_ap_dummy_ce = ap_const_logic_1;
assign src_data_stream_1_V_din = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din;
assign src_data_stream_1_V_read = Rgb2ycbcr_U0_rgb_data_stream_1_V_read;
assign src_data_stream_1_V_write = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write;
assign src_data_stream_2_V_ap_dummy_ce = ap_const_logic_1;
assign src_data_stream_2_V_din = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din;
assign src_data_stream_2_V_read = Rgb2ycbcr_U0_rgb_data_stream_2_V_read;
assign src_data_stream_2_V_write = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write;
assign src_rows_V_ap_dummy_ce = ap_const_logic_1;
assign src_rows_V_channel_ap_dummy_ce = ap_const_logic_1;
assign src_rows_V_channel_din = init_U0_ap_return_1;
assign src_rows_V_channel_read = Rgb2ycbcr_U0_ap_ready;
assign src_rows_V_channel_write = ap_chn_write_init_U0_src_rows_V_channel;
assign src_rows_V_din = init_U0_ap_return_0;
assign src_rows_V_read = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
assign src_rows_V_write = ap_chn_write_init_U0_src_rows_V;
assign ycbcr_cols_V_ap_dummy_ce = ap_const_logic_1;
assign ycbcr_cols_V_din = init_1_U0_ap_return_1;
assign ycbcr_cols_V_read = median_filter_U0_ap_ready;
assign ycbcr_cols_V_write = ap_chn_write_init_1_U0_ycbcr_cols_V;
assign ycbcr_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign ycbcr_data_stream_0_V_din = Rgb2ycbcr_U0_ycbcr_data_stream_0_V_din;
assign ycbcr_data_stream_0_V_read = median_filter_U0_src_data_stream_0_V_read;
assign ycbcr_data_stream_0_V_write = Rgb2ycbcr_U0_ycbcr_data_stream_0_V_write;
assign ycbcr_rows_V_ap_dummy_ce = ap_const_logic_1;
assign ycbcr_rows_V_din = init_1_U0_ap_return_0;
assign ycbcr_rows_V_read = median_filter_U0_ap_ready;
assign ycbcr_rows_V_write = ap_chn_write_init_1_U0_ycbcr_rows_V;


endmodule //image_filter

