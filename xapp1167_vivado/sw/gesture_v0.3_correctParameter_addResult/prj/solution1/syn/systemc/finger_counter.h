// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _finger_counter_HH_
#define _finger_counter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct finger_counter : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > src_rows_V_read;
    sc_in< sc_lv<12> > src_cols_V_read;
    sc_in< sc_lv<8> > src_data_stream_0_V_dout;
    sc_in< sc_logic > src_data_stream_0_V_empty_n;
    sc_out< sc_logic > src_data_stream_0_V_read;
    sc_out< sc_lv<8> > dst_data_stream_0_V_din;
    sc_in< sc_logic > dst_data_stream_0_V_full_n;
    sc_out< sc_logic > dst_data_stream_0_V_write;
    sc_out< sc_lv<8> > dst_data_stream_1_V_din;
    sc_in< sc_logic > dst_data_stream_1_V_full_n;
    sc_out< sc_logic > dst_data_stream_1_V_write;
    sc_out< sc_lv<8> > dst_data_stream_2_V_din;
    sc_in< sc_logic > dst_data_stream_2_V_full_n;
    sc_out< sc_logic > dst_data_stream_2_V_write;


    // Module declarations
    finger_counter(sc_module_name name);
    SC_HAS_PROCESS(finger_counter);

    ~finger_counter();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<12> > t_V_reg_112;
    sc_signal< bool > ap_sig_bdd_47;
    sc_signal< sc_lv<13> > op2_assign_fu_128_p2;
    sc_signal< sc_lv<13> > op2_assign_reg_239;
    sc_signal< sc_lv<13> > op2_assign_3_fu_138_p2;
    sc_signal< sc_lv<13> > op2_assign_3_reg_244;
    sc_signal< sc_lv<12> > i_V_fu_158_p2;
    sc_signal< sc_lv<12> > i_V_reg_252;
    sc_signal< sc_lv<1> > not_fu_164_p2;
    sc_signal< sc_lv<1> > not_reg_257;
    sc_signal< sc_lv<1> > tmp_s_fu_153_p2;
    sc_signal< sc_lv<1> > notrhs_fu_169_p2;
    sc_signal< sc_lv<1> > notrhs_reg_262;
    sc_signal< sc_lv<1> > tmp_7_fu_179_p2;
    sc_signal< sc_lv<1> > tmp_7_reg_267;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_lv<1> > or_cond_reg_276;
    sc_signal< bool > ap_sig_bdd_82;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_7_reg_267_pp0_it1;
    sc_signal< sc_lv<1> > not_or_cond_reg_280;
    sc_signal< sc_lv<1> > ap_reg_ppstg_not_or_cond_reg_280_pp0_it1;
    sc_signal< bool > ap_sig_bdd_102;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<12> > j_V_fu_184_p2;
    sc_signal< sc_lv<1> > or_cond_fu_195_p2;
    sc_signal< sc_lv<1> > not_or_cond_fu_206_p2;
    sc_signal< sc_lv<12> > t_V_5_reg_101;
    sc_signal< sc_lv<8> > pixel_in_val_fu_58;
    sc_signal< sc_lv<13> > retval_i4_cast_fu_124_p1;
    sc_signal< sc_lv<13> > retval_i_cast_fu_134_p1;
    sc_signal< sc_lv<13> > tmp_cast_fu_149_p1;
    sc_signal< sc_lv<13> > tmp_9_cast_fu_175_p1;
    sc_signal< sc_lv<1> > not4_fu_190_p2;
    sc_signal< sc_lv<1> > notlhs_fu_200_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<12> ap_const_lv12_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_102();
    void thread_ap_sig_bdd_47();
    void thread_ap_sig_bdd_82();
    void thread_dst_data_stream_0_V_din();
    void thread_dst_data_stream_0_V_write();
    void thread_dst_data_stream_1_V_din();
    void thread_dst_data_stream_1_V_write();
    void thread_dst_data_stream_2_V_din();
    void thread_dst_data_stream_2_V_write();
    void thread_i_V_fu_158_p2();
    void thread_j_V_fu_184_p2();
    void thread_not4_fu_190_p2();
    void thread_not_fu_164_p2();
    void thread_not_or_cond_fu_206_p2();
    void thread_notlhs_fu_200_p2();
    void thread_notrhs_fu_169_p2();
    void thread_op2_assign_3_fu_138_p2();
    void thread_op2_assign_fu_128_p2();
    void thread_or_cond_fu_195_p2();
    void thread_retval_i4_cast_fu_124_p1();
    void thread_retval_i_cast_fu_134_p1();
    void thread_src_data_stream_0_V_read();
    void thread_tmp_7_fu_179_p2();
    void thread_tmp_9_cast_fu_175_p1();
    void thread_tmp_cast_fu_149_p1();
    void thread_tmp_s_fu_153_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
