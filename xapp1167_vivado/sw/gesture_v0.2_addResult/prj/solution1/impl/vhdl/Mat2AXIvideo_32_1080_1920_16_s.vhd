-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mat2AXIvideo_32_1080_1920_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_data_stream_0_V_read : OUT STD_LOGIC;
    img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_data_stream_1_V_read : OUT STD_LOGIC;
    img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_data_stream_2_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_data_V_write : OUT STD_LOGIC;
    AXI_video_strm_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_keep_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_keep_V_write : OUT STD_LOGIC;
    AXI_video_strm_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_strb_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_strb_V_write : OUT STD_LOGIC;
    AXI_video_strm_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_user_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_user_V_write : OUT STD_LOGIC;
    AXI_video_strm_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_last_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_last_V_write : OUT STD_LOGIC;
    AXI_video_strm_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_id_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_id_V_write : OUT STD_LOGIC;
    AXI_video_strm_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_dest_V_full_n : IN STD_LOGIC;
    AXI_video_strm_V_dest_V_write : OUT STD_LOGIC );
end;


architecture behav of Mat2AXIvideo_32_1080_1920_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_V_6_reg_174 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_72 : BOOLEAN;
    signal op2_assign_fu_190_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal op2_assign_reg_271 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_V_fu_206_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_279 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal AXI_video_strm_V_1_status : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal j_V_fu_217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_163 : STD_LOGIC_VECTOR (11 downto 0);
    signal AXI_video_strm_V_1_update : STD_LOGIC;
    signal sof_2_fu_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_i_cast_fu_186_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_fu_223_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_201_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_212_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_201_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond2_fu_212_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_201_p2)) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_212_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- sof_2_fu_100 assign process. --
    sof_2_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond2_reg_284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                sof_2_fu_100 <= ap_const_lv1_0;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_72))) then 
                sof_2_fu_100 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- t_V_6_reg_174 assign process. --
    t_V_6_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond2_fu_212_p2 = ap_const_lv1_0))) then 
                t_V_6_reg_174 <= j_V_fu_217_p2;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_201_p2))) then 
                t_V_6_reg_174 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- t_V_reg_163 assign process. --
    t_V_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_3 = ap_CS_fsm)) then 
                t_V_reg_163 <= i_V_reg_279;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_72))) then 
                t_V_reg_163 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond2_fu_212_p2 = ap_const_lv1_0))) then
                axi_last_V_reg_293 <= axi_last_V_fu_227_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond2_reg_284 <= exitcond2_fu_212_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_V_reg_279 <= i_V_fu_206_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_72))) then
                op2_assign_reg_271 <= op2_assign_fu_190_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_72 , exitcond2_fu_212_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_102 , ap_reg_ppiten_pp0_it1 , exitcond_fu_201_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_72)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_fu_201_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_212_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_212_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    AXI_video_strm_V_1_status <= (AXI_video_strm_V_data_V_full_n and AXI_video_strm_V_keep_V_full_n and AXI_video_strm_V_strb_V_full_n and AXI_video_strm_V_user_V_full_n and AXI_video_strm_V_last_V_full_n and AXI_video_strm_V_id_V_full_n and AXI_video_strm_V_dest_V_full_n);

    -- AXI_video_strm_V_1_update assign process. --
    AXI_video_strm_V_1_update_assign_proc : process(ap_CS_fsm, exitcond2_reg_284, ap_sig_bdd_102, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond2_reg_284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            AXI_video_strm_V_1_update <= ap_const_logic_1;
        else 
            AXI_video_strm_V_1_update <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_data_V_din <= (((ap_const_lv8_FF & img_data_stream_2_V_dout) & img_data_stream_1_V_dout) & img_data_stream_0_V_dout);
    AXI_video_strm_V_data_V_write <= AXI_video_strm_V_1_update;
    AXI_video_strm_V_dest_V_din <= ap_const_lv1_0;
    AXI_video_strm_V_dest_V_write <= AXI_video_strm_V_1_update;
    AXI_video_strm_V_id_V_din <= ap_const_lv1_0;
    AXI_video_strm_V_id_V_write <= AXI_video_strm_V_1_update;
    AXI_video_strm_V_keep_V_din <= ap_const_lv4_F;
    AXI_video_strm_V_keep_V_write <= AXI_video_strm_V_1_update;
    AXI_video_strm_V_last_V_din <= axi_last_V_reg_293;
    AXI_video_strm_V_last_V_write <= AXI_video_strm_V_1_update;
    AXI_video_strm_V_strb_V_din <= ap_const_lv4_0;
    AXI_video_strm_V_strb_V_write <= AXI_video_strm_V_1_update;
    AXI_video_strm_V_user_V_din <= sof_2_fu_100;
    AXI_video_strm_V_user_V_write <= AXI_video_strm_V_1_update;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond_fu_201_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_201_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_201_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_201_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(img_data_stream_0_V_empty_n, img_data_stream_1_V_empty_n, img_data_stream_2_V_empty_n, exitcond2_reg_284, AXI_video_strm_V_1_status)
    begin
                ap_sig_bdd_102 <= (((img_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond2_reg_284 = ap_const_lv1_0)) or ((exitcond2_reg_284 = ap_const_lv1_0) and (img_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond2_reg_284 = ap_const_lv1_0) and (img_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond2_reg_284 = ap_const_lv1_0) and (AXI_video_strm_V_1_status = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_72 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

    axi_last_V_fu_227_p2 <= "1" when (tmp_cast_fu_223_p1 = op2_assign_reg_271) else "0";
    exitcond2_fu_212_p2 <= "1" when (t_V_6_reg_174 = img_cols_V_read) else "0";
    exitcond_fu_201_p2 <= "1" when (t_V_reg_163 = img_rows_V_read) else "0";
    i_V_fu_206_p2 <= std_logic_vector(unsigned(t_V_reg_163) + unsigned(ap_const_lv12_1));

    -- img_data_stream_0_V_read assign process. --
    img_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, exitcond2_reg_284, ap_sig_bdd_102, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond2_reg_284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            img_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- img_data_stream_1_V_read assign process. --
    img_data_stream_1_V_read_assign_proc : process(ap_CS_fsm, exitcond2_reg_284, ap_sig_bdd_102, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond2_reg_284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            img_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- img_data_stream_2_V_read assign process. --
    img_data_stream_2_V_read_assign_proc : process(ap_CS_fsm, exitcond2_reg_284, ap_sig_bdd_102, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond2_reg_284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            img_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_217_p2 <= std_logic_vector(unsigned(t_V_6_reg_174) + unsigned(ap_const_lv12_1));
    op2_assign_fu_190_p2 <= std_logic_vector(unsigned(retval_i_cast_fu_186_p1) + unsigned(ap_const_lv13_1FFF));
    retval_i_cast_fu_186_p1 <= std_logic_vector(resize(unsigned(img_cols_V_read),13));
    tmp_cast_fu_223_p1 <= std_logic_vector(resize(unsigned(t_V_6_reg_174),13));
end behav;
