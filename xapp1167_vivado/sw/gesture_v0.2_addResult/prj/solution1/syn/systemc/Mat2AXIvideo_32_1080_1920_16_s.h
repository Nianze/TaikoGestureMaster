// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Mat2AXIvideo_32_1080_1920_16_s_HH_
#define _Mat2AXIvideo_32_1080_1920_16_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Mat2AXIvideo_32_1080_1920_16_s : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > img_rows_V_read;
    sc_in< sc_lv<12> > img_cols_V_read;
    sc_in< sc_lv<8> > img_data_stream_0_V_dout;
    sc_in< sc_logic > img_data_stream_0_V_empty_n;
    sc_out< sc_logic > img_data_stream_0_V_read;
    sc_in< sc_lv<8> > img_data_stream_1_V_dout;
    sc_in< sc_logic > img_data_stream_1_V_empty_n;
    sc_out< sc_logic > img_data_stream_1_V_read;
    sc_in< sc_lv<8> > img_data_stream_2_V_dout;
    sc_in< sc_logic > img_data_stream_2_V_empty_n;
    sc_out< sc_logic > img_data_stream_2_V_read;
    sc_out< sc_lv<32> > AXI_video_strm_V_data_V_din;
    sc_in< sc_logic > AXI_video_strm_V_data_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_data_V_write;
    sc_out< sc_lv<4> > AXI_video_strm_V_keep_V_din;
    sc_in< sc_logic > AXI_video_strm_V_keep_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_keep_V_write;
    sc_out< sc_lv<4> > AXI_video_strm_V_strb_V_din;
    sc_in< sc_logic > AXI_video_strm_V_strb_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_strb_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_user_V_din;
    sc_in< sc_logic > AXI_video_strm_V_user_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_user_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_last_V_din;
    sc_in< sc_logic > AXI_video_strm_V_last_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_last_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_id_V_din;
    sc_in< sc_logic > AXI_video_strm_V_id_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_id_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_dest_V_din;
    sc_in< sc_logic > AXI_video_strm_V_dest_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_dest_V_write;


    // Module declarations
    Mat2AXIvideo_32_1080_1920_16_s(sc_module_name name);
    SC_HAS_PROCESS(Mat2AXIvideo_32_1080_1920_16_s);

    ~Mat2AXIvideo_32_1080_1920_16_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<12> > t_V_6_reg_174;
    sc_signal< bool > ap_sig_bdd_72;
    sc_signal< sc_lv<13> > op2_assign_fu_190_p2;
    sc_signal< sc_lv<13> > op2_assign_reg_271;
    sc_signal< sc_lv<12> > i_V_fu_206_p2;
    sc_signal< sc_lv<12> > i_V_reg_279;
    sc_signal< sc_lv<1> > exitcond2_fu_212_p2;
    sc_signal< sc_lv<1> > exitcond2_reg_284;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > AXI_video_strm_V_1_status;
    sc_signal< bool > ap_sig_bdd_102;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<12> > j_V_fu_217_p2;
    sc_signal< sc_lv<1> > axi_last_V_fu_227_p2;
    sc_signal< sc_lv<1> > axi_last_V_reg_293;
    sc_signal< sc_lv<1> > exitcond_fu_201_p2;
    sc_signal< sc_lv<12> > t_V_reg_163;
    sc_signal< sc_logic > AXI_video_strm_V_1_update;
    sc_signal< sc_lv<1> > sof_2_fu_100;
    sc_signal< sc_lv<13> > retval_i_cast_fu_186_p1;
    sc_signal< sc_lv<13> > tmp_cast_fu_223_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<2> ap_ST_st5_fsm_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_1FFF;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<8> ap_const_lv8_FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AXI_video_strm_V_1_status();
    void thread_AXI_video_strm_V_1_update();
    void thread_AXI_video_strm_V_data_V_din();
    void thread_AXI_video_strm_V_data_V_write();
    void thread_AXI_video_strm_V_dest_V_din();
    void thread_AXI_video_strm_V_dest_V_write();
    void thread_AXI_video_strm_V_id_V_din();
    void thread_AXI_video_strm_V_id_V_write();
    void thread_AXI_video_strm_V_keep_V_din();
    void thread_AXI_video_strm_V_keep_V_write();
    void thread_AXI_video_strm_V_last_V_din();
    void thread_AXI_video_strm_V_last_V_write();
    void thread_AXI_video_strm_V_strb_V_din();
    void thread_AXI_video_strm_V_strb_V_write();
    void thread_AXI_video_strm_V_user_V_din();
    void thread_AXI_video_strm_V_user_V_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_102();
    void thread_ap_sig_bdd_72();
    void thread_axi_last_V_fu_227_p2();
    void thread_exitcond2_fu_212_p2();
    void thread_exitcond_fu_201_p2();
    void thread_i_V_fu_206_p2();
    void thread_img_data_stream_0_V_read();
    void thread_img_data_stream_1_V_read();
    void thread_img_data_stream_2_V_read();
    void thread_j_V_fu_217_p2();
    void thread_op2_assign_fu_190_p2();
    void thread_retval_i_cast_fu_186_p1();
    void thread_tmp_cast_fu_223_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
