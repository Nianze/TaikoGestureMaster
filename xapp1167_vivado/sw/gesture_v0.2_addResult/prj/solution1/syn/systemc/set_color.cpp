// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "set_color.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic set_color::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic set_color::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> set_color::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> set_color::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> set_color::ap_ST_pp0_stg0_fsm_2 = "10";
const sc_lv<1> set_color::ap_const_lv1_0 = "0";
const sc_lv<12> set_color::ap_const_lv12_0 = "000000000000";
const sc_lv<3> set_color::ap_const_lv3_0 = "000";
const sc_lv<3> set_color::ap_const_lv3_1 = "1";
const sc_lv<12> set_color::ap_const_lv12_1 = "1";
const sc_lv<8> set_color::ap_const_lv8_FF = "11111111";
const sc_lv<1> set_color::ap_const_lv1_1 = "1";

set_color::set_color(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond4_fu_138_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond4_fu_138_p2 );

    SC_METHOD(thread_ap_sig_bdd_48);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_bdd_70);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( exitcond_reg_264 );

    SC_METHOD(thread_ap_sig_bdd_84);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );

    SC_METHOD(thread_brmerge1_fu_180_p2);
    sensitive << ( tmp_9_reg_251 );
    sensitive << ( brmerge_reg_285 );

    SC_METHOD(thread_brmerge_fu_170_p2);
    sensitive << ( tmp_s_reg_246 );
    sensitive << ( tmp_24_not_fu_164_p2 );

    SC_METHOD(thread_dst_data_stream_0_V_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( pixel_out_val_0_fu_226_p2 );

    SC_METHOD(thread_dst_data_stream_0_V_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_dst_data_stream_1_V_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( pixel_out_val_1_fu_211_p2 );

    SC_METHOD(thread_dst_data_stream_1_V_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_dst_data_stream_2_V_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( pixel_out_val_1_3_fu_195_p2 );

    SC_METHOD(thread_dst_data_stream_2_V_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_264_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_exitcond4_fu_138_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( src_rows_V_read );
    sensitive << ( t_V_7_reg_103 );

    SC_METHOD(thread_exitcond_fu_149_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( src_cols_V_read );
    sensitive << ( t_V_reg_114 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_i_V_fu_143_p2);
    sensitive << ( t_V_7_reg_103 );

    SC_METHOD(thread_j_V_fu_154_p2);
    sensitive << ( t_V_reg_114 );

    SC_METHOD(thread_not_brmerge1_fu_189_p2);
    sensitive << ( brmerge1_fu_180_p2 );

    SC_METHOD(thread_not_brmerge_fu_184_p2);
    sensitive << ( brmerge_reg_285 );

    SC_METHOD(thread_not_tmp_24_not_fu_175_p2);
    sensitive << ( tmp_24_not_reg_280 );

    SC_METHOD(thread_pixel_out_val_0_fu_226_p2);
    sensitive << ( brmerge_reg_285 );
    sensitive << ( tmp3_fu_221_p2 );

    SC_METHOD(thread_pixel_out_val_1_3_fu_195_p2);
    sensitive << ( tmp_27_reg_273 );
    sensitive << ( not_brmerge1_fu_189_p2 );

    SC_METHOD(thread_pixel_out_val_1_fu_211_p2);
    sensitive << ( tmp_27_reg_273 );
    sensitive << ( tmp2_fu_205_p2 );

    SC_METHOD(thread_src_data_stream_0_V_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_reg_264 );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_tmp2_fu_205_p2);
    sensitive << ( brmerge1_fu_180_p2 );
    sensitive << ( not_brmerge_fu_184_p2 );

    SC_METHOD(thread_tmp3_fu_221_p2);
    sensitive << ( tmp_27_reg_273 );
    sensitive << ( not_tmp_24_not_fu_175_p2 );

    SC_METHOD(thread_tmp_24_not_fu_164_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( src_data_stream_0_V_dout );
    sensitive << ( exitcond_reg_264 );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_tmp_27_fu_160_p1);
    sensitive << ( src_data_stream_0_V_dout );

    SC_METHOD(thread_tmp_9_fu_132_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ges );
    sensitive << ( ap_sig_bdd_48 );

    SC_METHOD(thread_tmp_s_fu_126_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ges );
    sensitive << ( ap_sig_bdd_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_48 );
    sensitive << ( exitcond_fu_149_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_70 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_84 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( exitcond4_fu_138_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "set_color_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src_rows_V_read, "(port)src_rows_V_read");
    sc_trace(mVcdFile, src_cols_V_read, "(port)src_cols_V_read");
    sc_trace(mVcdFile, src_data_stream_0_V_dout, "(port)src_data_stream_0_V_dout");
    sc_trace(mVcdFile, src_data_stream_0_V_empty_n, "(port)src_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_0_V_read, "(port)src_data_stream_0_V_read");
    sc_trace(mVcdFile, dst_data_stream_0_V_din, "(port)dst_data_stream_0_V_din");
    sc_trace(mVcdFile, dst_data_stream_0_V_full_n, "(port)dst_data_stream_0_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_write, "(port)dst_data_stream_0_V_write");
    sc_trace(mVcdFile, dst_data_stream_1_V_din, "(port)dst_data_stream_1_V_din");
    sc_trace(mVcdFile, dst_data_stream_1_V_full_n, "(port)dst_data_stream_1_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_1_V_write, "(port)dst_data_stream_1_V_write");
    sc_trace(mVcdFile, dst_data_stream_2_V_din, "(port)dst_data_stream_2_V_din");
    sc_trace(mVcdFile, dst_data_stream_2_V_full_n, "(port)dst_data_stream_2_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_2_V_write, "(port)dst_data_stream_2_V_write");
    sc_trace(mVcdFile, ges, "(port)ges");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, t_V_reg_114, "t_V_reg_114");
    sc_trace(mVcdFile, ap_sig_bdd_48, "ap_sig_bdd_48");
    sc_trace(mVcdFile, tmp_s_fu_126_p2, "tmp_s_fu_126_p2");
    sc_trace(mVcdFile, tmp_s_reg_246, "tmp_s_reg_246");
    sc_trace(mVcdFile, tmp_9_fu_132_p2, "tmp_9_fu_132_p2");
    sc_trace(mVcdFile, tmp_9_reg_251, "tmp_9_reg_251");
    sc_trace(mVcdFile, i_V_fu_143_p2, "i_V_fu_143_p2");
    sc_trace(mVcdFile, i_V_reg_259, "i_V_reg_259");
    sc_trace(mVcdFile, exitcond_fu_149_p2, "exitcond_fu_149_p2");
    sc_trace(mVcdFile, exitcond_reg_264, "exitcond_reg_264");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_sig_bdd_70, "ap_sig_bdd_70");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_264_pp0_it1, "ap_reg_ppstg_exitcond_reg_264_pp0_it1");
    sc_trace(mVcdFile, ap_sig_bdd_84, "ap_sig_bdd_84");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, j_V_fu_154_p2, "j_V_fu_154_p2");
    sc_trace(mVcdFile, tmp_27_fu_160_p1, "tmp_27_fu_160_p1");
    sc_trace(mVcdFile, tmp_27_reg_273, "tmp_27_reg_273");
    sc_trace(mVcdFile, tmp_24_not_fu_164_p2, "tmp_24_not_fu_164_p2");
    sc_trace(mVcdFile, tmp_24_not_reg_280, "tmp_24_not_reg_280");
    sc_trace(mVcdFile, brmerge_fu_170_p2, "brmerge_fu_170_p2");
    sc_trace(mVcdFile, brmerge_reg_285, "brmerge_reg_285");
    sc_trace(mVcdFile, exitcond4_fu_138_p2, "exitcond4_fu_138_p2");
    sc_trace(mVcdFile, t_V_7_reg_103, "t_V_7_reg_103");
    sc_trace(mVcdFile, brmerge1_fu_180_p2, "brmerge1_fu_180_p2");
    sc_trace(mVcdFile, not_brmerge1_fu_189_p2, "not_brmerge1_fu_189_p2");
    sc_trace(mVcdFile, pixel_out_val_1_3_fu_195_p2, "pixel_out_val_1_3_fu_195_p2");
    sc_trace(mVcdFile, not_brmerge_fu_184_p2, "not_brmerge_fu_184_p2");
    sc_trace(mVcdFile, tmp2_fu_205_p2, "tmp2_fu_205_p2");
    sc_trace(mVcdFile, pixel_out_val_1_fu_211_p2, "pixel_out_val_1_fu_211_p2");
    sc_trace(mVcdFile, not_tmp_24_not_fu_175_p2, "not_tmp_24_not_fu_175_p2");
    sc_trace(mVcdFile, tmp3_fu_221_p2, "tmp3_fu_221_p2");
    sc_trace(mVcdFile, pixel_out_val_0_fu_226_p2, "pixel_out_val_0_fu_226_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");

    }
}

set_color::~set_color() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void set_color::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
             !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
             !esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
             !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
             esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read())) || 
                    (esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
                     !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
                     !esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
             !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        } else if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read()))) {
            ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
         !esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0))) {
        t_V_7_reg_103 = i_V_reg_259.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !ap_sig_bdd_48.read())) {
        t_V_7_reg_103 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read()))) {
        t_V_reg_114 = ap_const_lv12_0;
    } else if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
                !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
                esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0))) {
        t_V_reg_114 = j_V_fu_154_p2.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        ap_reg_ppstg_exitcond_reg_264_pp0_it1 = exitcond_reg_264.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && esl_seteq<1,1,1>(exitcond_reg_264.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        brmerge_reg_285 = brmerge_fu_170_p2.read();
        tmp_24_not_reg_280 = tmp_24_not_fu_164_p2.read();
        tmp_27_reg_273 = tmp_27_fu_160_p1.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        exitcond_reg_264 = exitcond_fu_149_p2.read();
    }
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        i_V_reg_259 = i_V_fu_143_p2.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && !ap_sig_bdd_48.read())) {
        tmp_9_reg_251 = tmp_9_fu_132_p2.read();
        tmp_s_reg_246 = tmp_s_fu_126_p2.read();
    }
}

void set_color::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void set_color::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void set_color::thread_ap_ready() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void set_color::thread_ap_sig_bdd_48() {
    ap_sig_bdd_48 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void set_color::thread_ap_sig_bdd_70() {
    ap_sig_bdd_70 = (esl_seteq<1,1,1>(src_data_stream_0_V_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_reg_264.read(), ap_const_lv1_0));
}

void set_color::thread_ap_sig_bdd_84() {
    ap_sig_bdd_84 = ((esl_seteq<1,1,1>(dst_data_stream_0_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_264_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_264_pp0_it1.read()) && 
  esl_seteq<1,1,1>(dst_data_stream_1_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_264_pp0_it1.read()) && 
  esl_seteq<1,1,1>(dst_data_stream_2_V_full_n.read(), ap_const_logic_0)));
}

void set_color::thread_brmerge1_fu_180_p2() {
    brmerge1_fu_180_p2 = (brmerge_reg_285.read() | tmp_9_reg_251.read());
}

void set_color::thread_brmerge_fu_170_p2() {
    brmerge_fu_170_p2 = (tmp_24_not_fu_164_p2.read() | tmp_s_reg_246.read());
}

void set_color::thread_dst_data_stream_0_V_din() {
    dst_data_stream_0_V_din = esl_sext<8,1>(pixel_out_val_0_fu_226_p2.read());
}

void set_color::thread_dst_data_stream_0_V_write() {
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_264_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        dst_data_stream_0_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_0_V_write = ap_const_logic_0;
    }
}

void set_color::thread_dst_data_stream_1_V_din() {
    dst_data_stream_1_V_din = esl_sext<8,1>(pixel_out_val_1_fu_211_p2.read());
}

void set_color::thread_dst_data_stream_1_V_write() {
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_264_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        dst_data_stream_1_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_1_V_write = ap_const_logic_0;
    }
}

void set_color::thread_dst_data_stream_2_V_din() {
    dst_data_stream_2_V_din = esl_sext<8,1>(pixel_out_val_1_3_fu_195_p2.read());
}

void set_color::thread_dst_data_stream_2_V_write() {
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_264_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        dst_data_stream_2_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_2_V_write = ap_const_logic_0;
    }
}

void set_color::thread_exitcond4_fu_138_p2() {
    exitcond4_fu_138_p2 = (!t_V_7_reg_103.read().is_01() || !src_rows_V_read.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_7_reg_103.read() == src_rows_V_read.read());
}

void set_color::thread_exitcond_fu_149_p2() {
    exitcond_fu_149_p2 = (!t_V_reg_114.read().is_01() || !src_cols_V_read.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_114.read() == src_cols_V_read.read());
}

void set_color::thread_i_V_fu_143_p2() {
    i_V_fu_143_p2 = (!t_V_7_reg_103.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_bigint<12>(t_V_7_reg_103.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void set_color::thread_j_V_fu_154_p2() {
    j_V_fu_154_p2 = (!t_V_reg_114.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_bigint<12>(t_V_reg_114.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void set_color::thread_not_brmerge1_fu_189_p2() {
    not_brmerge1_fu_189_p2 = (brmerge1_fu_180_p2.read() ^ ap_const_lv1_1);
}

void set_color::thread_not_brmerge_fu_184_p2() {
    not_brmerge_fu_184_p2 = (brmerge_reg_285.read() ^ ap_const_lv1_1);
}

void set_color::thread_not_tmp_24_not_fu_175_p2() {
    not_tmp_24_not_fu_175_p2 = (tmp_24_not_reg_280.read() ^ ap_const_lv1_1);
}

void set_color::thread_pixel_out_val_0_fu_226_p2() {
    pixel_out_val_0_fu_226_p2 = (brmerge_reg_285.read() & tmp3_fu_221_p2.read());
}

void set_color::thread_pixel_out_val_1_3_fu_195_p2() {
    pixel_out_val_1_3_fu_195_p2 = (tmp_27_reg_273.read() & not_brmerge1_fu_189_p2.read());
}

void set_color::thread_pixel_out_val_1_fu_211_p2() {
    pixel_out_val_1_fu_211_p2 = (tmp2_fu_205_p2.read() & tmp_27_reg_273.read());
}

void set_color::thread_src_data_stream_0_V_read() {
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_264.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        src_data_stream_0_V_read = ap_const_logic_1;
    } else {
        src_data_stream_0_V_read = ap_const_logic_0;
    }
}

void set_color::thread_tmp2_fu_205_p2() {
    tmp2_fu_205_p2 = (brmerge1_fu_180_p2.read() & not_brmerge_fu_184_p2.read());
}

void set_color::thread_tmp3_fu_221_p2() {
    tmp3_fu_221_p2 = (tmp_27_reg_273.read() & not_tmp_24_not_fu_175_p2.read());
}

void set_color::thread_tmp_24_not_fu_164_p2() {
    tmp_24_not_fu_164_p2 = (!src_data_stream_0_V_dout.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(src_data_stream_0_V_dout.read() != ap_const_lv8_FF);
}

void set_color::thread_tmp_27_fu_160_p1() {
    tmp_27_fu_160_p1 = src_data_stream_0_V_dout.read().range(1-1, 0);
}

void set_color::thread_tmp_9_fu_132_p2() {
    tmp_9_fu_132_p2 = (!ges.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<1>(): sc_lv<1>(ges.read() == ap_const_lv3_1);
}

void set_color::thread_tmp_s_fu_126_p2() {
    tmp_s_fu_126_p2 = (!ges.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(ges.read() == ap_const_lv3_0);
}

void set_color::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!ap_sig_bdd_48.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_138_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && !esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            } else if (((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_2, ap_CS_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !((ap_sig_bdd_70.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_84.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) && 
  !esl_seteq<1,1,1>(exitcond_fu_149_p2.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}
}

