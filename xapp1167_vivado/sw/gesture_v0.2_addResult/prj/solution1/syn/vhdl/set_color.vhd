-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity set_color is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    ges : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of set_color is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_V_reg_114 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_48 : BOOLEAN;
    signal tmp_s_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_143_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_259 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_70 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_264_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_84 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal j_V_fu_154_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_160_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_not_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_not_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_7_reg_103 : STD_LOGIC_VECTOR (11 downto 0);
    signal brmerge1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_brmerge1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_1_3_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_brmerge_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_24_not_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_val_0_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal pixel_out_val_0_fu_226_p2_temp: signed (1-1 downto 0);
    signal pixel_out_val_1_fu_211_p2_temp: signed (1-1 downto 0);
    signal pixel_out_val_1_3_fu_195_p2_temp: signed (1-1 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_138_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_149_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_138_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_fu_149_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_138_p2)) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_149_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_138_p2))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- t_V_7_reg_103 assign process. --
    t_V_7_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_149_p2 = ap_const_lv1_0)))) then 
                t_V_7_reg_103 <= i_V_reg_259;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_48))) then 
                t_V_7_reg_103 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- t_V_reg_114 assign process. --
    t_V_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_138_p2))) then 
                t_V_reg_114 <= ap_const_lv12_0;
            elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_fu_149_p2 = ap_const_lv1_0))) then 
                t_V_reg_114 <= j_V_fu_154_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                ap_reg_ppstg_exitcond_reg_264_pp0_it1 <= exitcond_reg_264;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                brmerge_reg_285 <= brmerge_fu_170_p2;
                tmp_24_not_reg_280 <= tmp_24_not_fu_164_p2;
                tmp_27_reg_273 <= tmp_27_fu_160_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                exitcond_reg_264 <= exitcond_fu_149_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_V_reg_259 <= i_V_fu_143_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_48))) then
                tmp_9_reg_251 <= tmp_9_fu_132_p2;
                tmp_s_reg_246 <= tmp_s_fu_126_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_48 , exitcond_fu_149_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_70 , ap_reg_ppiten_pp0_it1 , ap_sig_bdd_84 , ap_reg_ppiten_pp0_it2 , exitcond4_fu_138_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_48)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_138_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_149_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_149_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond4_fu_138_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_138_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond4_fu_138_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_138_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_48 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(src_data_stream_0_V_empty_n, exitcond_reg_264)
    begin
                ap_sig_bdd_70 <= ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_reg_264 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_reg_ppstg_exitcond_reg_264_pp0_it1)
    begin
                ap_sig_bdd_84 <= (((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_264_pp0_it1)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_264_pp0_it1) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_264_pp0_it1) and (dst_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;

    brmerge1_fu_180_p2 <= (brmerge_reg_285 or tmp_9_reg_251);
    brmerge_fu_170_p2 <= (tmp_24_not_fu_164_p2 or tmp_s_reg_246);
    
    pixel_out_val_0_fu_226_p2_temp <= signed(pixel_out_val_0_fu_226_p2);
    dst_data_stream_0_V_din <= std_logic_vector(resize(pixel_out_val_0_fu_226_p2_temp,8));


    -- dst_data_stream_0_V_write assign process. --
    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_70, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_264_pp0_it1, ap_sig_bdd_84, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_264_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    
    pixel_out_val_1_fu_211_p2_temp <= signed(pixel_out_val_1_fu_211_p2);
    dst_data_stream_1_V_din <= std_logic_vector(resize(pixel_out_val_1_fu_211_p2_temp,8));


    -- dst_data_stream_1_V_write assign process. --
    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_70, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_264_pp0_it1, ap_sig_bdd_84, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_264_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    
    pixel_out_val_1_3_fu_195_p2_temp <= signed(pixel_out_val_1_3_fu_195_p2);
    dst_data_stream_2_V_din <= std_logic_vector(resize(pixel_out_val_1_3_fu_195_p2_temp,8));


    -- dst_data_stream_2_V_write assign process. --
    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_70, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_264_pp0_it1, ap_sig_bdd_84, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_264_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_138_p2 <= "1" when (t_V_7_reg_103 = src_rows_V_read) else "0";
    exitcond_fu_149_p2 <= "1" when (t_V_reg_114 = src_cols_V_read) else "0";
    i_V_fu_143_p2 <= std_logic_vector(unsigned(t_V_7_reg_103) + unsigned(ap_const_lv12_1));
    j_V_fu_154_p2 <= std_logic_vector(unsigned(t_V_reg_114) + unsigned(ap_const_lv12_1));
    not_brmerge1_fu_189_p2 <= (brmerge1_fu_180_p2 xor ap_const_lv1_1);
    not_brmerge_fu_184_p2 <= (brmerge_reg_285 xor ap_const_lv1_1);
    not_tmp_24_not_fu_175_p2 <= (tmp_24_not_reg_280 xor ap_const_lv1_1);
    pixel_out_val_0_fu_226_p2 <= (brmerge_reg_285 and tmp3_fu_221_p2);
    pixel_out_val_1_3_fu_195_p2 <= (tmp_27_reg_273 and not_brmerge1_fu_189_p2);
    pixel_out_val_1_fu_211_p2 <= (tmp2_fu_205_p2 and tmp_27_reg_273);

    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_264, ap_sig_bdd_70, ap_reg_ppiten_pp0_it1, ap_sig_bdd_84, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_205_p2 <= (brmerge1_fu_180_p2 and not_brmerge_fu_184_p2);
    tmp3_fu_221_p2 <= (tmp_27_reg_273 and not_tmp_24_not_fu_175_p2);
    tmp_24_not_fu_164_p2 <= "0" when (src_data_stream_0_V_dout = ap_const_lv8_FF) else "1";
    tmp_27_fu_160_p1 <= src_data_stream_0_V_dout(1 - 1 downto 0);
    tmp_9_fu_132_p2 <= "1" when (ges = ap_const_lv3_1) else "0";
    tmp_s_fu_126_p2 <= "1" when (ges = ap_const_lv3_0) else "0";
end behav;
