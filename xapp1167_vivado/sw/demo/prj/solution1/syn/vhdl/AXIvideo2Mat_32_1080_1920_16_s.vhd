-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2Mat_32_1080_1920_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2Mat_32_1080_1920_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal t_V_4_reg_229 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_data_V_3_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_6_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_0_status : STD_LOGIC;
    signal ap_sig_bdd_91 : BOOLEAN;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal i_V_fu_385_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_467 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond3_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal sof_load_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_144 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sof_load_load_fu_402_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_last_V_reg_173 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_user_V_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_4_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V_2_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_last_V_4_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_218 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_data_V_8_phi_fu_278_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_last_V_7_phi_fu_293_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_5_phi_fu_308_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_1_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_0_update : STD_LOGIC;
    signal sof_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_322 : BOOLEAN;
    signal ap_sig_bdd_324 : BOOLEAN;
    signal ap_sig_bdd_274 : BOOLEAN;


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_380_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_391_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_380_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_380_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V_2_reg_196 assign process. --
    axi_data_V_2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                axi_data_V_2_reg_196 <= axi_data_V_reg_161;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                axi_data_V_2_reg_196 <= axi_data_V_4_reg_319;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_240 assign process. --
    axi_data_V_3_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                axi_data_V_3_reg_240 <= axi_data_V_8_phi_fu_278_p6;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_380_p2))) then 
                axi_data_V_3_reg_240 <= axi_data_V_2_reg_196;
            end if; 
        end if;
    end process;

    -- axi_data_V_4_reg_319 assign process. --
    axi_data_V_4_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_reg_472)))) then 
                axi_data_V_4_reg_319 <= axi_data_V_3_reg_240;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_1_reg_343) and not(ap_sig_bdd_99))) then 
                axi_data_V_4_reg_319 <= AXI_video_strm_V_data_V_dout;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_207 assign process. --
    axi_last_V_2_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                axi_last_V_2_reg_207 <= axi_last_V_reg_173;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                axi_last_V_2_reg_207 <= axi_last_V_4_reg_331;
            end if; 
        end if;
    end process;

    -- axi_last_V_4_reg_331 assign process. --
    axi_last_V_4_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_reg_472)))) then 
                axi_last_V_4_reg_331 <= eol_6_reg_251;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_1_reg_343) and not(ap_sig_bdd_99))) then 
                axi_last_V_4_reg_331 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    -- axi_user_V_reg_185 assign process. --
    axi_user_V_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (axi_user_V_reg_185 = ap_const_lv1_0) and not(ap_sig_bdd_91))) then 
                axi_user_V_reg_185 <= AXI_video_strm_V_user_V_dout;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_109))) then 
                axi_user_V_reg_185 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- eol_1_reg_343 assign process. --
    eol_1_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_reg_472)))) then 
                eol_1_reg_343 <= eol_reg_262;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_1_reg_343) and not(ap_sig_bdd_99))) then 
                eol_1_reg_343 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    -- eol_6_reg_251 assign process. --
    eol_6_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                eol_6_reg_251 <= axi_last_V_7_phi_fu_293_p6;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_380_p2))) then 
                eol_6_reg_251 <= axi_last_V_2_reg_207;
            end if; 
        end if;
    end process;

    -- eol_reg_262 assign process. --
    eol_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                eol_reg_262 <= eol_5_phi_fu_308_p6;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_380_p2))) then 
                eol_reg_262 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- sof_fu_106 assign process. --
    sof_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond3_fu_391_p2) and not((ap_const_lv1_0 = sof_load_load_fu_402_p1)))) then 
                sof_fu_106 <= ap_const_lv1_0;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                sof_fu_106 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- t_V_4_reg_229 assign process. --
    t_V_4_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond3_fu_391_p2))) then 
                t_V_4_reg_229 <= j_V_fu_396_p2;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_380_p2))) then 
                t_V_4_reg_229 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- t_V_reg_218 assign process. --
    t_V_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                t_V_reg_218 <= ap_const_lv12_0;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                t_V_reg_218 <= i_V_reg_467;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (axi_user_V_reg_185 = ap_const_lv1_0) and not(ap_sig_bdd_91))) then
                axi_data_V_reg_161 <= AXI_video_strm_V_data_V_dout;
                axi_last_V_reg_173 <= AXI_video_strm_V_last_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                exitcond3_reg_472 <= exitcond3_fu_391_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                i_V_reg_467 <= i_V_fu_385_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond3_fu_391_p2))) then
                sof_load_reg_481 <= sof_fu_106;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_91 , ap_sig_bdd_99 , ap_sig_bdd_109 , ap_reg_ppiten_pp1_it0 , ap_sig_bdd_144 , ap_reg_ppiten_pp1_it1 , exitcond_fu_380_p2 , axi_user_V_reg_185 , eol_1_reg_343)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_109)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((axi_user_V_reg_185 = ap_const_lv1_0) and not(ap_sig_bdd_91))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not(ap_sig_bdd_91) and not((axi_user_V_reg_185 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_380_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_1_reg_343) and not(ap_sig_bdd_99))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_99) and not((ap_const_lv1_0 = eol_1_reg_343)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    AXI_video_strm_V_0_status <= (AXI_video_strm_V_data_V_empty_n and AXI_video_strm_V_keep_V_empty_n and AXI_video_strm_V_strb_V_empty_n and AXI_video_strm_V_user_V_empty_n and AXI_video_strm_V_last_V_empty_n and AXI_video_strm_V_id_V_empty_n and AXI_video_strm_V_dest_V_empty_n);

    -- AXI_video_strm_V_0_update assign process. --
    AXI_video_strm_V_0_update_assign_proc : process(ap_CS_fsm, eol_reg_262, ap_sig_bdd_91, ap_sig_bdd_99, exitcond3_reg_472, sof_load_reg_481, ap_sig_bdd_144, ap_reg_ppiten_pp1_it1, axi_user_V_reg_185, eol_1_reg_343)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (axi_user_V_reg_185 = ap_const_lv1_0) and not(ap_sig_bdd_91)) or ((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_1_reg_343) and not(ap_sig_bdd_99)) or ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_lv1_0 = sof_load_reg_481) and (ap_const_lv1_0 = eol_reg_262) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            AXI_video_strm_V_0_update <= ap_const_logic_1;
        else 
            AXI_video_strm_V_0_update <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_data_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_dest_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_id_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_keep_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_last_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_strb_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_user_V_read <= AXI_video_strm_V_0_update;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond_fu_380_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_380_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_380_p2)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_380_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_109 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, eol_reg_262, AXI_video_strm_V_0_status, exitcond3_reg_472, sof_load_reg_481)
    begin
                ap_sig_bdd_144 <= (((AXI_video_strm_V_0_status = ap_const_logic_0) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_lv1_0 = sof_load_reg_481) and (ap_const_lv1_0 = eol_reg_262)) or ((ap_const_lv1_0 = exitcond3_reg_472) and (img_data_stream_0_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond3_reg_472) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond3_reg_472) and (img_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_274 assign process. --
    ap_sig_bdd_274_assign_proc : process(ap_CS_fsm, exitcond3_reg_472, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_274 <= ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1));
    end process;


    -- ap_sig_bdd_322 assign process. --
    ap_sig_bdd_322_assign_proc : process(eol_reg_262, sof_load_reg_481)
    begin
                ap_sig_bdd_322 <= ((ap_const_lv1_0 = sof_load_reg_481) and (ap_const_lv1_0 = eol_reg_262));
    end process;


    -- ap_sig_bdd_324 assign process. --
    ap_sig_bdd_324_assign_proc : process(eol_reg_262, sof_load_reg_481)
    begin
                ap_sig_bdd_324 <= ((ap_const_lv1_0 = sof_load_reg_481) and not((ap_const_lv1_0 = eol_reg_262)));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(AXI_video_strm_V_0_status, axi_user_V_reg_185)
    begin
                ap_sig_bdd_91 <= ((AXI_video_strm_V_0_status = ap_const_logic_0) and (axi_user_V_reg_185 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(AXI_video_strm_V_0_status, eol_1_reg_343)
    begin
                ap_sig_bdd_99 <= ((AXI_video_strm_V_0_status = ap_const_logic_0) and (ap_const_lv1_0 = eol_1_reg_343));
    end process;


    -- axi_data_V_8_phi_fu_278_p6 assign process. --
    axi_data_V_8_phi_fu_278_p6_assign_proc : process(AXI_video_strm_V_data_V_dout, axi_data_V_3_reg_240, sof_load_reg_481, ap_sig_bdd_322, ap_sig_bdd_324, ap_sig_bdd_274)
    begin
        if (ap_sig_bdd_274) then
            if (ap_sig_bdd_324) then 
                axi_data_V_8_phi_fu_278_p6 <= ap_const_lv32_0;
            elsif (not((ap_const_lv1_0 = sof_load_reg_481))) then 
                axi_data_V_8_phi_fu_278_p6 <= axi_data_V_3_reg_240;
            elsif (ap_sig_bdd_322) then 
                axi_data_V_8_phi_fu_278_p6 <= AXI_video_strm_V_data_V_dout;
            else 
                axi_data_V_8_phi_fu_278_p6 <= ap_const_lv32_1;
            end if;
        else 
            axi_data_V_8_phi_fu_278_p6 <= ap_const_lv32_1;
        end if; 
    end process;


    -- axi_last_V_7_phi_fu_293_p6 assign process. --
    axi_last_V_7_phi_fu_293_p6_assign_proc : process(AXI_video_strm_V_last_V_dout, eol_6_reg_251, sof_load_reg_481, ap_sig_bdd_322, ap_sig_bdd_324, ap_sig_bdd_274)
    begin
        if (ap_sig_bdd_274) then
            if (ap_sig_bdd_324) then 
                axi_last_V_7_phi_fu_293_p6 <= ap_const_lv1_0;
            elsif (not((ap_const_lv1_0 = sof_load_reg_481))) then 
                axi_last_V_7_phi_fu_293_p6 <= eol_6_reg_251;
            elsif (ap_sig_bdd_322) then 
                axi_last_V_7_phi_fu_293_p6 <= AXI_video_strm_V_last_V_dout;
            else 
                axi_last_V_7_phi_fu_293_p6 <= ap_const_lv1_1;
            end if;
        else 
            axi_last_V_7_phi_fu_293_p6 <= ap_const_lv1_1;
        end if; 
    end process;


    -- eol_5_phi_fu_308_p6 assign process. --
    eol_5_phi_fu_308_p6_assign_proc : process(AXI_video_strm_V_last_V_dout, eol_6_reg_251, eol_reg_262, sof_load_reg_481, ap_sig_bdd_322, ap_sig_bdd_324, ap_sig_bdd_274)
    begin
        if (ap_sig_bdd_274) then
            if (ap_sig_bdd_324) then 
                eol_5_phi_fu_308_p6 <= eol_reg_262;
            elsif (not((ap_const_lv1_0 = sof_load_reg_481))) then 
                eol_5_phi_fu_308_p6 <= eol_6_reg_251;
            elsif (ap_sig_bdd_322) then 
                eol_5_phi_fu_308_p6 <= AXI_video_strm_V_last_V_dout;
            else 
                eol_5_phi_fu_308_p6 <= ap_const_lv1_1;
            end if;
        else 
            eol_5_phi_fu_308_p6 <= ap_const_lv1_1;
        end if; 
    end process;

    exitcond3_fu_391_p2 <= "1" when (t_V_4_reg_229 = img_cols_V_read) else "0";
    exitcond_fu_380_p2 <= "1" when (t_V_reg_218 = img_rows_V_read) else "0";
    i_V_fu_385_p2 <= std_logic_vector(unsigned(t_V_reg_218) + unsigned(ap_const_lv12_1));
    img_data_stream_0_V_din <= axi_data_V_8_phi_fu_278_p6(8 - 1 downto 0);

    -- img_data_stream_0_V_write assign process. --
    img_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, exitcond3_reg_472, ap_sig_bdd_144, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= axi_data_V_8_phi_fu_278_p6(15 downto 8);

    -- img_data_stream_1_V_write assign process. --
    img_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, exitcond3_reg_472, ap_sig_bdd_144, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_2_V_din <= axi_data_V_8_phi_fu_278_p6(23 downto 16);

    -- img_data_stream_2_V_write assign process. --
    img_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, exitcond3_reg_472, ap_sig_bdd_144, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_reg_472) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_144 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_396_p2 <= std_logic_vector(unsigned(t_V_4_reg_229) + unsigned(ap_const_lv12_1));
    sof_load_load_fu_402_p1 <= sof_fu_106;
end behav;
