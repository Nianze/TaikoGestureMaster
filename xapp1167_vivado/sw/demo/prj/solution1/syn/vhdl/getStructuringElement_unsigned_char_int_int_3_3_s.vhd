-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getStructuringElement_unsigned_char_int_int_3_3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of getStructuringElement_unsigned_char_int_int_3_3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_1_fu_386_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_1027 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp34_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp34_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next4_fu_482_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_next4_reg_1062 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp40_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp40_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp41_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp41_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp43_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp43_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_val13_5_fu_570_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val13_5_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val26_5_fu_578_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val26_5_reg_1108 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel3_fu_637_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel5_fu_653_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel8_fu_676_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel11_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel13_fu_715_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel16_fu_736_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel17_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_next_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_next_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp51_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp51_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp52_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp52_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp53_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp53_reg_1168 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp54_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp54_reg_1173 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond10_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond10_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_val13_1_fu_859_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val13_1_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val26_1_fu_867_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val26_1_reg_1202 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel31_fu_883_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel31_reg_1207 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel21_fu_927_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel23_fu_942_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel26_fu_964_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel29_fu_986_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel34_fu_1008_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel35_fu_1016_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_0_2_write_assign_reg_26 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_1_0_write_assign_reg_38 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_1_1_write_assign_reg_50 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_0_1_write_assign_reg_62 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_1_2_write_assign_reg_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_2_0_write_assign_reg_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_0_0_write_assign_reg_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_2_1_write_assign_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_2_2_write_assign_reg_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_val2_6_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val13_6_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val14_6_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val16_6_reg_179 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val1520_6_reg_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val26_6_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_6_reg_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val27_6_reg_223 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val28_6_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_245 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_val2_2_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val13_2_reg_268 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val14_2_reg_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val16_2_reg_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val1520_2_reg_304 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val26_2_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val_2_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val27_2_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_val28_2_reg_352 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp31_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp32_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp35_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp38_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp39_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_538_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp37_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp36_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp44_fu_562_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond9_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_598_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel1_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond3_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_623_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp42_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel6_fu_661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel7_fu_668_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel9_fu_684_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel10_fu_692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel12_fu_708_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel14_fu_722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel15_fu_729_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_764_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp45_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp48_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp49_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp50_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp47_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp46_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp29_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp55_fu_851_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel30_fu_875_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond6_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel18_fu_895_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond8_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel19_fu_907_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond11_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel20_fu_914_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel22_fu_935_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel24_fu_950_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel25_fu_957_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel27_fu_972_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel28_fu_979_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel32_fu_994_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel33_fu_1001_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_0_preg assign process. --
    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_0_preg <= result_val_0_0_write_assign_reg_98;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_1_preg assign process. --
    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_1_preg <= result_val_0_1_write_assign_reg_62;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_2_preg assign process. --
    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_2_preg <= result_val_0_2_write_assign_reg_26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_3_preg assign process. --
    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_3_preg <= result_val_1_0_write_assign_reg_38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_4_preg assign process. --
    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_4_preg <= result_val_1_1_write_assign_reg_50;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_5_preg assign process. --
    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_5_preg <= result_val_1_2_write_assign_reg_74;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_6_preg assign process. --
    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_6_preg <= result_val_2_0_write_assign_reg_86;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_7_preg assign process. --
    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_7_preg <= result_val_2_1_write_assign_reg_110;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_8_preg assign process. --
    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
                    ap_return_8_preg <= result_val_2_2_write_assign_reg_122;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_134 assign process. --
    i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond5_fu_752_p2)))) then 
                i_reg_134 <= i_1_reg_1027;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_364 assign process. --
    indvar_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                indvar_reg_364 <= ap_const_lv32_0;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                indvar_reg_364 <= indvar_next_reg_1151;
            end if; 
        end if;
    end process;

    -- j_reg_245 assign process. --
    j_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                j_reg_245 <= ap_const_lv2_0;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                j_reg_245 <= indvar_next4_reg_1062;
            end if; 
        end if;
    end process;

    -- result_val13_2_reg_268 assign process. --
    result_val13_2_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val13_2_reg_268 <= result_val13_6_reg_157;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val13_2_reg_268 <= result_val13_1_reg_1197;
            end if; 
        end if;
    end process;

    -- result_val13_6_reg_157 assign process. --
    result_val13_6_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val13_6_reg_157 <= result_val_1_0_write_assign_reg_38;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val13_6_reg_157 <= result_val13_5_reg_1103;
            end if; 
        end if;
    end process;

    -- result_val14_2_reg_280 assign process. --
    result_val14_2_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val14_2_reg_280 <= result_val14_6_reg_168;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val14_2_reg_280 <= newSel23_fu_942_p3;
            end if; 
        end if;
    end process;

    -- result_val14_6_reg_168 assign process. --
    result_val14_6_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val14_6_reg_168 <= result_val_1_1_write_assign_reg_50;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val14_6_reg_168 <= newSel5_fu_653_p3;
            end if; 
        end if;
    end process;

    -- result_val1520_2_reg_304 assign process. --
    result_val1520_2_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val1520_2_reg_304 <= result_val1520_6_reg_190;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val1520_2_reg_304 <= newSel29_fu_986_p3;
            end if; 
        end if;
    end process;

    -- result_val1520_6_reg_190 assign process. --
    result_val1520_6_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val1520_6_reg_190 <= result_val_1_2_write_assign_reg_74;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val1520_6_reg_190 <= newSel11_fu_700_p3;
            end if; 
        end if;
    end process;

    -- result_val16_2_reg_292 assign process. --
    result_val16_2_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val16_2_reg_292 <= result_val16_6_reg_179;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val16_2_reg_292 <= newSel26_fu_964_p3;
            end if; 
        end if;
    end process;

    -- result_val16_6_reg_179 assign process. --
    result_val16_6_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val16_6_reg_179 <= result_val_0_1_write_assign_reg_62;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val16_6_reg_179 <= newSel8_fu_676_p3;
            end if; 
        end if;
    end process;

    -- result_val26_2_reg_316 assign process. --
    result_val26_2_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val26_2_reg_316 <= result_val26_6_reg_201;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val26_2_reg_316 <= result_val26_1_reg_1202;
            end if; 
        end if;
    end process;

    -- result_val26_6_reg_201 assign process. --
    result_val26_6_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val26_6_reg_201 <= result_val_2_0_write_assign_reg_86;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val26_6_reg_201 <= result_val26_5_reg_1108;
            end if; 
        end if;
    end process;

    -- result_val27_2_reg_340 assign process. --
    result_val27_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val27_2_reg_340 <= result_val27_6_reg_223;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val27_2_reg_340 <= newSel34_fu_1008_p3;
            end if; 
        end if;
    end process;

    -- result_val27_6_reg_223 assign process. --
    result_val27_6_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val27_6_reg_223 <= result_val_2_1_write_assign_reg_110;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val27_6_reg_223 <= newSel16_fu_736_p3;
            end if; 
        end if;
    end process;

    -- result_val28_2_reg_352 assign process. --
    result_val28_2_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val28_2_reg_352 <= result_val28_6_reg_234;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val28_2_reg_352 <= newSel35_fu_1016_p3;
            end if; 
        end if;
    end process;

    -- result_val28_6_reg_234 assign process. --
    result_val28_6_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val28_6_reg_234 <= result_val_2_2_write_assign_reg_122;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val28_6_reg_234 <= newSel17_fu_744_p3;
            end if; 
        end if;
    end process;

    -- result_val2_2_reg_256 assign process. --
    result_val2_2_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val2_2_reg_256 <= result_val2_6_reg_146;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val2_2_reg_256 <= newSel21_fu_927_p3;
            end if; 
        end if;
    end process;

    -- result_val2_6_reg_146 assign process. --
    result_val2_6_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val2_6_reg_146 <= result_val_0_2_write_assign_reg_26;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val2_6_reg_146 <= newSel3_fu_637_p3;
            end if; 
        end if;
    end process;

    -- result_val_2_reg_328 assign process. --
    result_val_2_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_476_p2)))) then 
                result_val_2_reg_328 <= result_val_6_reg_212;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                result_val_2_reg_328 <= newSel31_reg_1207;
            end if; 
        end if;
    end process;

    -- result_val_6_reg_212 assign process. --
    result_val_6_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then 
                result_val_6_reg_212 <= result_val_0_0_write_assign_reg_98;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                result_val_6_reg_212 <= newSel13_fu_715_p3;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_1_reg_1027 <= i_1_fu_386_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                indvar_next4_reg_1062 <= indvar_next4_fu_482_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                indvar_next_reg_1151 <= indvar_next_fu_758_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_fu_752_p2))) then
                newSel31_reg_1207 <= newSel31_fu_883_p3;
                or_cond10_reg_1192 <= or_cond10_fu_845_p2;
                or_cond5_reg_1179 <= or_cond5_fu_828_p2;
                or_cond7_reg_1185 <= or_cond7_fu_840_p2;
                result_val13_1_reg_1197 <= result_val13_1_fu_859_p3;
                result_val26_1_reg_1202 <= result_val26_1_fu_867_p3;
                sel_tmp51_reg_1156 <= sel_tmp51_fu_808_p2;
                sel_tmp52_reg_1162 <= sel_tmp52_fu_813_p2;
                sel_tmp53_reg_1168 <= sel_tmp53_fu_818_p2;
                sel_tmp54_reg_1173 <= sel_tmp54_fu_823_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_476_p2))) then
                or_cond_reg_1090 <= or_cond_fu_550_p2;
                result_val13_5_reg_1103 <= result_val13_5_fu_570_p3;
                result_val26_5_reg_1108 <= result_val26_5_fu_578_p3;
                sel_tmp40_reg_1067 <= sel_tmp40_fu_522_p2;
                sel_tmp41_reg_1072 <= sel_tmp41_fu_528_p2;
                sel_tmp43_reg_1078 <= sel_tmp43_fu_533_p2;
                tmp4_reg_1097 <= tmp4_fu_556_p2;
                tmp_97_reg_1083 <= tmp_97_fu_544_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond5_fu_752_p2)))) then
                result_val_0_0_write_assign_reg_98 <= result_val_2_reg_328;
                result_val_0_1_write_assign_reg_62 <= result_val16_2_reg_292;
                result_val_0_2_write_assign_reg_26 <= result_val2_2_reg_256;
                result_val_1_0_write_assign_reg_38 <= result_val13_2_reg_268;
                result_val_1_1_write_assign_reg_50 <= result_val14_2_reg_280;
                result_val_1_2_write_assign_reg_74 <= result_val1520_2_reg_304;
                result_val_2_0_write_assign_reg_86 <= result_val26_2_reg_316;
                result_val_2_1_write_assign_reg_110 <= result_val27_2_reg_340;
                result_val_2_2_write_assign_reg_122 <= result_val28_2_reg_352;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_380_p2 = ap_const_lv1_0))) then
                sel_tmp33_reg_1043 <= sel_tmp33_fu_410_p2;
                sel_tmp34_reg_1051 <= sel_tmp34_fu_416_p2;
                sel_tmp_reg_1032 <= sel_tmp_fu_392_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond1_fu_380_p2 , exitcond_fu_476_p2 , exitcond5_fu_752_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_380_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_476_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond5_fu_752_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond1_fu_380_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return_0 assign process. --
    ap_return_0_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_0_0_write_assign_reg_98, ap_return_0_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_0 <= result_val_0_0_write_assign_reg_98;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    -- ap_return_1 assign process. --
    ap_return_1_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_0_1_write_assign_reg_62, ap_return_1_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_1 <= result_val_0_1_write_assign_reg_62;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    -- ap_return_2 assign process. --
    ap_return_2_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_0_2_write_assign_reg_26, ap_return_2_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_2 <= result_val_0_2_write_assign_reg_26;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    -- ap_return_3 assign process. --
    ap_return_3_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_1_0_write_assign_reg_38, ap_return_3_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_3 <= result_val_1_0_write_assign_reg_38;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    -- ap_return_4 assign process. --
    ap_return_4_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_1_1_write_assign_reg_50, ap_return_4_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_4 <= result_val_1_1_write_assign_reg_50;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    -- ap_return_5 assign process. --
    ap_return_5_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_1_2_write_assign_reg_74, ap_return_5_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_5 <= result_val_1_2_write_assign_reg_74;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    -- ap_return_6 assign process. --
    ap_return_6_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_2_0_write_assign_reg_86, ap_return_6_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_6 <= result_val_2_0_write_assign_reg_86;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    -- ap_return_7 assign process. --
    ap_return_7_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_2_1_write_assign_reg_110, ap_return_7_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_7 <= result_val_2_1_write_assign_reg_110;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    -- ap_return_8 assign process. --
    ap_return_8_assign_proc : process(ap_CS_fsm, exitcond1_fu_380_p2, result_val_2_2_write_assign_reg_122, ap_return_8_preg)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_380_p2 = ap_const_lv1_0)))) then 
            ap_return_8 <= result_val_2_2_write_assign_reg_122;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;

    exitcond1_fu_380_p2 <= "1" when (i_reg_134 = ap_const_lv2_3) else "0";
    exitcond5_fu_752_p2 <= "1" when (indvar_reg_364 = ap_const_lv32_0) else "0";
    exitcond_fu_476_p2 <= "1" when (j_reg_245 = ap_const_lv2_3) else "0";
    grp_fu_376_p2 <= (sel_tmp_reg_1032 or sel_tmp34_reg_1051);
    i_1_fu_386_p2 <= std_logic_vector(unsigned(i_reg_134) + unsigned(ap_const_lv2_1));
    indvar_next4_fu_482_p2 <= std_logic_vector(unsigned(j_reg_245) + unsigned(ap_const_lv2_1));
    indvar_next_fu_758_p2 <= std_logic_vector(unsigned(indvar_reg_364) + unsigned(ap_const_lv32_1));
    newSel10_fu_692_p3 <= 
        newSel9_fu_684_p3 when (or_cond1_fu_594_p2(0) = '1') else 
        result_val1520_6_reg_190;
    newSel11_fu_700_p3 <= 
        result_val1520_6_reg_190 when (or_cond2_fu_605_p2(0) = '1') else 
        newSel10_fu_692_p3;
    newSel12_fu_708_p3 <= 
        ap_const_lv8_1 when (tmp_97_reg_1083(0) = '1') else 
        result_val_6_reg_212;
    newSel13_fu_715_p3 <= 
        result_val_6_reg_212 when (or_cond_reg_1090(0) = '1') else 
        newSel12_fu_708_p3;
    newSel14_fu_722_p3 <= 
        result_val27_6_reg_223 when (tmp_97_reg_1083(0) = '1') else 
        ap_const_lv8_1;
    newSel15_fu_729_p3 <= 
        result_val27_6_reg_223 when (or_cond_reg_1090(0) = '1') else 
        newSel14_fu_722_p3;
    newSel16_fu_736_p3 <= 
        newSel15_fu_729_p3 when (or_cond2_fu_605_p2(0) = '1') else 
        result_val27_6_reg_223;
    newSel17_fu_744_p3 <= 
        result_val28_6_reg_234 when (or_cond4_fu_631_p2(0) = '1') else 
        ap_const_lv8_1;
    newSel18_fu_895_p3 <= 
        result_val2_2_reg_256 when (sel_tmp51_reg_1156(0) = '1') else 
        ap_const_lv8_0;
    newSel19_fu_907_p3 <= 
        result_val2_2_reg_256 when (or_cond7_reg_1185(0) = '1') else 
        newSel18_fu_895_p3;
    newSel1_fu_610_p3 <= 
        result_val2_6_reg_146 when (or_cond1_fu_594_p2(0) = '1') else 
        newSel_fu_598_p3;
    newSel20_fu_914_p3 <= 
        result_val2_2_reg_256 when (or_cond8_fu_902_p2(0) = '1') else 
        newSel19_fu_907_p3;
    newSel21_fu_927_p3 <= 
        newSel20_fu_914_p3 when (or_cond11_fu_922_p2(0) = '1') else 
        result_val2_2_reg_256;
    newSel22_fu_935_p3 <= 
        ap_const_lv8_0 when (sel_tmp52_reg_1162(0) = '1') else 
        result_val14_2_reg_280;
    newSel23_fu_942_p3 <= 
        result_val14_2_reg_280 when (or_cond8_fu_902_p2(0) = '1') else 
        newSel22_fu_935_p3;
    newSel24_fu_950_p3 <= 
        ap_const_lv8_0 when (sel_tmp51_reg_1156(0) = '1') else 
        result_val16_2_reg_292;
    newSel25_fu_957_p3 <= 
        result_val16_2_reg_292 when (or_cond7_reg_1185(0) = '1') else 
        newSel24_fu_950_p3;
    newSel26_fu_964_p3 <= 
        result_val16_2_reg_292 when (or_cond8_fu_902_p2(0) = '1') else 
        newSel25_fu_957_p3;
    newSel27_fu_972_p3 <= 
        result_val1520_2_reg_304 when (sel_tmp52_reg_1162(0) = '1') else 
        ap_const_lv8_0;
    newSel28_fu_979_p3 <= 
        newSel27_fu_972_p3 when (or_cond7_reg_1185(0) = '1') else 
        result_val1520_2_reg_304;
    newSel29_fu_986_p3 <= 
        result_val1520_2_reg_304 when (or_cond8_fu_902_p2(0) = '1') else 
        newSel28_fu_979_p3;
    newSel2_fu_623_p3 <= 
        result_val2_6_reg_146 when (or_cond2_fu_605_p2(0) = '1') else 
        newSel1_fu_610_p3;
    newSel30_fu_875_p3 <= 
        ap_const_lv8_0 when (sel_tmp54_fu_823_p2(0) = '1') else 
        result_val_2_reg_328;
    newSel31_fu_883_p3 <= 
        result_val_2_reg_328 when (or_cond5_fu_828_p2(0) = '1') else 
        newSel30_fu_875_p3;
    newSel32_fu_994_p3 <= 
        result_val27_2_reg_340 when (sel_tmp54_reg_1173(0) = '1') else 
        ap_const_lv8_0;
    newSel33_fu_1001_p3 <= 
        result_val27_2_reg_340 when (or_cond5_reg_1179(0) = '1') else 
        newSel32_fu_994_p3;
    newSel34_fu_1008_p3 <= 
        newSel33_fu_1001_p3 when (or_cond8_fu_902_p2(0) = '1') else 
        result_val27_2_reg_340;
    newSel35_fu_1016_p3 <= 
        result_val28_2_reg_352 when (or_cond11_fu_922_p2(0) = '1') else 
        ap_const_lv8_0;
    newSel3_fu_637_p3 <= 
        newSel2_fu_623_p3 when (or_cond4_fu_631_p2(0) = '1') else 
        result_val2_6_reg_146;
    newSel4_fu_645_p3 <= 
        ap_const_lv8_1 when (sel_tmp42_fu_586_p2(0) = '1') else 
        result_val14_6_reg_168;
    newSel5_fu_653_p3 <= 
        result_val14_6_reg_168 when (or_cond2_fu_605_p2(0) = '1') else 
        newSel4_fu_645_p3;
    newSel6_fu_661_p3 <= 
        ap_const_lv8_1 when (sel_tmp41_reg_1072(0) = '1') else 
        result_val16_6_reg_179;
    newSel7_fu_668_p3 <= 
        result_val16_6_reg_179 when (or_cond1_fu_594_p2(0) = '1') else 
        newSel6_fu_661_p3;
    newSel8_fu_676_p3 <= 
        result_val16_6_reg_179 when (or_cond2_fu_605_p2(0) = '1') else 
        newSel7_fu_668_p3;
    newSel9_fu_684_p3 <= 
        result_val1520_6_reg_190 when (sel_tmp42_fu_586_p2(0) = '1') else 
        ap_const_lv8_1;
    newSel_fu_598_p3 <= 
        result_val2_6_reg_146 when (sel_tmp41_reg_1072(0) = '1') else 
        ap_const_lv8_1;
    or_cond10_fu_845_p2 <= (tmp6_fu_834_p2 and grp_fu_376_p2);
    or_cond11_fu_922_p2 <= (or_cond8_fu_902_p2 or or_cond10_reg_1192);
    or_cond1_fu_594_p2 <= (sel_tmp_reg_1032 and tmp4_reg_1097);
    or_cond2_fu_605_p2 <= (or_cond_reg_1090 or or_cond9_fu_590_p2);
    or_cond3_fu_618_p2 <= (tmp4_reg_1097 and grp_fu_376_p2);
    or_cond4_fu_631_p2 <= (or_cond2_fu_605_p2 or or_cond3_fu_618_p2);
    or_cond5_fu_828_p2 <= (sel_tmp47_fu_779_p2 or sel_tmp46_fu_774_p2);
    or_cond6_fu_891_p2 <= (sel_tmp54_reg_1173 or sel_tmp53_reg_1168);
    or_cond7_fu_840_p2 <= (sel_tmp_reg_1032 and tmp6_fu_834_p2);
    or_cond8_fu_902_p2 <= (or_cond5_reg_1179 or or_cond6_fu_891_p2);
    or_cond9_fu_590_p2 <= (tmp_97_reg_1083 or sel_tmp43_reg_1078);
    or_cond_fu_550_p2 <= (sel_tmp37_fu_499_p2 or sel_tmp36_fu_494_p2);
    result_val13_1_fu_859_p3 <= 
        result_val13_2_reg_268 when (sel_tmp47_fu_779_p2(0) = '1') else 
        sel_tmp55_fu_851_p3;
    result_val13_5_fu_570_p3 <= 
        result_val13_6_reg_157 when (sel_tmp37_fu_499_p2(0) = '1') else 
        sel_tmp44_fu_562_p3;
    result_val26_1_fu_867_p3 <= 
        ap_const_lv8_0 when (sel_tmp47_fu_779_p2(0) = '1') else 
        result_val26_2_reg_316;
    result_val26_5_fu_578_p3 <= 
        ap_const_lv8_1 when (sel_tmp37_fu_499_p2(0) = '1') else 
        result_val26_6_reg_201;
    sel_tmp31_fu_398_p2 <= "0" when (i_reg_134 = ap_const_lv2_0) else "1";
    sel_tmp32_fu_404_p2 <= "0" when (i_reg_134 = ap_const_lv2_1) else "1";
    sel_tmp33_fu_410_p2 <= (sel_tmp31_fu_398_p2 and sel_tmp32_fu_404_p2);
    sel_tmp34_fu_416_p2 <= "1" when (i_reg_134 = ap_const_lv2_0) else "0";
    sel_tmp35_fu_488_p2 <= "1" when (j_reg_245 = ap_const_lv2_0) else "0";
    sel_tmp36_fu_494_p2 <= (sel_tmp_reg_1032 and sel_tmp35_fu_488_p2);
    sel_tmp37_fu_499_p2 <= (sel_tmp33_reg_1043 and sel_tmp35_fu_488_p2);
    sel_tmp38_fu_504_p2 <= "0" when (j_reg_245 = ap_const_lv2_0) else "1";
    sel_tmp39_fu_510_p2 <= "0" when (j_reg_245 = ap_const_lv2_1) else "1";
    sel_tmp40_fu_522_p2 <= "1" when (j_reg_245 = ap_const_lv2_1) else "0";
    sel_tmp41_fu_528_p2 <= (sel_tmp34_reg_1051 and sel_tmp40_fu_522_p2);
    sel_tmp42_fu_586_p2 <= (sel_tmp_reg_1032 and sel_tmp40_reg_1067);
    sel_tmp43_fu_533_p2 <= (sel_tmp33_reg_1043 and sel_tmp40_fu_522_p2);
    sel_tmp44_fu_562_p3 <= 
        ap_const_lv8_1 when (sel_tmp36_fu_494_p2(0) = '1') else 
        result_val13_6_reg_157;
    sel_tmp45_fu_768_p2 <= "1" when (tmp_fu_764_p1 = ap_const_lv2_1) else "0";
    sel_tmp46_fu_774_p2 <= (sel_tmp_reg_1032 and sel_tmp45_fu_768_p2);
    sel_tmp47_fu_779_p2 <= (sel_tmp33_reg_1043 and sel_tmp45_fu_768_p2);
    sel_tmp48_fu_784_p2 <= "0" when (tmp_fu_764_p1 = ap_const_lv2_1) else "1";
    sel_tmp49_fu_790_p2 <= "0" when (tmp_fu_764_p1 = ap_const_lv2_2) else "1";
    sel_tmp50_fu_802_p2 <= "1" when (tmp_fu_764_p1 = ap_const_lv2_2) else "0";
    sel_tmp51_fu_808_p2 <= (sel_tmp34_reg_1051 and sel_tmp50_fu_802_p2);
    sel_tmp52_fu_813_p2 <= (sel_tmp_reg_1032 and sel_tmp50_fu_802_p2);
    sel_tmp53_fu_818_p2 <= (sel_tmp33_reg_1043 and sel_tmp50_fu_802_p2);
    sel_tmp54_fu_823_p2 <= (sel_tmp34_reg_1051 and sel_tmp45_fu_768_p2);
    sel_tmp55_fu_851_p3 <= 
        ap_const_lv8_0 when (sel_tmp46_fu_774_p2(0) = '1') else 
        result_val13_2_reg_268;
    sel_tmp_fu_392_p2 <= "1" when (i_reg_134 = ap_const_lv2_1) else "0";
    tmp1_fu_516_p2 <= (sel_tmp38_fu_504_p2 and sel_tmp39_fu_510_p2);
    tmp29_fu_796_p2 <= (sel_tmp48_fu_784_p2 and sel_tmp49_fu_790_p2);
    tmp4_fu_556_p2 <= (tmp1_fu_516_p2 or sel_tmp40_fu_522_p2);
    tmp6_fu_834_p2 <= (tmp29_fu_796_p2 or sel_tmp50_fu_802_p2);
    tmp_97_fu_544_p2 <= "1" when (tmp_s_fu_538_p2 = ap_const_lv2_0) else "0";
    tmp_fu_764_p1 <= indvar_reg_364(2 - 1 downto 0);
    tmp_s_fu_538_p2 <= (i_reg_134 or j_reg_245);
end behav;
