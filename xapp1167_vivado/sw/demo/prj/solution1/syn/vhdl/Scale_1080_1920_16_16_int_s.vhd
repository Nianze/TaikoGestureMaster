-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Scale_1080_1920_16_16_int_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    dst_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of Scale_1080_1920_16_16_int_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_V_6_reg_148 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_58 : BOOLEAN;
    signal i_V_fu_165_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_264 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond4_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_91 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal j_V_fu_176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_137 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_152_fu_188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_fu_211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_205_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_156_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_160_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_fu_171_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_fu_171_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_160_p2)) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_fu_171_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- t_V_6_reg_148 assign process. --
    t_V_6_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_fu_171_p2 = ap_const_lv1_0))) then 
                t_V_6_reg_148 <= j_V_fu_176_p2;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_160_p2))) then 
                t_V_6_reg_148 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- t_V_reg_137 assign process. --
    t_V_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_58))) then 
                t_V_reg_137 <= ap_const_lv12_0;
            elsif ((ap_ST_st5_fsm_3 = ap_CS_fsm)) then 
                t_V_reg_137 <= i_V_reg_264;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond4_reg_269 <= exitcond4_fu_171_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_V_reg_264 <= i_V_fu_165_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_58 , exitcond4_fu_171_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_91 , ap_reg_ppiten_pp0_it1 , exitcond_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_58)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_fu_160_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_fu_171_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_fu_171_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond_fu_160_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_160_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_160_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_160_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_58 assign process. --
    ap_sig_bdd_58_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_58 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, exitcond4_reg_269)
    begin
                ap_sig_bdd_91 <= (((src_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond4_reg_269 = ap_const_lv1_0)) or ((exitcond4_reg_269 = ap_const_lv1_0) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond4_reg_269 = ap_const_lv1_0) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond4_reg_269 = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)) or ((exitcond4_reg_269 = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond4_reg_269 = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;

    dst_data_stream_0_V_din <= 
        ap_const_lv8_FF when (tmp_152_fu_188_p3(0) = '1') else 
        tmp_fu_182_p2;

    -- dst_data_stream_0_V_write assign process. --
    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, exitcond4_reg_269, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond4_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        ap_const_lv8_FF when (tmp_154_fu_211_p3(0) = '1') else 
        tmp_153_fu_205_p2;

    -- dst_data_stream_1_V_write assign process. --
    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, exitcond4_reg_269, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond4_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        ap_const_lv8_FF when (tmp_156_fu_234_p3(0) = '1') else 
        tmp_155_fu_228_p2;

    -- dst_data_stream_2_V_write assign process. --
    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, exitcond4_reg_269, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond4_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_171_p2 <= "1" when (t_V_6_reg_148 = dst_cols_V_read) else "0";
    exitcond_fu_160_p2 <= "1" when (t_V_reg_137 = dst_rows_V_read) else "0";
    i_V_fu_165_p2 <= std_logic_vector(unsigned(t_V_reg_137) + unsigned(ap_const_lv12_1));
    j_V_fu_176_p2 <= std_logic_vector(unsigned(t_V_6_reg_148) + unsigned(ap_const_lv12_1));

    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, exitcond4_reg_269, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond4_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_1_V_read assign process. --
    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm, exitcond4_reg_269, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond4_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_2_V_read assign process. --
    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm, exitcond4_reg_269, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond4_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_91 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_152_fu_188_p3 <= src_data_stream_0_V_dout(7 downto 7);
    tmp_153_fu_205_p2 <= std_logic_vector(shift_left(unsigned(src_data_stream_1_V_dout),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_154_fu_211_p3 <= src_data_stream_1_V_dout(7 downto 7);
    tmp_155_fu_228_p2 <= std_logic_vector(shift_left(unsigned(src_data_stream_2_V_dout),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_156_fu_234_p3 <= src_data_stream_2_V_dout(7 downto 7);
    tmp_fu_182_p2 <= std_logic_vector(shift_left(unsigned(src_data_stream_0_V_dout),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
end behav;
