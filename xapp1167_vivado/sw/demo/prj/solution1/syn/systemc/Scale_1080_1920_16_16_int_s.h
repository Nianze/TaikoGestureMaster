// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Scale_1080_1920_16_16_int_s_HH_
#define _Scale_1080_1920_16_16_int_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Scale_1080_1920_16_16_int_s : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > src_rows_V_read;
    sc_in< sc_lv<12> > src_cols_V_read;
    sc_in< sc_lv<8> > src_data_stream_0_V_dout;
    sc_in< sc_logic > src_data_stream_0_V_empty_n;
    sc_out< sc_logic > src_data_stream_0_V_read;
    sc_in< sc_lv<8> > src_data_stream_1_V_dout;
    sc_in< sc_logic > src_data_stream_1_V_empty_n;
    sc_out< sc_logic > src_data_stream_1_V_read;
    sc_in< sc_lv<8> > src_data_stream_2_V_dout;
    sc_in< sc_logic > src_data_stream_2_V_empty_n;
    sc_out< sc_logic > src_data_stream_2_V_read;
    sc_in< sc_lv<12> > dst_rows_V_read;
    sc_in< sc_lv<12> > dst_cols_V_read;
    sc_out< sc_lv<8> > dst_data_stream_0_V_din;
    sc_in< sc_logic > dst_data_stream_0_V_full_n;
    sc_out< sc_logic > dst_data_stream_0_V_write;
    sc_out< sc_lv<8> > dst_data_stream_1_V_din;
    sc_in< sc_logic > dst_data_stream_1_V_full_n;
    sc_out< sc_logic > dst_data_stream_1_V_write;
    sc_out< sc_lv<8> > dst_data_stream_2_V_din;
    sc_in< sc_logic > dst_data_stream_2_V_full_n;
    sc_out< sc_logic > dst_data_stream_2_V_write;


    // Module declarations
    Scale_1080_1920_16_16_int_s(sc_module_name name);
    SC_HAS_PROCESS(Scale_1080_1920_16_16_int_s);

    ~Scale_1080_1920_16_16_int_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<12> > t_V_6_reg_148;
    sc_signal< bool > ap_sig_bdd_58;
    sc_signal< sc_lv<12> > i_V_fu_165_p2;
    sc_signal< sc_lv<12> > i_V_reg_264;
    sc_signal< sc_lv<1> > exitcond4_fu_171_p2;
    sc_signal< sc_lv<1> > exitcond4_reg_269;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_91;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<12> > j_V_fu_176_p2;
    sc_signal< sc_lv<1> > exitcond_fu_160_p2;
    sc_signal< sc_lv<12> > t_V_reg_137;
    sc_signal< sc_lv<1> > tmp_152_fu_188_p3;
    sc_signal< sc_lv<8> > tmp_fu_182_p2;
    sc_signal< sc_lv<1> > tmp_154_fu_211_p3;
    sc_signal< sc_lv<8> > tmp_153_fu_205_p2;
    sc_signal< sc_lv<1> > tmp_156_fu_234_p3;
    sc_signal< sc_lv<8> > tmp_155_fu_228_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<2> ap_ST_st5_fsm_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_58();
    void thread_ap_sig_bdd_91();
    void thread_dst_data_stream_0_V_din();
    void thread_dst_data_stream_0_V_write();
    void thread_dst_data_stream_1_V_din();
    void thread_dst_data_stream_1_V_write();
    void thread_dst_data_stream_2_V_din();
    void thread_dst_data_stream_2_V_write();
    void thread_exitcond4_fu_171_p2();
    void thread_exitcond_fu_160_p2();
    void thread_i_V_fu_165_p2();
    void thread_j_V_fu_176_p2();
    void thread_src_data_stream_0_V_read();
    void thread_src_data_stream_1_V_read();
    void thread_src_data_stream_2_V_read();
    void thread_tmp_152_fu_188_p3();
    void thread_tmp_153_fu_205_p2();
    void thread_tmp_154_fu_211_p3();
    void thread_tmp_155_fu_228_p2();
    void thread_tmp_156_fu_234_p3();
    void thread_tmp_fu_182_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
