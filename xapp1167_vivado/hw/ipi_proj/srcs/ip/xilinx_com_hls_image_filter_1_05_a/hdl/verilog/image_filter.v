// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="image_filter,hls_ip_2013_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.666670,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.830000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=59,HLS_SYN_DSP=3,HLS_SYN_FF=4685,HLS_SYN_LUT=10082}" *)

module image_filter (
        input_V_data_V_dout,
        input_V_data_V_empty_n,
        input_V_data_V_read,
        input_V_keep_V_dout,
        input_V_keep_V_empty_n,
        input_V_keep_V_read,
        input_V_strb_V_dout,
        input_V_strb_V_empty_n,
        input_V_strb_V_read,
        input_V_user_V_dout,
        input_V_user_V_empty_n,
        input_V_user_V_read,
        input_V_last_V_dout,
        input_V_last_V_empty_n,
        input_V_last_V_read,
        input_V_id_V_dout,
        input_V_id_V_empty_n,
        input_V_id_V_read,
        input_V_dest_V_dout,
        input_V_dest_V_empty_n,
        input_V_dest_V_read,
        output_V_data_V_din,
        output_V_data_V_full_n,
        output_V_data_V_write,
        output_V_keep_V_din,
        output_V_keep_V_full_n,
        output_V_keep_V_write,
        output_V_strb_V_din,
        output_V_strb_V_full_n,
        output_V_strb_V_write,
        output_V_user_V_din,
        output_V_user_V_full_n,
        output_V_user_V_write,
        output_V_last_V_din,
        output_V_last_V_full_n,
        output_V_last_V_write,
        output_V_id_V_din,
        output_V_id_V_full_n,
        output_V_id_V_write,
        output_V_dest_V_din,
        output_V_dest_V_full_n,
        output_V_dest_V_write,
        rows,
        cols,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

input  [31:0] input_V_data_V_dout;
input   input_V_data_V_empty_n;
output   input_V_data_V_read;
input  [3:0] input_V_keep_V_dout;
input   input_V_keep_V_empty_n;
output   input_V_keep_V_read;
input  [3:0] input_V_strb_V_dout;
input   input_V_strb_V_empty_n;
output   input_V_strb_V_read;
input  [0:0] input_V_user_V_dout;
input   input_V_user_V_empty_n;
output   input_V_user_V_read;
input  [0:0] input_V_last_V_dout;
input   input_V_last_V_empty_n;
output   input_V_last_V_read;
input  [0:0] input_V_id_V_dout;
input   input_V_id_V_empty_n;
output   input_V_id_V_read;
input  [0:0] input_V_dest_V_dout;
input   input_V_dest_V_empty_n;
output   input_V_dest_V_read;
output  [31:0] output_V_data_V_din;
input   output_V_data_V_full_n;
output   output_V_data_V_write;
output  [3:0] output_V_keep_V_din;
input   output_V_keep_V_full_n;
output   output_V_keep_V_write;
output  [3:0] output_V_strb_V_din;
input   output_V_strb_V_full_n;
output   output_V_strb_V_write;
output  [0:0] output_V_user_V_din;
input   output_V_user_V_full_n;
output   output_V_user_V_write;
output  [0:0] output_V_last_V_din;
input   output_V_last_V_full_n;
output   output_V_last_V_write;
output  [0:0] output_V_id_V_din;
input   output_V_id_V_full_n;
output   output_V_id_V_write;
output  [0:0] output_V_dest_V_din;
input   output_V_dest_V_full_n;
output   output_V_dest_V_write;
input  [31:0] rows;
input  [31:0] cols;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    init_U0_ap_start;
wire    init_U0_ap_done;
reg    init_U0_ap_continue;
wire    init_U0_ap_idle;
wire    init_U0_ap_ready;
wire   [31:0] init_U0_p_rows;
wire   [31:0] init_U0_p_cols;
wire   [11:0] init_U0_ap_return_0;
wire   [11:0] init_U0_ap_return_1;
wire   [11:0] init_U0_ap_return_2;
wire   [11:0] init_U0_ap_return_3;
reg    ap_chn_write_init_U0_p_src_rows_V;
wire    p_src_rows_V_full_n;
reg    ap_reg_ready_p_src_rows_V_full_n = 1'b0;
reg    ap_sig_ready_p_src_rows_V_full_n;
reg    ap_chn_write_init_U0_p_src_rows_V_channel;
wire    p_src_rows_V_channel_full_n;
reg    ap_reg_ready_p_src_rows_V_channel_full_n = 1'b0;
reg    ap_sig_ready_p_src_rows_V_channel_full_n;
reg    ap_chn_write_init_U0_p_src_cols_V;
wire    p_src_cols_V_full_n;
reg    ap_reg_ready_p_src_cols_V_full_n = 1'b0;
reg    ap_sig_ready_p_src_cols_V_full_n;
reg    ap_chn_write_init_U0_p_src_cols_V_channel;
wire    p_src_cols_V_channel_full_n;
reg    ap_reg_ready_p_src_cols_V_channel_full_n = 1'b0;
reg    ap_sig_ready_p_src_cols_V_channel_full_n;
wire    init_1_U0_ap_start;
wire    init_1_U0_ap_done;
reg    init_1_U0_ap_continue;
wire    init_1_U0_ap_idle;
wire    init_1_U0_ap_ready;
wire   [31:0] init_1_U0_p_rows;
wire   [31:0] init_1_U0_p_cols;
wire   [11:0] init_1_U0_ap_return_0;
wire   [11:0] init_1_U0_ap_return_1;
wire   [11:0] init_1_U0_ap_return_2;
wire   [11:0] init_1_U0_ap_return_3;
reg    ap_chn_write_init_1_U0_p_dst_rows_V;
wire    p_dst_rows_V_full_n;
reg    ap_reg_ready_p_dst_rows_V_full_n = 1'b0;
reg    ap_sig_ready_p_dst_rows_V_full_n;
reg    ap_chn_write_init_1_U0_p_dst_rows_V_channel;
wire    p_dst_rows_V_channel_full_n;
reg    ap_reg_ready_p_dst_rows_V_channel_full_n = 1'b0;
reg    ap_sig_ready_p_dst_rows_V_channel_full_n;
reg    ap_chn_write_init_1_U0_p_dst_cols_V;
wire    p_dst_cols_V_full_n;
reg    ap_reg_ready_p_dst_cols_V_full_n = 1'b0;
reg    ap_sig_ready_p_dst_cols_V_full_n;
reg    ap_chn_write_init_1_U0_p_dst_cols_V_channel;
wire    p_dst_cols_V_channel_full_n;
reg    ap_reg_ready_p_dst_cols_V_channel_full_n = 1'b0;
reg    ap_sig_ready_p_dst_cols_V_channel_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_start;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_done;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_continue;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_idle;
wire    AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
wire   [31:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read;
wire   [3:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read;
wire   [3:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read;
wire   [0:0] AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read;
wire   [11:0] AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read;
wire   [11:0] AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read;
wire   [7:0] AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write;
wire   [7:0] AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write;
wire   [7:0] AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n;
wire    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write;
wire    init_2_U0_ap_start;
wire    init_2_U0_ap_done;
reg    init_2_U0_ap_continue;
wire    init_2_U0_ap_idle;
wire    init_2_U0_ap_ready;
wire   [31:0] init_2_U0_p_rows;
wire   [31:0] init_2_U0_p_cols;
wire   [11:0] init_2_U0_ap_return_0;
wire   [11:0] init_2_U0_ap_return_1;
wire   [11:0] init_2_U0_ap_return_2;
wire   [11:0] init_2_U0_ap_return_3;
reg    ap_chn_write_init_2_U0_src0_rows_V;
wire    src0_rows_V_full_n;
reg    ap_reg_ready_src0_rows_V_full_n = 1'b0;
reg    ap_sig_ready_src0_rows_V_full_n;
reg    ap_chn_write_init_2_U0_src0_rows_V_channel;
wire    src0_rows_V_channel_full_n;
reg    ap_reg_ready_src0_rows_V_channel_full_n = 1'b0;
reg    ap_sig_ready_src0_rows_V_channel_full_n;
reg    ap_chn_write_init_2_U0_src0_cols_V;
wire    src0_cols_V_full_n;
reg    ap_reg_ready_src0_cols_V_full_n = 1'b0;
reg    ap_sig_ready_src0_cols_V_full_n;
reg    ap_chn_write_init_2_U0_src0_cols_V_channel;
wire    src0_cols_V_channel_full_n;
reg    ap_reg_ready_src0_cols_V_channel_full_n = 1'b0;
reg    ap_sig_ready_src0_cols_V_channel_full_n;
wire    init_3_U0_ap_start;
wire    init_3_U0_ap_done;
reg    init_3_U0_ap_continue;
wire    init_3_U0_ap_idle;
wire    init_3_U0_ap_ready;
wire   [31:0] init_3_U0_p_rows;
wire   [31:0] init_3_U0_p_cols;
wire   [11:0] init_3_U0_ap_return_0;
wire   [11:0] init_3_U0_ap_return_1;
wire   [11:0] init_3_U0_ap_return_2;
wire   [11:0] init_3_U0_ap_return_3;
reg    ap_chn_write_init_3_U0_src1_rows_V;
wire    src1_rows_V_full_n;
reg    ap_reg_ready_src1_rows_V_full_n = 1'b0;
reg    ap_sig_ready_src1_rows_V_full_n;
reg    ap_chn_write_init_3_U0_src1_rows_V_channel;
wire    src1_rows_V_channel_full_n;
reg    ap_reg_ready_src1_rows_V_channel_full_n = 1'b0;
reg    ap_sig_ready_src1_rows_V_channel_full_n;
reg    ap_chn_write_init_3_U0_src1_cols_V;
wire    src1_cols_V_full_n;
reg    ap_reg_ready_src1_cols_V_full_n = 1'b0;
reg    ap_sig_ready_src1_cols_V_full_n;
reg    ap_chn_write_init_3_U0_src1_cols_V_channel;
wire    src1_cols_V_channel_full_n;
reg    ap_reg_ready_src1_cols_V_channel_full_n = 1'b0;
reg    ap_sig_ready_src1_cols_V_channel_full_n;
wire    init_4_U0_ap_start;
wire    init_4_U0_ap_done;
reg    init_4_U0_ap_continue;
wire    init_4_U0_ap_idle;
wire    init_4_U0_ap_ready;
wire   [31:0] init_4_U0_p_rows;
wire   [31:0] init_4_U0_p_cols;
wire   [11:0] init_4_U0_ap_return_0;
wire   [11:0] init_4_U0_ap_return_1;
reg    ap_chn_write_init_4_U0_mask_rows_V;
wire    mask_rows_V_full_n;
reg    ap_reg_ready_mask_rows_V_full_n = 1'b0;
reg    ap_sig_ready_mask_rows_V_full_n;
reg    ap_chn_write_init_4_U0_mask_cols_V;
wire    mask_cols_V_full_n;
reg    ap_reg_ready_mask_cols_V_full_n = 1'b0;
reg    ap_sig_ready_mask_cols_V_full_n;
wire    init_1_1_U0_ap_start;
wire    init_1_1_U0_ap_done;
reg    init_1_1_U0_ap_continue;
wire    init_1_1_U0_ap_idle;
wire    init_1_1_U0_ap_ready;
wire   [31:0] init_1_1_U0_p_rows;
wire   [31:0] init_1_1_U0_p_cols;
wire   [11:0] init_1_1_U0_ap_return_0;
wire   [11:0] init_1_1_U0_ap_return_1;
reg    ap_chn_write_init_1_1_U0_dmask_rows_V;
wire    dmask_rows_V_full_n;
reg    ap_reg_ready_dmask_rows_V_full_n = 1'b0;
reg    ap_sig_ready_dmask_rows_V_full_n;
reg    ap_chn_write_init_1_1_U0_dmask_cols_V;
wire    dmask_cols_V_full_n;
reg    ap_reg_ready_dmask_cols_V_full_n = 1'b0;
reg    ap_sig_ready_dmask_cols_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_ap_start;
wire    Duplicate_1080_1920_16_16_U0_ap_done;
wire    Duplicate_1080_1920_16_16_U0_ap_continue;
wire    Duplicate_1080_1920_16_16_U0_ap_idle;
wire    Duplicate_1080_1920_16_16_U0_ap_ready;
wire   [11:0] Duplicate_1080_1920_16_16_U0_src_rows_V_read;
wire   [11:0] Duplicate_1080_1920_16_16_U0_src_cols_V_read;
wire   [7:0] Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_dout;
wire    Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_empty_n;
wire    Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_read;
wire   [7:0] Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_dout;
wire    Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_empty_n;
wire    Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_read;
wire   [7:0] Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_dout;
wire    Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_empty_n;
wire    Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_read;
wire   [11:0] Duplicate_1080_1920_16_16_U0_dst1_rows_V_read;
wire   [11:0] Duplicate_1080_1920_16_16_U0_dst1_cols_V_read;
wire   [7:0] Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_din;
wire    Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_write;
wire   [7:0] Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_din;
wire    Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_write;
wire   [7:0] Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_din;
wire    Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_write;
wire   [11:0] Duplicate_1080_1920_16_16_U0_dst2_rows_V_read;
wire   [11:0] Duplicate_1080_1920_16_16_U0_dst2_cols_V_read;
wire   [7:0] Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_din;
wire    Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_write;
wire   [7:0] Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_din;
wire    Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_write;
wire   [7:0] Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_din;
wire    Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_full_n;
wire    Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_write;
wire    init_2_1_U0_ap_start;
wire    init_2_1_U0_ap_done;
reg    init_2_1_U0_ap_continue;
wire    init_2_1_U0_ap_idle;
wire    init_2_1_U0_ap_ready;
wire   [31:0] init_2_1_U0_p_rows;
wire   [31:0] init_2_1_U0_p_cols;
wire   [11:0] init_2_1_U0_ap_return_0;
wire   [11:0] init_2_1_U0_ap_return_1;
reg    ap_chn_write_init_2_1_U0_gray_rows_V;
wire    gray_rows_V_full_n;
reg    ap_reg_ready_gray_rows_V_full_n = 1'b0;
reg    ap_sig_ready_gray_rows_V_full_n;
reg    ap_chn_write_init_2_1_U0_gray_cols_V;
wire    gray_cols_V_full_n;
reg    ap_reg_ready_gray_cols_V_full_n = 1'b0;
reg    ap_sig_ready_gray_cols_V_full_n;
wire    CvtColor_1_16_0_1080_1920_U0_ap_start;
wire    CvtColor_1_16_0_1080_1920_U0_ap_done;
wire    CvtColor_1_16_0_1080_1920_U0_ap_continue;
wire    CvtColor_1_16_0_1080_1920_U0_ap_idle;
wire    CvtColor_1_16_0_1080_1920_U0_ap_ready;
wire   [11:0] CvtColor_1_16_0_1080_1920_U0_p_src_rows_V_read;
wire   [11:0] CvtColor_1_16_0_1080_1920_U0_p_src_cols_V_read;
wire   [7:0] CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_dout;
wire    CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_empty_n;
wire    CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_read;
wire   [7:0] CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_dout;
wire    CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_empty_n;
wire    CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_read;
wire   [7:0] CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_dout;
wire    CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_empty_n;
wire    CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_read;
wire   [7:0] CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_din;
wire    CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_full_n;
wire    CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_write;
wire    FAST_t_opr_16_7_0_1080_1920_U0_ap_start;
wire    FAST_t_opr_16_7_0_1080_1920_U0_ap_done;
wire    FAST_t_opr_16_7_0_1080_1920_U0_ap_continue;
wire    FAST_t_opr_16_7_0_1080_1920_U0_ap_idle;
wire    FAST_t_opr_16_7_0_1080_1920_U0_ap_ready;
wire   [11:0] FAST_t_opr_16_7_0_1080_1920_U0_p_src_rows_V_read;
wire   [11:0] FAST_t_opr_16_7_0_1080_1920_U0_p_src_cols_V_read;
wire   [7:0] FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_dout;
wire    FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_empty_n;
wire    FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_read;
wire   [7:0] FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_din;
wire    FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_full_n;
wire    FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_write;
wire    Dilate_0_0_1080_1920_U0_ap_start;
wire    Dilate_0_0_1080_1920_U0_ap_done;
wire    Dilate_0_0_1080_1920_U0_ap_continue;
wire    Dilate_0_0_1080_1920_U0_ap_idle;
wire    Dilate_0_0_1080_1920_U0_ap_ready;
wire   [11:0] Dilate_0_0_1080_1920_U0_p_src_rows_V_read;
wire   [11:0] Dilate_0_0_1080_1920_U0_p_src_cols_V_read;
wire   [7:0] Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_dout;
wire    Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_empty_n;
wire    Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_read;
wire   [7:0] Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_din;
wire    Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_full_n;
wire    Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_write;
wire    PaintMask_16_0_1080_1920_U0_ap_start;
wire    PaintMask_16_0_1080_1920_U0_ap_done;
wire    PaintMask_16_0_1080_1920_U0_ap_continue;
wire    PaintMask_16_0_1080_1920_U0_ap_idle;
wire    PaintMask_16_0_1080_1920_U0_ap_ready;
wire   [11:0] PaintMask_16_0_1080_1920_U0_p_src_rows_V_read;
wire   [11:0] PaintMask_16_0_1080_1920_U0_p_src_cols_V_read;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_dout;
wire    PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_empty_n;
wire    PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_read;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_dout;
wire    PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_empty_n;
wire    PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_read;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_dout;
wire    PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_empty_n;
wire    PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_read;
wire   [11:0] PaintMask_16_0_1080_1920_U0_p_mask_rows_V_read;
wire   [11:0] PaintMask_16_0_1080_1920_U0_p_mask_cols_V_read;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_dout;
wire    PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_empty_n;
wire    PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_read;
wire   [11:0] PaintMask_16_0_1080_1920_U0_p_dst_rows_V_read;
wire   [11:0] PaintMask_16_0_1080_1920_U0_p_dst_cols_V_read;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_din;
wire    PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_full_n;
wire    PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_write;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_din;
wire    PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_full_n;
wire    PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_write;
wire   [7:0] PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_din;
wire    PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_full_n;
wire    PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_write;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_start;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_done;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_continue;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_idle;
wire    Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
wire   [11:0] Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read;
wire   [11:0] Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read;
wire   [7:0] Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read;
wire   [7:0] Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read;
wire   [7:0] Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read;
wire   [31:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write;
wire   [3:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write;
wire   [3:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write;
wire   [0:0] Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n;
wire    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write;
wire    ap_sig_hs_continue;
wire    p_src_rows_V_ap_dummy_ce;
wire   [11:0] p_src_rows_V_din;
wire    p_src_rows_V_write;
wire   [11:0] p_src_rows_V_dout;
wire    p_src_rows_V_empty_n;
wire    p_src_rows_V_read;
wire    p_src_rows_V_channel_ap_dummy_ce;
wire   [11:0] p_src_rows_V_channel_din;
wire    p_src_rows_V_channel_write;
wire   [11:0] p_src_rows_V_channel_dout;
wire    p_src_rows_V_channel_empty_n;
wire    p_src_rows_V_channel_read;
wire    p_src_cols_V_ap_dummy_ce;
wire   [11:0] p_src_cols_V_din;
wire    p_src_cols_V_write;
wire   [11:0] p_src_cols_V_dout;
wire    p_src_cols_V_empty_n;
wire    p_src_cols_V_read;
wire    p_src_cols_V_channel_ap_dummy_ce;
wire   [11:0] p_src_cols_V_channel_din;
wire    p_src_cols_V_channel_write;
wire   [11:0] p_src_cols_V_channel_dout;
wire    p_src_cols_V_channel_empty_n;
wire    p_src_cols_V_channel_read;
wire    p_dst_rows_V_ap_dummy_ce;
wire   [11:0] p_dst_rows_V_din;
wire    p_dst_rows_V_write;
wire   [11:0] p_dst_rows_V_dout;
wire    p_dst_rows_V_empty_n;
wire    p_dst_rows_V_read;
wire    p_dst_rows_V_channel_ap_dummy_ce;
wire   [11:0] p_dst_rows_V_channel_din;
wire    p_dst_rows_V_channel_write;
wire   [11:0] p_dst_rows_V_channel_dout;
wire    p_dst_rows_V_channel_empty_n;
wire    p_dst_rows_V_channel_read;
wire    p_dst_cols_V_ap_dummy_ce;
wire   [11:0] p_dst_cols_V_din;
wire    p_dst_cols_V_write;
wire   [11:0] p_dst_cols_V_dout;
wire    p_dst_cols_V_empty_n;
wire    p_dst_cols_V_read;
wire    p_dst_cols_V_channel_ap_dummy_ce;
wire   [11:0] p_dst_cols_V_channel_din;
wire    p_dst_cols_V_channel_write;
wire   [11:0] p_dst_cols_V_channel_dout;
wire    p_dst_cols_V_channel_empty_n;
wire    p_dst_cols_V_channel_read;
wire    p_src_data_stream_0_V_ap_dummy_ce;
wire   [7:0] p_src_data_stream_0_V_din;
wire    p_src_data_stream_0_V_full_n;
wire    p_src_data_stream_0_V_write;
wire   [7:0] p_src_data_stream_0_V_dout;
wire    p_src_data_stream_0_V_empty_n;
wire    p_src_data_stream_0_V_read;
wire    p_src_data_stream_1_V_ap_dummy_ce;
wire   [7:0] p_src_data_stream_1_V_din;
wire    p_src_data_stream_1_V_full_n;
wire    p_src_data_stream_1_V_write;
wire   [7:0] p_src_data_stream_1_V_dout;
wire    p_src_data_stream_1_V_empty_n;
wire    p_src_data_stream_1_V_read;
wire    p_src_data_stream_2_V_ap_dummy_ce;
wire   [7:0] p_src_data_stream_2_V_din;
wire    p_src_data_stream_2_V_full_n;
wire    p_src_data_stream_2_V_write;
wire   [7:0] p_src_data_stream_2_V_dout;
wire    p_src_data_stream_2_V_empty_n;
wire    p_src_data_stream_2_V_read;
wire    src0_rows_V_ap_dummy_ce;
wire   [11:0] src0_rows_V_din;
wire    src0_rows_V_write;
wire   [11:0] src0_rows_V_dout;
wire    src0_rows_V_empty_n;
wire    src0_rows_V_read;
wire    src0_rows_V_channel_ap_dummy_ce;
wire   [11:0] src0_rows_V_channel_din;
wire    src0_rows_V_channel_write;
wire   [11:0] src0_rows_V_channel_dout;
wire    src0_rows_V_channel_empty_n;
wire    src0_rows_V_channel_read;
wire    src0_cols_V_ap_dummy_ce;
wire   [11:0] src0_cols_V_din;
wire    src0_cols_V_write;
wire   [11:0] src0_cols_V_dout;
wire    src0_cols_V_empty_n;
wire    src0_cols_V_read;
wire    src0_cols_V_channel_ap_dummy_ce;
wire   [11:0] src0_cols_V_channel_din;
wire    src0_cols_V_channel_write;
wire   [11:0] src0_cols_V_channel_dout;
wire    src0_cols_V_channel_empty_n;
wire    src0_cols_V_channel_read;
wire    src1_rows_V_ap_dummy_ce;
wire   [11:0] src1_rows_V_din;
wire    src1_rows_V_write;
wire   [11:0] src1_rows_V_dout;
wire    src1_rows_V_empty_n;
wire    src1_rows_V_read;
wire    src1_rows_V_channel_ap_dummy_ce;
wire   [11:0] src1_rows_V_channel_din;
wire    src1_rows_V_channel_write;
wire   [11:0] src1_rows_V_channel_dout;
wire    src1_rows_V_channel_empty_n;
wire    src1_rows_V_channel_read;
wire    src1_cols_V_ap_dummy_ce;
wire   [11:0] src1_cols_V_din;
wire    src1_cols_V_write;
wire   [11:0] src1_cols_V_dout;
wire    src1_cols_V_empty_n;
wire    src1_cols_V_read;
wire    src1_cols_V_channel_ap_dummy_ce;
wire   [11:0] src1_cols_V_channel_din;
wire    src1_cols_V_channel_write;
wire   [11:0] src1_cols_V_channel_dout;
wire    src1_cols_V_channel_empty_n;
wire    src1_cols_V_channel_read;
wire    mask_rows_V_ap_dummy_ce;
wire   [11:0] mask_rows_V_din;
wire    mask_rows_V_write;
wire   [11:0] mask_rows_V_dout;
wire    mask_rows_V_empty_n;
wire    mask_rows_V_read;
wire    mask_cols_V_ap_dummy_ce;
wire   [11:0] mask_cols_V_din;
wire    mask_cols_V_write;
wire   [11:0] mask_cols_V_dout;
wire    mask_cols_V_empty_n;
wire    mask_cols_V_read;
wire    dmask_rows_V_ap_dummy_ce;
wire   [11:0] dmask_rows_V_din;
wire    dmask_rows_V_write;
wire   [11:0] dmask_rows_V_dout;
wire    dmask_rows_V_empty_n;
wire    dmask_rows_V_read;
wire    dmask_cols_V_ap_dummy_ce;
wire   [11:0] dmask_cols_V_din;
wire    dmask_cols_V_write;
wire   [11:0] dmask_cols_V_dout;
wire    dmask_cols_V_empty_n;
wire    dmask_cols_V_read;
wire    src0_data_stream_0_V_ap_dummy_ce;
wire   [7:0] src0_data_stream_0_V_din;
wire    src0_data_stream_0_V_full_n;
wire    src0_data_stream_0_V_write;
wire   [7:0] src0_data_stream_0_V_dout;
wire    src0_data_stream_0_V_empty_n;
wire    src0_data_stream_0_V_read;
wire    src0_data_stream_1_V_ap_dummy_ce;
wire   [7:0] src0_data_stream_1_V_din;
wire    src0_data_stream_1_V_full_n;
wire    src0_data_stream_1_V_write;
wire   [7:0] src0_data_stream_1_V_dout;
wire    src0_data_stream_1_V_empty_n;
wire    src0_data_stream_1_V_read;
wire    src0_data_stream_2_V_ap_dummy_ce;
wire   [7:0] src0_data_stream_2_V_din;
wire    src0_data_stream_2_V_full_n;
wire    src0_data_stream_2_V_write;
wire   [7:0] src0_data_stream_2_V_dout;
wire    src0_data_stream_2_V_empty_n;
wire    src0_data_stream_2_V_read;
wire    src1_data_stream_0_V_ap_dummy_ce;
wire   [7:0] src1_data_stream_0_V_din;
wire    src1_data_stream_0_V_full_n;
wire    src1_data_stream_0_V_write;
wire   [7:0] src1_data_stream_0_V_dout;
wire    src1_data_stream_0_V_empty_n;
wire    src1_data_stream_0_V_read;
wire    src1_data_stream_1_V_ap_dummy_ce;
wire   [7:0] src1_data_stream_1_V_din;
wire    src1_data_stream_1_V_full_n;
wire    src1_data_stream_1_V_write;
wire   [7:0] src1_data_stream_1_V_dout;
wire    src1_data_stream_1_V_empty_n;
wire    src1_data_stream_1_V_read;
wire    src1_data_stream_2_V_ap_dummy_ce;
wire   [7:0] src1_data_stream_2_V_din;
wire    src1_data_stream_2_V_full_n;
wire    src1_data_stream_2_V_write;
wire   [7:0] src1_data_stream_2_V_dout;
wire    src1_data_stream_2_V_empty_n;
wire    src1_data_stream_2_V_read;
wire    gray_rows_V_ap_dummy_ce;
wire   [11:0] gray_rows_V_din;
wire    gray_rows_V_write;
wire   [11:0] gray_rows_V_dout;
wire    gray_rows_V_empty_n;
wire    gray_rows_V_read;
wire    gray_cols_V_ap_dummy_ce;
wire   [11:0] gray_cols_V_din;
wire    gray_cols_V_write;
wire   [11:0] gray_cols_V_dout;
wire    gray_cols_V_empty_n;
wire    gray_cols_V_read;
wire    gray_data_stream_0_V_ap_dummy_ce;
wire   [7:0] gray_data_stream_0_V_din;
wire    gray_data_stream_0_V_full_n;
wire    gray_data_stream_0_V_write;
wire   [7:0] gray_data_stream_0_V_dout;
wire    gray_data_stream_0_V_empty_n;
wire    gray_data_stream_0_V_read;
wire    mask_data_stream_0_V_ap_dummy_ce;
wire   [7:0] mask_data_stream_0_V_din;
wire    mask_data_stream_0_V_full_n;
wire    mask_data_stream_0_V_write;
wire   [7:0] mask_data_stream_0_V_dout;
wire    mask_data_stream_0_V_empty_n;
wire    mask_data_stream_0_V_read;
wire    dmask_data_stream_0_V_ap_dummy_ce;
wire   [7:0] dmask_data_stream_0_V_din;
wire    dmask_data_stream_0_V_full_n;
wire    dmask_data_stream_0_V_write;
wire   [7:0] dmask_data_stream_0_V_dout;
wire    dmask_data_stream_0_V_empty_n;
wire    dmask_data_stream_0_V_read;
wire    p_dst_data_stream_0_V_ap_dummy_ce;
wire   [7:0] p_dst_data_stream_0_V_din;
wire    p_dst_data_stream_0_V_full_n;
wire    p_dst_data_stream_0_V_write;
wire   [7:0] p_dst_data_stream_0_V_dout;
wire    p_dst_data_stream_0_V_empty_n;
wire    p_dst_data_stream_0_V_read;
wire    p_dst_data_stream_1_V_ap_dummy_ce;
wire   [7:0] p_dst_data_stream_1_V_din;
wire    p_dst_data_stream_1_V_full_n;
wire    p_dst_data_stream_1_V_write;
wire   [7:0] p_dst_data_stream_1_V_dout;
wire    p_dst_data_stream_1_V_empty_n;
wire    p_dst_data_stream_1_V_read;
wire    p_dst_data_stream_2_V_ap_dummy_ce;
wire   [7:0] p_dst_data_stream_2_V_din;
wire    p_dst_data_stream_2_V_full_n;
wire    p_dst_data_stream_2_V_write;
wire   [7:0] p_dst_data_stream_2_V_dout;
wire    p_dst_data_stream_2_V_empty_n;
wire    p_dst_data_stream_2_V_read;
reg    ap_reg_procdone_init_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_init_1_U0 = 1'b0;
reg    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 = 1'b0;
reg    ap_reg_procdone_init_2_U0 = 1'b0;
reg    ap_reg_procdone_init_3_U0 = 1'b0;
reg    ap_reg_procdone_init_4_U0 = 1'b0;
reg    ap_reg_procdone_init_1_1_U0 = 1'b0;
reg    ap_reg_procdone_Duplicate_1080_1920_16_16_U0 = 1'b0;
reg    ap_reg_procdone_init_2_1_U0 = 1'b0;
reg    ap_reg_procdone_CvtColor_1_16_0_1080_1920_U0 = 1'b0;
reg    ap_reg_procdone_FAST_t_opr_16_7_0_1080_1920_U0 = 1'b0;
reg    ap_reg_procdone_Dilate_0_0_1080_1920_U0 = 1'b0;
reg    ap_reg_procdone_PaintMask_16_0_1080_1920_U0 = 1'b0;
reg    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 = 1'b0;
wire    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_init_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_U0_ap_ready;
reg    ap_sig_start_in_init_U0_ap_start;
reg    ap_reg_ready_init_1_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_1_U0_ap_ready;
reg    ap_sig_start_in_init_1_U0_ap_start;
reg    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready = 1'b0;
reg    ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
reg    ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start;
reg    ap_reg_ready_init_2_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_2_U0_ap_ready;
reg    ap_sig_start_in_init_2_U0_ap_start;
reg    ap_reg_ready_init_3_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_3_U0_ap_ready;
reg    ap_sig_start_in_init_3_U0_ap_start;
reg    ap_reg_ready_init_4_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_4_U0_ap_ready;
reg    ap_sig_start_in_init_4_U0_ap_start;
reg    ap_reg_ready_init_1_1_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_1_1_U0_ap_ready;
reg    ap_sig_start_in_init_1_1_U0_ap_start;
reg    ap_reg_ready_init_2_1_U0_ap_ready = 1'b0;
reg    ap_sig_ready_init_2_1_U0_ap_ready;
reg    ap_sig_start_in_init_2_1_U0_ap_start;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;


init init_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_U0_ap_start ),
    .ap_done( init_U0_ap_done ),
    .ap_continue( init_U0_ap_continue ),
    .ap_idle( init_U0_ap_idle ),
    .ap_ready( init_U0_ap_ready ),
    .p_rows( init_U0_p_rows ),
    .p_cols( init_U0_p_cols ),
    .ap_return_0( init_U0_ap_return_0 ),
    .ap_return_1( init_U0_ap_return_1 ),
    .ap_return_2( init_U0_ap_return_2 ),
    .ap_return_3( init_U0_ap_return_3 )
);

init_1 init_1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_1_U0_ap_start ),
    .ap_done( init_1_U0_ap_done ),
    .ap_continue( init_1_U0_ap_continue ),
    .ap_idle( init_1_U0_ap_idle ),
    .ap_ready( init_1_U0_ap_ready ),
    .p_rows( init_1_U0_p_rows ),
    .p_cols( init_1_U0_p_cols ),
    .ap_return_0( init_1_U0_ap_return_0 ),
    .ap_return_1( init_1_U0_ap_return_1 ),
    .ap_return_2( init_1_U0_ap_return_2 ),
    .ap_return_3( init_1_U0_ap_return_3 )
);

AXIvideo2Mat_32_1080_1920_16_s AXIvideo2Mat_32_1080_1920_16_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( AXIvideo2Mat_32_1080_1920_16_U0_ap_start ),
    .ap_done( AXIvideo2Mat_32_1080_1920_16_U0_ap_done ),
    .ap_continue( AXIvideo2Mat_32_1080_1920_16_U0_ap_continue ),
    .ap_idle( AXIvideo2Mat_32_1080_1920_16_U0_ap_idle ),
    .ap_ready( AXIvideo2Mat_32_1080_1920_16_U0_ap_ready ),
    .AXI_video_strm_V_data_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout ),
    .AXI_video_strm_V_data_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n ),
    .AXI_video_strm_V_data_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read ),
    .AXI_video_strm_V_keep_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout ),
    .AXI_video_strm_V_keep_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n ),
    .AXI_video_strm_V_keep_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read ),
    .AXI_video_strm_V_strb_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout ),
    .AXI_video_strm_V_strb_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n ),
    .AXI_video_strm_V_strb_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read ),
    .AXI_video_strm_V_user_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout ),
    .AXI_video_strm_V_user_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n ),
    .AXI_video_strm_V_user_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read ),
    .AXI_video_strm_V_last_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout ),
    .AXI_video_strm_V_last_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n ),
    .AXI_video_strm_V_last_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read ),
    .AXI_video_strm_V_id_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout ),
    .AXI_video_strm_V_id_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n ),
    .AXI_video_strm_V_id_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read ),
    .AXI_video_strm_V_dest_V_dout( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout ),
    .AXI_video_strm_V_dest_V_empty_n( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n ),
    .AXI_video_strm_V_dest_V_read( AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read ),
    .img_rows_V_read( AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read ),
    .img_cols_V_read( AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read ),
    .img_data_stream_0_V_din( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din ),
    .img_data_stream_0_V_full_n( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n ),
    .img_data_stream_0_V_write( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write ),
    .img_data_stream_1_V_din( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din ),
    .img_data_stream_1_V_full_n( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n ),
    .img_data_stream_1_V_write( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write ),
    .img_data_stream_2_V_din( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din ),
    .img_data_stream_2_V_full_n( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n ),
    .img_data_stream_2_V_write( AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write )
);

init_2 init_2_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_2_U0_ap_start ),
    .ap_done( init_2_U0_ap_done ),
    .ap_continue( init_2_U0_ap_continue ),
    .ap_idle( init_2_U0_ap_idle ),
    .ap_ready( init_2_U0_ap_ready ),
    .p_rows( init_2_U0_p_rows ),
    .p_cols( init_2_U0_p_cols ),
    .ap_return_0( init_2_U0_ap_return_0 ),
    .ap_return_1( init_2_U0_ap_return_1 ),
    .ap_return_2( init_2_U0_ap_return_2 ),
    .ap_return_3( init_2_U0_ap_return_3 )
);

init_3 init_3_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_3_U0_ap_start ),
    .ap_done( init_3_U0_ap_done ),
    .ap_continue( init_3_U0_ap_continue ),
    .ap_idle( init_3_U0_ap_idle ),
    .ap_ready( init_3_U0_ap_ready ),
    .p_rows( init_3_U0_p_rows ),
    .p_cols( init_3_U0_p_cols ),
    .ap_return_0( init_3_U0_ap_return_0 ),
    .ap_return_1( init_3_U0_ap_return_1 ),
    .ap_return_2( init_3_U0_ap_return_2 ),
    .ap_return_3( init_3_U0_ap_return_3 )
);

init_4 init_4_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_4_U0_ap_start ),
    .ap_done( init_4_U0_ap_done ),
    .ap_continue( init_4_U0_ap_continue ),
    .ap_idle( init_4_U0_ap_idle ),
    .ap_ready( init_4_U0_ap_ready ),
    .p_rows( init_4_U0_p_rows ),
    .p_cols( init_4_U0_p_cols ),
    .ap_return_0( init_4_U0_ap_return_0 ),
    .ap_return_1( init_4_U0_ap_return_1 )
);

init_1_1 init_1_1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_1_1_U0_ap_start ),
    .ap_done( init_1_1_U0_ap_done ),
    .ap_continue( init_1_1_U0_ap_continue ),
    .ap_idle( init_1_1_U0_ap_idle ),
    .ap_ready( init_1_1_U0_ap_ready ),
    .p_rows( init_1_1_U0_p_rows ),
    .p_cols( init_1_1_U0_p_cols ),
    .ap_return_0( init_1_1_U0_ap_return_0 ),
    .ap_return_1( init_1_1_U0_ap_return_1 )
);

Duplicate_1080_1920_16_16_s Duplicate_1080_1920_16_16_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Duplicate_1080_1920_16_16_U0_ap_start ),
    .ap_done( Duplicate_1080_1920_16_16_U0_ap_done ),
    .ap_continue( Duplicate_1080_1920_16_16_U0_ap_continue ),
    .ap_idle( Duplicate_1080_1920_16_16_U0_ap_idle ),
    .ap_ready( Duplicate_1080_1920_16_16_U0_ap_ready ),
    .src_rows_V_read( Duplicate_1080_1920_16_16_U0_src_rows_V_read ),
    .src_cols_V_read( Duplicate_1080_1920_16_16_U0_src_cols_V_read ),
    .src_data_stream_0_V_dout( Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_dout ),
    .src_data_stream_0_V_empty_n( Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_empty_n ),
    .src_data_stream_0_V_read( Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_read ),
    .src_data_stream_1_V_dout( Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_dout ),
    .src_data_stream_1_V_empty_n( Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_empty_n ),
    .src_data_stream_1_V_read( Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_read ),
    .src_data_stream_2_V_dout( Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_dout ),
    .src_data_stream_2_V_empty_n( Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_empty_n ),
    .src_data_stream_2_V_read( Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_read ),
    .dst1_rows_V_read( Duplicate_1080_1920_16_16_U0_dst1_rows_V_read ),
    .dst1_cols_V_read( Duplicate_1080_1920_16_16_U0_dst1_cols_V_read ),
    .dst1_data_stream_0_V_din( Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_din ),
    .dst1_data_stream_0_V_full_n( Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_full_n ),
    .dst1_data_stream_0_V_write( Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_write ),
    .dst1_data_stream_1_V_din( Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_din ),
    .dst1_data_stream_1_V_full_n( Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_full_n ),
    .dst1_data_stream_1_V_write( Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_write ),
    .dst1_data_stream_2_V_din( Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_din ),
    .dst1_data_stream_2_V_full_n( Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_full_n ),
    .dst1_data_stream_2_V_write( Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_write ),
    .dst2_rows_V_read( Duplicate_1080_1920_16_16_U0_dst2_rows_V_read ),
    .dst2_cols_V_read( Duplicate_1080_1920_16_16_U0_dst2_cols_V_read ),
    .dst2_data_stream_0_V_din( Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_din ),
    .dst2_data_stream_0_V_full_n( Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_full_n ),
    .dst2_data_stream_0_V_write( Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_write ),
    .dst2_data_stream_1_V_din( Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_din ),
    .dst2_data_stream_1_V_full_n( Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_full_n ),
    .dst2_data_stream_1_V_write( Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_write ),
    .dst2_data_stream_2_V_din( Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_din ),
    .dst2_data_stream_2_V_full_n( Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_full_n ),
    .dst2_data_stream_2_V_write( Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_write )
);

init_2_1 init_2_1_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( init_2_1_U0_ap_start ),
    .ap_done( init_2_1_U0_ap_done ),
    .ap_continue( init_2_1_U0_ap_continue ),
    .ap_idle( init_2_1_U0_ap_idle ),
    .ap_ready( init_2_1_U0_ap_ready ),
    .p_rows( init_2_1_U0_p_rows ),
    .p_cols( init_2_1_U0_p_cols ),
    .ap_return_0( init_2_1_U0_ap_return_0 ),
    .ap_return_1( init_2_1_U0_ap_return_1 )
);

CvtColor_1_16_0_1080_1920_s CvtColor_1_16_0_1080_1920_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( CvtColor_1_16_0_1080_1920_U0_ap_start ),
    .ap_done( CvtColor_1_16_0_1080_1920_U0_ap_done ),
    .ap_continue( CvtColor_1_16_0_1080_1920_U0_ap_continue ),
    .ap_idle( CvtColor_1_16_0_1080_1920_U0_ap_idle ),
    .ap_ready( CvtColor_1_16_0_1080_1920_U0_ap_ready ),
    .p_src_rows_V_read( CvtColor_1_16_0_1080_1920_U0_p_src_rows_V_read ),
    .p_src_cols_V_read( CvtColor_1_16_0_1080_1920_U0_p_src_cols_V_read ),
    .p_src_data_stream_0_V_dout( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_dout ),
    .p_src_data_stream_0_V_empty_n( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_empty_n ),
    .p_src_data_stream_0_V_read( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_read ),
    .p_src_data_stream_1_V_dout( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_dout ),
    .p_src_data_stream_1_V_empty_n( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_empty_n ),
    .p_src_data_stream_1_V_read( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_read ),
    .p_src_data_stream_2_V_dout( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_dout ),
    .p_src_data_stream_2_V_empty_n( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_empty_n ),
    .p_src_data_stream_2_V_read( CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_read ),
    .p_dst_data_stream_0_V_din( CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_din ),
    .p_dst_data_stream_0_V_full_n( CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_full_n ),
    .p_dst_data_stream_0_V_write( CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_write )
);

FAST_t_opr_16_7_0_1080_1920_s FAST_t_opr_16_7_0_1080_1920_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( FAST_t_opr_16_7_0_1080_1920_U0_ap_start ),
    .ap_done( FAST_t_opr_16_7_0_1080_1920_U0_ap_done ),
    .ap_continue( FAST_t_opr_16_7_0_1080_1920_U0_ap_continue ),
    .ap_idle( FAST_t_opr_16_7_0_1080_1920_U0_ap_idle ),
    .ap_ready( FAST_t_opr_16_7_0_1080_1920_U0_ap_ready ),
    .p_src_rows_V_read( FAST_t_opr_16_7_0_1080_1920_U0_p_src_rows_V_read ),
    .p_src_cols_V_read( FAST_t_opr_16_7_0_1080_1920_U0_p_src_cols_V_read ),
    .p_src_data_stream_0_V_dout( FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_dout ),
    .p_src_data_stream_0_V_empty_n( FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_empty_n ),
    .p_src_data_stream_0_V_read( FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_read ),
    .p_mask_data_stream_0_V_din( FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_din ),
    .p_mask_data_stream_0_V_full_n( FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_full_n ),
    .p_mask_data_stream_0_V_write( FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_write )
);

Dilate_0_0_1080_1920_s Dilate_0_0_1080_1920_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Dilate_0_0_1080_1920_U0_ap_start ),
    .ap_done( Dilate_0_0_1080_1920_U0_ap_done ),
    .ap_continue( Dilate_0_0_1080_1920_U0_ap_continue ),
    .ap_idle( Dilate_0_0_1080_1920_U0_ap_idle ),
    .ap_ready( Dilate_0_0_1080_1920_U0_ap_ready ),
    .p_src_rows_V_read( Dilate_0_0_1080_1920_U0_p_src_rows_V_read ),
    .p_src_cols_V_read( Dilate_0_0_1080_1920_U0_p_src_cols_V_read ),
    .p_src_data_stream_0_V_dout( Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_dout ),
    .p_src_data_stream_0_V_empty_n( Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_empty_n ),
    .p_src_data_stream_0_V_read( Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_read ),
    .p_dst_data_stream_0_V_din( Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_din ),
    .p_dst_data_stream_0_V_full_n( Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_full_n ),
    .p_dst_data_stream_0_V_write( Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_write )
);

PaintMask_16_0_1080_1920_s PaintMask_16_0_1080_1920_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( PaintMask_16_0_1080_1920_U0_ap_start ),
    .ap_done( PaintMask_16_0_1080_1920_U0_ap_done ),
    .ap_continue( PaintMask_16_0_1080_1920_U0_ap_continue ),
    .ap_idle( PaintMask_16_0_1080_1920_U0_ap_idle ),
    .ap_ready( PaintMask_16_0_1080_1920_U0_ap_ready ),
    .p_src_rows_V_read( PaintMask_16_0_1080_1920_U0_p_src_rows_V_read ),
    .p_src_cols_V_read( PaintMask_16_0_1080_1920_U0_p_src_cols_V_read ),
    .p_src_data_stream_0_V_dout( PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_dout ),
    .p_src_data_stream_0_V_empty_n( PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_empty_n ),
    .p_src_data_stream_0_V_read( PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_read ),
    .p_src_data_stream_1_V_dout( PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_dout ),
    .p_src_data_stream_1_V_empty_n( PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_empty_n ),
    .p_src_data_stream_1_V_read( PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_read ),
    .p_src_data_stream_2_V_dout( PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_dout ),
    .p_src_data_stream_2_V_empty_n( PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_empty_n ),
    .p_src_data_stream_2_V_read( PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_read ),
    .p_mask_rows_V_read( PaintMask_16_0_1080_1920_U0_p_mask_rows_V_read ),
    .p_mask_cols_V_read( PaintMask_16_0_1080_1920_U0_p_mask_cols_V_read ),
    .p_mask_data_stream_0_V_dout( PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_dout ),
    .p_mask_data_stream_0_V_empty_n( PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_empty_n ),
    .p_mask_data_stream_0_V_read( PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_read ),
    .p_dst_rows_V_read( PaintMask_16_0_1080_1920_U0_p_dst_rows_V_read ),
    .p_dst_cols_V_read( PaintMask_16_0_1080_1920_U0_p_dst_cols_V_read ),
    .p_dst_data_stream_0_V_din( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_din ),
    .p_dst_data_stream_0_V_full_n( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_full_n ),
    .p_dst_data_stream_0_V_write( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_write ),
    .p_dst_data_stream_1_V_din( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_din ),
    .p_dst_data_stream_1_V_full_n( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_full_n ),
    .p_dst_data_stream_1_V_write( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_write ),
    .p_dst_data_stream_2_V_din( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_din ),
    .p_dst_data_stream_2_V_full_n( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_full_n ),
    .p_dst_data_stream_2_V_write( PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_write )
);

Mat2AXIvideo_32_1080_1920_16_s Mat2AXIvideo_32_1080_1920_16_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Mat2AXIvideo_32_1080_1920_16_U0_ap_start ),
    .ap_done( Mat2AXIvideo_32_1080_1920_16_U0_ap_done ),
    .ap_continue( Mat2AXIvideo_32_1080_1920_16_U0_ap_continue ),
    .ap_idle( Mat2AXIvideo_32_1080_1920_16_U0_ap_idle ),
    .ap_ready( Mat2AXIvideo_32_1080_1920_16_U0_ap_ready ),
    .img_rows_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read ),
    .img_cols_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read ),
    .img_data_stream_0_V_dout( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout ),
    .img_data_stream_0_V_empty_n( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n ),
    .img_data_stream_0_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read ),
    .img_data_stream_1_V_dout( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout ),
    .img_data_stream_1_V_empty_n( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n ),
    .img_data_stream_1_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read ),
    .img_data_stream_2_V_dout( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout ),
    .img_data_stream_2_V_empty_n( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n ),
    .img_data_stream_2_V_read( Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read ),
    .AXI_video_strm_V_data_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din ),
    .AXI_video_strm_V_data_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n ),
    .AXI_video_strm_V_data_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write ),
    .AXI_video_strm_V_keep_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din ),
    .AXI_video_strm_V_keep_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n ),
    .AXI_video_strm_V_keep_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write ),
    .AXI_video_strm_V_strb_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din ),
    .AXI_video_strm_V_strb_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n ),
    .AXI_video_strm_V_strb_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write ),
    .AXI_video_strm_V_user_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din ),
    .AXI_video_strm_V_user_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n ),
    .AXI_video_strm_V_user_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write ),
    .AXI_video_strm_V_last_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din ),
    .AXI_video_strm_V_last_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n ),
    .AXI_video_strm_V_last_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write ),
    .AXI_video_strm_V_id_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din ),
    .AXI_video_strm_V_id_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n ),
    .AXI_video_strm_V_id_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write ),
    .AXI_video_strm_V_dest_V_din( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din ),
    .AXI_video_strm_V_dest_V_full_n( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n ),
    .AXI_video_strm_V_dest_V_write( Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write )
);

FIFO_image_filter_p_src_rows_V p_src_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_rows_V_ap_dummy_ce ),
    .if_write_ce( p_src_rows_V_ap_dummy_ce ),
    .if_din( p_src_rows_V_din ),
    .if_full_n( p_src_rows_V_full_n ),
    .if_write( p_src_rows_V_write ),
    .if_dout( p_src_rows_V_dout ),
    .if_empty_n( p_src_rows_V_empty_n ),
    .if_read( p_src_rows_V_read )
);

FIFO_image_filter_p_src_rows_V_channel p_src_rows_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_rows_V_channel_ap_dummy_ce ),
    .if_write_ce( p_src_rows_V_channel_ap_dummy_ce ),
    .if_din( p_src_rows_V_channel_din ),
    .if_full_n( p_src_rows_V_channel_full_n ),
    .if_write( p_src_rows_V_channel_write ),
    .if_dout( p_src_rows_V_channel_dout ),
    .if_empty_n( p_src_rows_V_channel_empty_n ),
    .if_read( p_src_rows_V_channel_read )
);

FIFO_image_filter_p_src_cols_V p_src_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_cols_V_ap_dummy_ce ),
    .if_write_ce( p_src_cols_V_ap_dummy_ce ),
    .if_din( p_src_cols_V_din ),
    .if_full_n( p_src_cols_V_full_n ),
    .if_write( p_src_cols_V_write ),
    .if_dout( p_src_cols_V_dout ),
    .if_empty_n( p_src_cols_V_empty_n ),
    .if_read( p_src_cols_V_read )
);

FIFO_image_filter_p_src_cols_V_channel p_src_cols_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_cols_V_channel_ap_dummy_ce ),
    .if_write_ce( p_src_cols_V_channel_ap_dummy_ce ),
    .if_din( p_src_cols_V_channel_din ),
    .if_full_n( p_src_cols_V_channel_full_n ),
    .if_write( p_src_cols_V_channel_write ),
    .if_dout( p_src_cols_V_channel_dout ),
    .if_empty_n( p_src_cols_V_channel_empty_n ),
    .if_read( p_src_cols_V_channel_read )
);

FIFO_image_filter_p_dst_rows_V p_dst_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_rows_V_ap_dummy_ce ),
    .if_write_ce( p_dst_rows_V_ap_dummy_ce ),
    .if_din( p_dst_rows_V_din ),
    .if_full_n( p_dst_rows_V_full_n ),
    .if_write( p_dst_rows_V_write ),
    .if_dout( p_dst_rows_V_dout ),
    .if_empty_n( p_dst_rows_V_empty_n ),
    .if_read( p_dst_rows_V_read )
);

FIFO_image_filter_p_dst_rows_V_channel p_dst_rows_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_rows_V_channel_ap_dummy_ce ),
    .if_write_ce( p_dst_rows_V_channel_ap_dummy_ce ),
    .if_din( p_dst_rows_V_channel_din ),
    .if_full_n( p_dst_rows_V_channel_full_n ),
    .if_write( p_dst_rows_V_channel_write ),
    .if_dout( p_dst_rows_V_channel_dout ),
    .if_empty_n( p_dst_rows_V_channel_empty_n ),
    .if_read( p_dst_rows_V_channel_read )
);

FIFO_image_filter_p_dst_cols_V p_dst_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_cols_V_ap_dummy_ce ),
    .if_write_ce( p_dst_cols_V_ap_dummy_ce ),
    .if_din( p_dst_cols_V_din ),
    .if_full_n( p_dst_cols_V_full_n ),
    .if_write( p_dst_cols_V_write ),
    .if_dout( p_dst_cols_V_dout ),
    .if_empty_n( p_dst_cols_V_empty_n ),
    .if_read( p_dst_cols_V_read )
);

FIFO_image_filter_p_dst_cols_V_channel p_dst_cols_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_cols_V_channel_ap_dummy_ce ),
    .if_write_ce( p_dst_cols_V_channel_ap_dummy_ce ),
    .if_din( p_dst_cols_V_channel_din ),
    .if_full_n( p_dst_cols_V_channel_full_n ),
    .if_write( p_dst_cols_V_channel_write ),
    .if_dout( p_dst_cols_V_channel_dout ),
    .if_empty_n( p_dst_cols_V_channel_empty_n ),
    .if_read( p_dst_cols_V_channel_read )
);

FIFO_image_filter_p_src_data_stream_0_V p_src_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( p_src_data_stream_0_V_ap_dummy_ce ),
    .if_din( p_src_data_stream_0_V_din ),
    .if_full_n( p_src_data_stream_0_V_full_n ),
    .if_write( p_src_data_stream_0_V_write ),
    .if_dout( p_src_data_stream_0_V_dout ),
    .if_empty_n( p_src_data_stream_0_V_empty_n ),
    .if_read( p_src_data_stream_0_V_read )
);

FIFO_image_filter_p_src_data_stream_1_V p_src_data_stream_1_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_data_stream_1_V_ap_dummy_ce ),
    .if_write_ce( p_src_data_stream_1_V_ap_dummy_ce ),
    .if_din( p_src_data_stream_1_V_din ),
    .if_full_n( p_src_data_stream_1_V_full_n ),
    .if_write( p_src_data_stream_1_V_write ),
    .if_dout( p_src_data_stream_1_V_dout ),
    .if_empty_n( p_src_data_stream_1_V_empty_n ),
    .if_read( p_src_data_stream_1_V_read )
);

FIFO_image_filter_p_src_data_stream_2_V p_src_data_stream_2_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_src_data_stream_2_V_ap_dummy_ce ),
    .if_write_ce( p_src_data_stream_2_V_ap_dummy_ce ),
    .if_din( p_src_data_stream_2_V_din ),
    .if_full_n( p_src_data_stream_2_V_full_n ),
    .if_write( p_src_data_stream_2_V_write ),
    .if_dout( p_src_data_stream_2_V_dout ),
    .if_empty_n( p_src_data_stream_2_V_empty_n ),
    .if_read( p_src_data_stream_2_V_read )
);

FIFO_image_filter_src0_rows_V src0_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_rows_V_ap_dummy_ce ),
    .if_write_ce( src0_rows_V_ap_dummy_ce ),
    .if_din( src0_rows_V_din ),
    .if_full_n( src0_rows_V_full_n ),
    .if_write( src0_rows_V_write ),
    .if_dout( src0_rows_V_dout ),
    .if_empty_n( src0_rows_V_empty_n ),
    .if_read( src0_rows_V_read )
);

FIFO_image_filter_src0_rows_V_channel src0_rows_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_rows_V_channel_ap_dummy_ce ),
    .if_write_ce( src0_rows_V_channel_ap_dummy_ce ),
    .if_din( src0_rows_V_channel_din ),
    .if_full_n( src0_rows_V_channel_full_n ),
    .if_write( src0_rows_V_channel_write ),
    .if_dout( src0_rows_V_channel_dout ),
    .if_empty_n( src0_rows_V_channel_empty_n ),
    .if_read( src0_rows_V_channel_read )
);

FIFO_image_filter_src0_cols_V src0_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_cols_V_ap_dummy_ce ),
    .if_write_ce( src0_cols_V_ap_dummy_ce ),
    .if_din( src0_cols_V_din ),
    .if_full_n( src0_cols_V_full_n ),
    .if_write( src0_cols_V_write ),
    .if_dout( src0_cols_V_dout ),
    .if_empty_n( src0_cols_V_empty_n ),
    .if_read( src0_cols_V_read )
);

FIFO_image_filter_src0_cols_V_channel src0_cols_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_cols_V_channel_ap_dummy_ce ),
    .if_write_ce( src0_cols_V_channel_ap_dummy_ce ),
    .if_din( src0_cols_V_channel_din ),
    .if_full_n( src0_cols_V_channel_full_n ),
    .if_write( src0_cols_V_channel_write ),
    .if_dout( src0_cols_V_channel_dout ),
    .if_empty_n( src0_cols_V_channel_empty_n ),
    .if_read( src0_cols_V_channel_read )
);

FIFO_image_filter_src1_rows_V src1_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_rows_V_ap_dummy_ce ),
    .if_write_ce( src1_rows_V_ap_dummy_ce ),
    .if_din( src1_rows_V_din ),
    .if_full_n( src1_rows_V_full_n ),
    .if_write( src1_rows_V_write ),
    .if_dout( src1_rows_V_dout ),
    .if_empty_n( src1_rows_V_empty_n ),
    .if_read( src1_rows_V_read )
);

FIFO_image_filter_src1_rows_V_channel src1_rows_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_rows_V_channel_ap_dummy_ce ),
    .if_write_ce( src1_rows_V_channel_ap_dummy_ce ),
    .if_din( src1_rows_V_channel_din ),
    .if_full_n( src1_rows_V_channel_full_n ),
    .if_write( src1_rows_V_channel_write ),
    .if_dout( src1_rows_V_channel_dout ),
    .if_empty_n( src1_rows_V_channel_empty_n ),
    .if_read( src1_rows_V_channel_read )
);

FIFO_image_filter_src1_cols_V src1_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_cols_V_ap_dummy_ce ),
    .if_write_ce( src1_cols_V_ap_dummy_ce ),
    .if_din( src1_cols_V_din ),
    .if_full_n( src1_cols_V_full_n ),
    .if_write( src1_cols_V_write ),
    .if_dout( src1_cols_V_dout ),
    .if_empty_n( src1_cols_V_empty_n ),
    .if_read( src1_cols_V_read )
);

FIFO_image_filter_src1_cols_V_channel src1_cols_V_channel(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_cols_V_channel_ap_dummy_ce ),
    .if_write_ce( src1_cols_V_channel_ap_dummy_ce ),
    .if_din( src1_cols_V_channel_din ),
    .if_full_n( src1_cols_V_channel_full_n ),
    .if_write( src1_cols_V_channel_write ),
    .if_dout( src1_cols_V_channel_dout ),
    .if_empty_n( src1_cols_V_channel_empty_n ),
    .if_read( src1_cols_V_channel_read )
);

FIFO_image_filter_mask_rows_V mask_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( mask_rows_V_ap_dummy_ce ),
    .if_write_ce( mask_rows_V_ap_dummy_ce ),
    .if_din( mask_rows_V_din ),
    .if_full_n( mask_rows_V_full_n ),
    .if_write( mask_rows_V_write ),
    .if_dout( mask_rows_V_dout ),
    .if_empty_n( mask_rows_V_empty_n ),
    .if_read( mask_rows_V_read )
);

FIFO_image_filter_mask_cols_V mask_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( mask_cols_V_ap_dummy_ce ),
    .if_write_ce( mask_cols_V_ap_dummy_ce ),
    .if_din( mask_cols_V_din ),
    .if_full_n( mask_cols_V_full_n ),
    .if_write( mask_cols_V_write ),
    .if_dout( mask_cols_V_dout ),
    .if_empty_n( mask_cols_V_empty_n ),
    .if_read( mask_cols_V_read )
);

FIFO_image_filter_dmask_rows_V dmask_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( dmask_rows_V_ap_dummy_ce ),
    .if_write_ce( dmask_rows_V_ap_dummy_ce ),
    .if_din( dmask_rows_V_din ),
    .if_full_n( dmask_rows_V_full_n ),
    .if_write( dmask_rows_V_write ),
    .if_dout( dmask_rows_V_dout ),
    .if_empty_n( dmask_rows_V_empty_n ),
    .if_read( dmask_rows_V_read )
);

FIFO_image_filter_dmask_cols_V dmask_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( dmask_cols_V_ap_dummy_ce ),
    .if_write_ce( dmask_cols_V_ap_dummy_ce ),
    .if_din( dmask_cols_V_din ),
    .if_full_n( dmask_cols_V_full_n ),
    .if_write( dmask_cols_V_write ),
    .if_dout( dmask_cols_V_dout ),
    .if_empty_n( dmask_cols_V_empty_n ),
    .if_read( dmask_cols_V_read )
);

FIFO_image_filter_src0_data_stream_0_V src0_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( src0_data_stream_0_V_ap_dummy_ce ),
    .if_din( src0_data_stream_0_V_din ),
    .if_full_n( src0_data_stream_0_V_full_n ),
    .if_write( src0_data_stream_0_V_write ),
    .if_dout( src0_data_stream_0_V_dout ),
    .if_empty_n( src0_data_stream_0_V_empty_n ),
    .if_read( src0_data_stream_0_V_read )
);

FIFO_image_filter_src0_data_stream_1_V src0_data_stream_1_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_data_stream_1_V_ap_dummy_ce ),
    .if_write_ce( src0_data_stream_1_V_ap_dummy_ce ),
    .if_din( src0_data_stream_1_V_din ),
    .if_full_n( src0_data_stream_1_V_full_n ),
    .if_write( src0_data_stream_1_V_write ),
    .if_dout( src0_data_stream_1_V_dout ),
    .if_empty_n( src0_data_stream_1_V_empty_n ),
    .if_read( src0_data_stream_1_V_read )
);

FIFO_image_filter_src0_data_stream_2_V src0_data_stream_2_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src0_data_stream_2_V_ap_dummy_ce ),
    .if_write_ce( src0_data_stream_2_V_ap_dummy_ce ),
    .if_din( src0_data_stream_2_V_din ),
    .if_full_n( src0_data_stream_2_V_full_n ),
    .if_write( src0_data_stream_2_V_write ),
    .if_dout( src0_data_stream_2_V_dout ),
    .if_empty_n( src0_data_stream_2_V_empty_n ),
    .if_read( src0_data_stream_2_V_read )
);

FIFO_image_filter_src1_data_stream_0_V src1_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( src1_data_stream_0_V_ap_dummy_ce ),
    .if_din( src1_data_stream_0_V_din ),
    .if_full_n( src1_data_stream_0_V_full_n ),
    .if_write( src1_data_stream_0_V_write ),
    .if_dout( src1_data_stream_0_V_dout ),
    .if_empty_n( src1_data_stream_0_V_empty_n ),
    .if_read( src1_data_stream_0_V_read )
);

FIFO_image_filter_src1_data_stream_1_V src1_data_stream_1_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_data_stream_1_V_ap_dummy_ce ),
    .if_write_ce( src1_data_stream_1_V_ap_dummy_ce ),
    .if_din( src1_data_stream_1_V_din ),
    .if_full_n( src1_data_stream_1_V_full_n ),
    .if_write( src1_data_stream_1_V_write ),
    .if_dout( src1_data_stream_1_V_dout ),
    .if_empty_n( src1_data_stream_1_V_empty_n ),
    .if_read( src1_data_stream_1_V_read )
);

FIFO_image_filter_src1_data_stream_2_V src1_data_stream_2_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( src1_data_stream_2_V_ap_dummy_ce ),
    .if_write_ce( src1_data_stream_2_V_ap_dummy_ce ),
    .if_din( src1_data_stream_2_V_din ),
    .if_full_n( src1_data_stream_2_V_full_n ),
    .if_write( src1_data_stream_2_V_write ),
    .if_dout( src1_data_stream_2_V_dout ),
    .if_empty_n( src1_data_stream_2_V_empty_n ),
    .if_read( src1_data_stream_2_V_read )
);

FIFO_image_filter_gray_rows_V gray_rows_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( gray_rows_V_ap_dummy_ce ),
    .if_write_ce( gray_rows_V_ap_dummy_ce ),
    .if_din( gray_rows_V_din ),
    .if_full_n( gray_rows_V_full_n ),
    .if_write( gray_rows_V_write ),
    .if_dout( gray_rows_V_dout ),
    .if_empty_n( gray_rows_V_empty_n ),
    .if_read( gray_rows_V_read )
);

FIFO_image_filter_gray_cols_V gray_cols_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( gray_cols_V_ap_dummy_ce ),
    .if_write_ce( gray_cols_V_ap_dummy_ce ),
    .if_din( gray_cols_V_din ),
    .if_full_n( gray_cols_V_full_n ),
    .if_write( gray_cols_V_write ),
    .if_dout( gray_cols_V_dout ),
    .if_empty_n( gray_cols_V_empty_n ),
    .if_read( gray_cols_V_read )
);

FIFO_image_filter_gray_data_stream_0_V gray_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( gray_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( gray_data_stream_0_V_ap_dummy_ce ),
    .if_din( gray_data_stream_0_V_din ),
    .if_full_n( gray_data_stream_0_V_full_n ),
    .if_write( gray_data_stream_0_V_write ),
    .if_dout( gray_data_stream_0_V_dout ),
    .if_empty_n( gray_data_stream_0_V_empty_n ),
    .if_read( gray_data_stream_0_V_read )
);

FIFO_image_filter_mask_data_stream_0_V mask_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( mask_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( mask_data_stream_0_V_ap_dummy_ce ),
    .if_din( mask_data_stream_0_V_din ),
    .if_full_n( mask_data_stream_0_V_full_n ),
    .if_write( mask_data_stream_0_V_write ),
    .if_dout( mask_data_stream_0_V_dout ),
    .if_empty_n( mask_data_stream_0_V_empty_n ),
    .if_read( mask_data_stream_0_V_read )
);

FIFO_image_filter_dmask_data_stream_0_V dmask_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( dmask_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( dmask_data_stream_0_V_ap_dummy_ce ),
    .if_din( dmask_data_stream_0_V_din ),
    .if_full_n( dmask_data_stream_0_V_full_n ),
    .if_write( dmask_data_stream_0_V_write ),
    .if_dout( dmask_data_stream_0_V_dout ),
    .if_empty_n( dmask_data_stream_0_V_empty_n ),
    .if_read( dmask_data_stream_0_V_read )
);

FIFO_image_filter_p_dst_data_stream_0_V p_dst_data_stream_0_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_data_stream_0_V_ap_dummy_ce ),
    .if_write_ce( p_dst_data_stream_0_V_ap_dummy_ce ),
    .if_din( p_dst_data_stream_0_V_din ),
    .if_full_n( p_dst_data_stream_0_V_full_n ),
    .if_write( p_dst_data_stream_0_V_write ),
    .if_dout( p_dst_data_stream_0_V_dout ),
    .if_empty_n( p_dst_data_stream_0_V_empty_n ),
    .if_read( p_dst_data_stream_0_V_read )
);

FIFO_image_filter_p_dst_data_stream_1_V p_dst_data_stream_1_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_data_stream_1_V_ap_dummy_ce ),
    .if_write_ce( p_dst_data_stream_1_V_ap_dummy_ce ),
    .if_din( p_dst_data_stream_1_V_din ),
    .if_full_n( p_dst_data_stream_1_V_full_n ),
    .if_write( p_dst_data_stream_1_V_write ),
    .if_dout( p_dst_data_stream_1_V_dout ),
    .if_empty_n( p_dst_data_stream_1_V_empty_n ),
    .if_read( p_dst_data_stream_1_V_read )
);

FIFO_image_filter_p_dst_data_stream_2_V p_dst_data_stream_2_V(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( p_dst_data_stream_2_V_ap_dummy_ce ),
    .if_write_ce( p_dst_data_stream_2_V_ap_dummy_ce ),
    .if_din( p_dst_data_stream_2_V_din ),
    .if_full_n( p_dst_data_stream_2_V_full_n ),
    .if_write( p_dst_data_stream_2_V_write ),
    .if_dout( p_dst_data_stream_2_V_dout ),
    .if_empty_n( p_dst_data_stream_2_V_empty_n ),
    .if_read( p_dst_data_stream_2_V_read )
);



/// ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == AXIvideo2Mat_32_1080_1920_16_U0_ap_done)) begin
            ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_CvtColor_1_16_0_1080_1920_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_CvtColor_1_16_0_1080_1920_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_CvtColor_1_16_0_1080_1920_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_CvtColor_1_16_0_1080_1920_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == CvtColor_1_16_0_1080_1920_U0_ap_done)) begin
            ap_reg_procdone_CvtColor_1_16_0_1080_1920_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Dilate_0_0_1080_1920_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Dilate_0_0_1080_1920_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Dilate_0_0_1080_1920_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Dilate_0_0_1080_1920_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Dilate_0_0_1080_1920_U0_ap_done)) begin
            ap_reg_procdone_Dilate_0_0_1080_1920_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Duplicate_1080_1920_16_16_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Duplicate_1080_1920_16_16_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Duplicate_1080_1920_16_16_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Duplicate_1080_1920_16_16_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Duplicate_1080_1920_16_16_U0_ap_done)) begin
            ap_reg_procdone_Duplicate_1080_1920_16_16_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_FAST_t_opr_16_7_0_1080_1920_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_FAST_t_opr_16_7_0_1080_1920_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_FAST_t_opr_16_7_0_1080_1920_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_FAST_t_opr_16_7_0_1080_1920_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == FAST_t_opr_16_7_0_1080_1920_U0_ap_done)) begin
            ap_reg_procdone_FAST_t_opr_16_7_0_1080_1920_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Mat2AXIvideo_32_1080_1920_16_U0_ap_done)) begin
            ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_PaintMask_16_0_1080_1920_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_PaintMask_16_0_1080_1920_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_PaintMask_16_0_1080_1920_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_PaintMask_16_0_1080_1920_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == PaintMask_16_0_1080_1920_U0_ap_done)) begin
            ap_reg_procdone_PaintMask_16_0_1080_1920_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_1_1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_1_1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_1_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_1_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_1_U0_ap_done)) begin
            ap_reg_procdone_init_1_1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_U0_ap_done)) begin
            ap_reg_procdone_init_1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_2_1_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_2_1_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_2_1_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_2_1_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_2_1_U0_ap_done)) begin
            ap_reg_procdone_init_2_1_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_2_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_2_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_2_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_2_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_2_U0_ap_done)) begin
            ap_reg_procdone_init_2_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_3_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_3_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_3_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_3_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_3_U0_ap_done)) begin
            ap_reg_procdone_init_3_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_4_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_4_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_4_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_4_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_4_U0_ap_done)) begin
            ap_reg_procdone_init_4_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_init_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_init_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_init_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_init_U0 <= ap_const_logic_0;
        end else if ((init_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_init_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) begin
            ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_dmask_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_dmask_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_dmask_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == init_1_1_U0_ap_continue))) begin
            ap_reg_ready_dmask_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == dmask_cols_V_full_n))) begin
            ap_reg_ready_dmask_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_dmask_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_dmask_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_dmask_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == init_1_1_U0_ap_continue))) begin
            ap_reg_ready_dmask_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_1_U0_ap_done) & (ap_const_logic_1 == dmask_rows_V_full_n))) begin
            ap_reg_ready_dmask_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_gray_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_gray_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_gray_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_1_U0_ap_done) & (ap_const_logic_1 == init_2_1_U0_ap_continue))) begin
            ap_reg_ready_gray_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_1_U0_ap_done) & (ap_const_logic_1 == gray_cols_V_full_n))) begin
            ap_reg_ready_gray_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_gray_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_gray_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_gray_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_1_U0_ap_done) & (ap_const_logic_1 == init_2_1_U0_ap_continue))) begin
            ap_reg_ready_gray_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_1_U0_ap_done) & (ap_const_logic_1 == gray_rows_V_full_n))) begin
            ap_reg_ready_gray_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_1_1_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_1_1_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_1_U0_ap_ready)) begin
            ap_reg_ready_init_1_1_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_1_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_1_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_1_U0_ap_ready)) begin
            ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_2_1_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_2_1_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_2_1_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_2_1_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_2_1_U0_ap_ready)) begin
            ap_reg_ready_init_2_1_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_2_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_2_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_2_U0_ap_ready)) begin
            ap_reg_ready_init_2_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_3_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_3_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_3_U0_ap_ready)) begin
            ap_reg_ready_init_3_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_4_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_4_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_4_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_4_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == init_4_U0_ap_ready)) begin
            ap_reg_ready_init_4_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_init_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_init_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
        end else if ((init_U0_ap_ready == ap_const_logic_1)) begin
            ap_reg_ready_init_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_mask_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_mask_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_mask_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_4_U0_ap_done) & (ap_const_logic_1 == init_4_U0_ap_continue))) begin
            ap_reg_ready_mask_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_4_U0_ap_done) & (ap_const_logic_1 == mask_cols_V_full_n))) begin
            ap_reg_ready_mask_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_mask_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_mask_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_mask_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_4_U0_ap_done) & (ap_const_logic_1 == init_4_U0_ap_continue))) begin
            ap_reg_ready_mask_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_4_U0_ap_done) & (ap_const_logic_1 == mask_rows_V_full_n))) begin
            ap_reg_ready_mask_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_dst_cols_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_dst_cols_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == init_1_U0_ap_continue))) begin
            ap_reg_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == p_dst_cols_V_channel_full_n))) begin
            ap_reg_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_dst_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_dst_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_dst_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == init_1_U0_ap_continue))) begin
            ap_reg_ready_p_dst_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == p_dst_cols_V_full_n))) begin
            ap_reg_ready_p_dst_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_dst_rows_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_dst_rows_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == init_1_U0_ap_continue))) begin
            ap_reg_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == p_dst_rows_V_channel_full_n))) begin
            ap_reg_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_dst_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_dst_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_dst_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == init_1_U0_ap_continue))) begin
            ap_reg_ready_p_dst_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_1_U0_ap_done) & (ap_const_logic_1 == p_dst_rows_V_full_n))) begin
            ap_reg_ready_p_dst_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_src_cols_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_src_cols_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_src_cols_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_p_src_cols_V_channel_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == p_src_cols_V_channel_full_n))) begin
            ap_reg_ready_p_src_cols_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_src_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_src_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_src_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_p_src_cols_V_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == p_src_cols_V_full_n))) begin
            ap_reg_ready_p_src_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_src_rows_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_src_rows_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_src_rows_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_p_src_rows_V_channel_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == p_src_rows_V_channel_full_n))) begin
            ap_reg_ready_p_src_rows_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_p_src_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_p_src_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_p_src_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((init_U0_ap_done == ap_const_logic_1) & (init_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_p_src_rows_V_full_n <= ap_const_logic_0;
        end else if (((init_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == p_src_rows_V_full_n))) begin
            ap_reg_ready_p_src_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src0_cols_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src0_cols_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src0_cols_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == init_2_U0_ap_continue))) begin
            ap_reg_ready_src0_cols_V_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == src0_cols_V_channel_full_n))) begin
            ap_reg_ready_src0_cols_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src0_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src0_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src0_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == init_2_U0_ap_continue))) begin
            ap_reg_ready_src0_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == src0_cols_V_full_n))) begin
            ap_reg_ready_src0_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src0_rows_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src0_rows_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src0_rows_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == init_2_U0_ap_continue))) begin
            ap_reg_ready_src0_rows_V_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == src0_rows_V_channel_full_n))) begin
            ap_reg_ready_src0_rows_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src0_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src0_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src0_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == init_2_U0_ap_continue))) begin
            ap_reg_ready_src0_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_2_U0_ap_done) & (ap_const_logic_1 == src0_rows_V_full_n))) begin
            ap_reg_ready_src0_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src1_cols_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src1_cols_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src1_cols_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == init_3_U0_ap_continue))) begin
            ap_reg_ready_src1_cols_V_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == src1_cols_V_channel_full_n))) begin
            ap_reg_ready_src1_cols_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src1_cols_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src1_cols_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src1_cols_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == init_3_U0_ap_continue))) begin
            ap_reg_ready_src1_cols_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == src1_cols_V_full_n))) begin
            ap_reg_ready_src1_cols_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src1_rows_V_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src1_rows_V_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src1_rows_V_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == init_3_U0_ap_continue))) begin
            ap_reg_ready_src1_rows_V_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == src1_rows_V_channel_full_n))) begin
            ap_reg_ready_src1_rows_V_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_src1_rows_V_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_src1_rows_V_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_src1_rows_V_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == init_3_U0_ap_continue))) begin
            ap_reg_ready_src1_rows_V_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == init_3_U0_ap_done) & (ap_const_logic_1 == src1_rows_V_full_n))) begin
            ap_reg_ready_src1_rows_V_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_chn_write_init_1_1_U0_dmask_cols_V assign process. ///
always @ (init_1_1_U0_ap_done or ap_reg_ready_dmask_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_dmask_cols_V_full_n)) begin
        ap_chn_write_init_1_1_U0_dmask_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_1_U0_dmask_cols_V = init_1_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_1_U0_dmask_rows_V assign process. ///
always @ (init_1_1_U0_ap_done or ap_reg_ready_dmask_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_dmask_rows_V_full_n)) begin
        ap_chn_write_init_1_1_U0_dmask_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_1_U0_dmask_rows_V = init_1_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_U0_p_dst_cols_V assign process. ///
always @ (init_1_U0_ap_done or ap_reg_ready_p_dst_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_dst_cols_V_full_n)) begin
        ap_chn_write_init_1_U0_p_dst_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_U0_p_dst_cols_V = init_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_U0_p_dst_cols_V_channel assign process. ///
always @ (init_1_U0_ap_done or ap_reg_ready_p_dst_cols_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_dst_cols_V_channel_full_n)) begin
        ap_chn_write_init_1_U0_p_dst_cols_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_U0_p_dst_cols_V_channel = init_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_U0_p_dst_rows_V assign process. ///
always @ (init_1_U0_ap_done or ap_reg_ready_p_dst_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_dst_rows_V_full_n)) begin
        ap_chn_write_init_1_U0_p_dst_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_U0_p_dst_rows_V = init_1_U0_ap_done;
    end
end

/// ap_chn_write_init_1_U0_p_dst_rows_V_channel assign process. ///
always @ (init_1_U0_ap_done or ap_reg_ready_p_dst_rows_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_dst_rows_V_channel_full_n)) begin
        ap_chn_write_init_1_U0_p_dst_rows_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_1_U0_p_dst_rows_V_channel = init_1_U0_ap_done;
    end
end

/// ap_chn_write_init_2_1_U0_gray_cols_V assign process. ///
always @ (init_2_1_U0_ap_done or ap_reg_ready_gray_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_gray_cols_V_full_n)) begin
        ap_chn_write_init_2_1_U0_gray_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_1_U0_gray_cols_V = init_2_1_U0_ap_done;
    end
end

/// ap_chn_write_init_2_1_U0_gray_rows_V assign process. ///
always @ (init_2_1_U0_ap_done or ap_reg_ready_gray_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_gray_rows_V_full_n)) begin
        ap_chn_write_init_2_1_U0_gray_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_1_U0_gray_rows_V = init_2_1_U0_ap_done;
    end
end

/// ap_chn_write_init_2_U0_src0_cols_V assign process. ///
always @ (init_2_U0_ap_done or ap_reg_ready_src0_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src0_cols_V_full_n)) begin
        ap_chn_write_init_2_U0_src0_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_U0_src0_cols_V = init_2_U0_ap_done;
    end
end

/// ap_chn_write_init_2_U0_src0_cols_V_channel assign process. ///
always @ (init_2_U0_ap_done or ap_reg_ready_src0_cols_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src0_cols_V_channel_full_n)) begin
        ap_chn_write_init_2_U0_src0_cols_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_U0_src0_cols_V_channel = init_2_U0_ap_done;
    end
end

/// ap_chn_write_init_2_U0_src0_rows_V assign process. ///
always @ (init_2_U0_ap_done or ap_reg_ready_src0_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src0_rows_V_full_n)) begin
        ap_chn_write_init_2_U0_src0_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_U0_src0_rows_V = init_2_U0_ap_done;
    end
end

/// ap_chn_write_init_2_U0_src0_rows_V_channel assign process. ///
always @ (init_2_U0_ap_done or ap_reg_ready_src0_rows_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src0_rows_V_channel_full_n)) begin
        ap_chn_write_init_2_U0_src0_rows_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_2_U0_src0_rows_V_channel = init_2_U0_ap_done;
    end
end

/// ap_chn_write_init_3_U0_src1_cols_V assign process. ///
always @ (init_3_U0_ap_done or ap_reg_ready_src1_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src1_cols_V_full_n)) begin
        ap_chn_write_init_3_U0_src1_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_3_U0_src1_cols_V = init_3_U0_ap_done;
    end
end

/// ap_chn_write_init_3_U0_src1_cols_V_channel assign process. ///
always @ (init_3_U0_ap_done or ap_reg_ready_src1_cols_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src1_cols_V_channel_full_n)) begin
        ap_chn_write_init_3_U0_src1_cols_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_3_U0_src1_cols_V_channel = init_3_U0_ap_done;
    end
end

/// ap_chn_write_init_3_U0_src1_rows_V assign process. ///
always @ (init_3_U0_ap_done or ap_reg_ready_src1_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src1_rows_V_full_n)) begin
        ap_chn_write_init_3_U0_src1_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_3_U0_src1_rows_V = init_3_U0_ap_done;
    end
end

/// ap_chn_write_init_3_U0_src1_rows_V_channel assign process. ///
always @ (init_3_U0_ap_done or ap_reg_ready_src1_rows_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_src1_rows_V_channel_full_n)) begin
        ap_chn_write_init_3_U0_src1_rows_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_3_U0_src1_rows_V_channel = init_3_U0_ap_done;
    end
end

/// ap_chn_write_init_4_U0_mask_cols_V assign process. ///
always @ (init_4_U0_ap_done or ap_reg_ready_mask_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_mask_cols_V_full_n)) begin
        ap_chn_write_init_4_U0_mask_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_4_U0_mask_cols_V = init_4_U0_ap_done;
    end
end

/// ap_chn_write_init_4_U0_mask_rows_V assign process. ///
always @ (init_4_U0_ap_done or ap_reg_ready_mask_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_mask_rows_V_full_n)) begin
        ap_chn_write_init_4_U0_mask_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_4_U0_mask_rows_V = init_4_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_p_src_cols_V assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_p_src_cols_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_src_cols_V_full_n)) begin
        ap_chn_write_init_U0_p_src_cols_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_p_src_cols_V = init_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_p_src_cols_V_channel assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_p_src_cols_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_src_cols_V_channel_full_n)) begin
        ap_chn_write_init_U0_p_src_cols_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_p_src_cols_V_channel = init_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_p_src_rows_V assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_p_src_rows_V_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_src_rows_V_full_n)) begin
        ap_chn_write_init_U0_p_src_rows_V = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_p_src_rows_V = init_U0_ap_done;
    end
end

/// ap_chn_write_init_U0_p_src_rows_V_channel assign process. ///
always @ (init_U0_ap_done or ap_reg_ready_p_src_rows_V_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_p_src_rows_V_channel_full_n)) begin
        ap_chn_write_init_U0_p_src_rows_V_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_init_U0_p_src_rows_V_channel = init_U0_ap_done;
    end
end

/// ap_idle assign process. ///
always @ (init_U0_ap_idle or init_1_U0_ap_idle or AXIvideo2Mat_32_1080_1920_16_U0_ap_idle or init_2_U0_ap_idle or init_3_U0_ap_idle or init_4_U0_ap_idle or init_1_1_U0_ap_idle or Duplicate_1080_1920_16_16_U0_ap_idle or init_2_1_U0_ap_idle or CvtColor_1_16_0_1080_1920_U0_ap_idle or FAST_t_opr_16_7_0_1080_1920_U0_ap_idle or Dilate_0_0_1080_1920_U0_ap_idle or PaintMask_16_0_1080_1920_U0_ap_idle or Mat2AXIvideo_32_1080_1920_16_U0_ap_idle or p_src_rows_V_empty_n or p_src_rows_V_channel_empty_n or p_src_cols_V_empty_n or p_src_cols_V_channel_empty_n or p_dst_rows_V_empty_n or p_dst_rows_V_channel_empty_n or p_dst_cols_V_empty_n or p_dst_cols_V_channel_empty_n or src0_rows_V_empty_n or src0_rows_V_channel_empty_n or src0_cols_V_empty_n or src0_cols_V_channel_empty_n or src1_rows_V_empty_n or src1_rows_V_channel_empty_n or src1_cols_V_empty_n or src1_cols_V_channel_empty_n or mask_rows_V_empty_n or mask_cols_V_empty_n or dmask_rows_V_empty_n or dmask_cols_V_empty_n or gray_rows_V_empty_n or gray_cols_V_empty_n)
begin
    if (((init_U0_ap_idle == ap_const_logic_1) & (ap_const_logic_1 == init_1_U0_ap_idle) & (ap_const_logic_1 == AXIvideo2Mat_32_1080_1920_16_U0_ap_idle) & (ap_const_logic_1 == init_2_U0_ap_idle) & (ap_const_logic_1 == init_3_U0_ap_idle) & (ap_const_logic_1 == init_4_U0_ap_idle) & (ap_const_logic_1 == init_1_1_U0_ap_idle) & (ap_const_logic_1 == Duplicate_1080_1920_16_16_U0_ap_idle) & (ap_const_logic_1 == init_2_1_U0_ap_idle) & (ap_const_logic_1 == CvtColor_1_16_0_1080_1920_U0_ap_idle) & (ap_const_logic_1 == FAST_t_opr_16_7_0_1080_1920_U0_ap_idle) & (ap_const_logic_1 == Dilate_0_0_1080_1920_U0_ap_idle) & (ap_const_logic_1 == PaintMask_16_0_1080_1920_U0_ap_idle) & (ap_const_logic_1 == Mat2AXIvideo_32_1080_1920_16_U0_ap_idle) & (ap_const_logic_0 == p_src_rows_V_empty_n) & (ap_const_logic_0 == p_src_rows_V_channel_empty_n) & (ap_const_logic_0 == p_src_cols_V_empty_n) & (ap_const_logic_0 == p_src_cols_V_channel_empty_n) & (ap_const_logic_0 == p_dst_rows_V_empty_n) & (ap_const_logic_0 == p_dst_rows_V_channel_empty_n) & (ap_const_logic_0 == p_dst_cols_V_empty_n) & (ap_const_logic_0 == p_dst_cols_V_channel_empty_n) & (ap_const_logic_0 == src0_rows_V_empty_n) & (ap_const_logic_0 == src0_rows_V_channel_empty_n) & (ap_const_logic_0 == src0_cols_V_empty_n) & (ap_const_logic_0 == src0_cols_V_channel_empty_n) & (ap_const_logic_0 == src1_rows_V_empty_n) & (ap_const_logic_0 == src1_rows_V_channel_empty_n) & (ap_const_logic_0 == src1_cols_V_empty_n) & (ap_const_logic_0 == src1_cols_V_channel_empty_n) & (ap_const_logic_0 == mask_rows_V_empty_n) & (ap_const_logic_0 == mask_cols_V_empty_n) & (ap_const_logic_0 == dmask_rows_V_empty_n) & (ap_const_logic_0 == dmask_cols_V_empty_n) & (ap_const_logic_0 == gray_rows_V_empty_n) & (ap_const_logic_0 == gray_cols_V_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (Mat2AXIvideo_32_1080_1920_16_U0_ap_done or ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0)
begin
    if (((ap_const_logic_1 == Mat2AXIvideo_32_1080_1920_16_U0_ap_done) | (ap_const_logic_1 == ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0))) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

/// ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. ///
always @ (AXIvideo2Mat_32_1080_1920_16_U0_ap_ready or ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) begin
        ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
    end else begin
        ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_dmask_cols_V_full_n assign process. ///
always @ (dmask_cols_V_full_n or ap_reg_ready_dmask_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_dmask_cols_V_full_n)) begin
        ap_sig_ready_dmask_cols_V_full_n = dmask_cols_V_full_n;
    end else begin
        ap_sig_ready_dmask_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_dmask_rows_V_full_n assign process. ///
always @ (dmask_rows_V_full_n or ap_reg_ready_dmask_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_dmask_rows_V_full_n)) begin
        ap_sig_ready_dmask_rows_V_full_n = dmask_rows_V_full_n;
    end else begin
        ap_sig_ready_dmask_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_gray_cols_V_full_n assign process. ///
always @ (gray_cols_V_full_n or ap_reg_ready_gray_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_gray_cols_V_full_n)) begin
        ap_sig_ready_gray_cols_V_full_n = gray_cols_V_full_n;
    end else begin
        ap_sig_ready_gray_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_gray_rows_V_full_n assign process. ///
always @ (gray_rows_V_full_n or ap_reg_ready_gray_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_gray_rows_V_full_n)) begin
        ap_sig_ready_gray_rows_V_full_n = gray_rows_V_full_n;
    end else begin
        ap_sig_ready_gray_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_1_1_U0_ap_ready assign process. ///
always @ (init_1_1_U0_ap_ready or ap_reg_ready_init_1_1_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_1_1_U0_ap_ready)) begin
        ap_sig_ready_init_1_1_U0_ap_ready = init_1_1_U0_ap_ready;
    end else begin
        ap_sig_ready_init_1_1_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_1_U0_ap_ready assign process. ///
always @ (init_1_U0_ap_ready or ap_reg_ready_init_1_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_1_U0_ap_ready)) begin
        ap_sig_ready_init_1_U0_ap_ready = init_1_U0_ap_ready;
    end else begin
        ap_sig_ready_init_1_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_2_1_U0_ap_ready assign process. ///
always @ (init_2_1_U0_ap_ready or ap_reg_ready_init_2_1_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_2_1_U0_ap_ready)) begin
        ap_sig_ready_init_2_1_U0_ap_ready = init_2_1_U0_ap_ready;
    end else begin
        ap_sig_ready_init_2_1_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_2_U0_ap_ready assign process. ///
always @ (init_2_U0_ap_ready or ap_reg_ready_init_2_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_2_U0_ap_ready)) begin
        ap_sig_ready_init_2_U0_ap_ready = init_2_U0_ap_ready;
    end else begin
        ap_sig_ready_init_2_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_3_U0_ap_ready assign process. ///
always @ (init_3_U0_ap_ready or ap_reg_ready_init_3_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_3_U0_ap_ready)) begin
        ap_sig_ready_init_3_U0_ap_ready = init_3_U0_ap_ready;
    end else begin
        ap_sig_ready_init_3_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_4_U0_ap_ready assign process. ///
always @ (init_4_U0_ap_ready or ap_reg_ready_init_4_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_4_U0_ap_ready)) begin
        ap_sig_ready_init_4_U0_ap_ready = init_4_U0_ap_ready;
    end else begin
        ap_sig_ready_init_4_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_init_U0_ap_ready assign process. ///
always @ (init_U0_ap_ready or ap_reg_ready_init_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_init_U0_ap_ready)) begin
        ap_sig_ready_init_U0_ap_ready = init_U0_ap_ready;
    end else begin
        ap_sig_ready_init_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_mask_cols_V_full_n assign process. ///
always @ (mask_cols_V_full_n or ap_reg_ready_mask_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_mask_cols_V_full_n)) begin
        ap_sig_ready_mask_cols_V_full_n = mask_cols_V_full_n;
    end else begin
        ap_sig_ready_mask_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_mask_rows_V_full_n assign process. ///
always @ (mask_rows_V_full_n or ap_reg_ready_mask_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_mask_rows_V_full_n)) begin
        ap_sig_ready_mask_rows_V_full_n = mask_rows_V_full_n;
    end else begin
        ap_sig_ready_mask_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_dst_cols_V_channel_full_n assign process. ///
always @ (p_dst_cols_V_channel_full_n or ap_reg_ready_p_dst_cols_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_dst_cols_V_channel_full_n)) begin
        ap_sig_ready_p_dst_cols_V_channel_full_n = p_dst_cols_V_channel_full_n;
    end else begin
        ap_sig_ready_p_dst_cols_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_dst_cols_V_full_n assign process. ///
always @ (p_dst_cols_V_full_n or ap_reg_ready_p_dst_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_dst_cols_V_full_n)) begin
        ap_sig_ready_p_dst_cols_V_full_n = p_dst_cols_V_full_n;
    end else begin
        ap_sig_ready_p_dst_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_dst_rows_V_channel_full_n assign process. ///
always @ (p_dst_rows_V_channel_full_n or ap_reg_ready_p_dst_rows_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_dst_rows_V_channel_full_n)) begin
        ap_sig_ready_p_dst_rows_V_channel_full_n = p_dst_rows_V_channel_full_n;
    end else begin
        ap_sig_ready_p_dst_rows_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_dst_rows_V_full_n assign process. ///
always @ (p_dst_rows_V_full_n or ap_reg_ready_p_dst_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_dst_rows_V_full_n)) begin
        ap_sig_ready_p_dst_rows_V_full_n = p_dst_rows_V_full_n;
    end else begin
        ap_sig_ready_p_dst_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_src_cols_V_channel_full_n assign process. ///
always @ (p_src_cols_V_channel_full_n or ap_reg_ready_p_src_cols_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_src_cols_V_channel_full_n)) begin
        ap_sig_ready_p_src_cols_V_channel_full_n = p_src_cols_V_channel_full_n;
    end else begin
        ap_sig_ready_p_src_cols_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_src_cols_V_full_n assign process. ///
always @ (p_src_cols_V_full_n or ap_reg_ready_p_src_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_src_cols_V_full_n)) begin
        ap_sig_ready_p_src_cols_V_full_n = p_src_cols_V_full_n;
    end else begin
        ap_sig_ready_p_src_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_src_rows_V_channel_full_n assign process. ///
always @ (p_src_rows_V_channel_full_n or ap_reg_ready_p_src_rows_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_src_rows_V_channel_full_n)) begin
        ap_sig_ready_p_src_rows_V_channel_full_n = p_src_rows_V_channel_full_n;
    end else begin
        ap_sig_ready_p_src_rows_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_p_src_rows_V_full_n assign process. ///
always @ (p_src_rows_V_full_n or ap_reg_ready_p_src_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_p_src_rows_V_full_n)) begin
        ap_sig_ready_p_src_rows_V_full_n = p_src_rows_V_full_n;
    end else begin
        ap_sig_ready_p_src_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src0_cols_V_channel_full_n assign process. ///
always @ (src0_cols_V_channel_full_n or ap_reg_ready_src0_cols_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src0_cols_V_channel_full_n)) begin
        ap_sig_ready_src0_cols_V_channel_full_n = src0_cols_V_channel_full_n;
    end else begin
        ap_sig_ready_src0_cols_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src0_cols_V_full_n assign process. ///
always @ (src0_cols_V_full_n or ap_reg_ready_src0_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src0_cols_V_full_n)) begin
        ap_sig_ready_src0_cols_V_full_n = src0_cols_V_full_n;
    end else begin
        ap_sig_ready_src0_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src0_rows_V_channel_full_n assign process. ///
always @ (src0_rows_V_channel_full_n or ap_reg_ready_src0_rows_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src0_rows_V_channel_full_n)) begin
        ap_sig_ready_src0_rows_V_channel_full_n = src0_rows_V_channel_full_n;
    end else begin
        ap_sig_ready_src0_rows_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src0_rows_V_full_n assign process. ///
always @ (src0_rows_V_full_n or ap_reg_ready_src0_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src0_rows_V_full_n)) begin
        ap_sig_ready_src0_rows_V_full_n = src0_rows_V_full_n;
    end else begin
        ap_sig_ready_src0_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src1_cols_V_channel_full_n assign process. ///
always @ (src1_cols_V_channel_full_n or ap_reg_ready_src1_cols_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src1_cols_V_channel_full_n)) begin
        ap_sig_ready_src1_cols_V_channel_full_n = src1_cols_V_channel_full_n;
    end else begin
        ap_sig_ready_src1_cols_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src1_cols_V_full_n assign process. ///
always @ (src1_cols_V_full_n or ap_reg_ready_src1_cols_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src1_cols_V_full_n)) begin
        ap_sig_ready_src1_cols_V_full_n = src1_cols_V_full_n;
    end else begin
        ap_sig_ready_src1_cols_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src1_rows_V_channel_full_n assign process. ///
always @ (src1_rows_V_channel_full_n or ap_reg_ready_src1_rows_V_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src1_rows_V_channel_full_n)) begin
        ap_sig_ready_src1_rows_V_channel_full_n = src1_rows_V_channel_full_n;
    end else begin
        ap_sig_ready_src1_rows_V_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_src1_rows_V_full_n assign process. ///
always @ (src1_rows_V_full_n or ap_reg_ready_src1_rows_V_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_src1_rows_V_full_n)) begin
        ap_sig_ready_src1_rows_V_full_n = src1_rows_V_full_n;
    end else begin
        ap_sig_ready_src1_rows_V_full_n = ap_const_logic_1;
    end
end

/// ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) begin
        ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_1_1_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_1_1_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_1_1_U0_ap_ready))) begin
        ap_sig_start_in_init_1_1_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_1_1_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_1_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_1_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_1_U0_ap_ready))) begin
        ap_sig_start_in_init_1_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_1_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_2_1_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_2_1_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_2_1_U0_ap_ready))) begin
        ap_sig_start_in_init_2_1_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_2_1_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_2_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_2_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_2_U0_ap_ready))) begin
        ap_sig_start_in_init_2_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_2_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_3_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_3_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_3_U0_ap_ready))) begin
        ap_sig_start_in_init_3_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_3_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_4_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_4_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_init_4_U0_ap_ready))) begin
        ap_sig_start_in_init_4_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_4_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_init_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_init_U0_ap_ready)
begin
    if (((ap_const_logic_0 == ap_reg_ready_init_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_init_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_init_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_top_allready assign process. ///
always @ (ap_sig_ready_init_U0_ap_ready or ap_sig_ready_init_1_U0_ap_ready or ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready or ap_sig_ready_init_2_U0_ap_ready or ap_sig_ready_init_3_U0_ap_ready or ap_sig_ready_init_4_U0_ap_ready or ap_sig_ready_init_1_1_U0_ap_ready or ap_sig_ready_init_2_1_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_sig_ready_init_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_1_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_2_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_3_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_4_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_1_1_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_init_2_1_U0_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end

/// init_1_1_U0_ap_continue assign process. ///
always @ (ap_sig_ready_dmask_rows_V_full_n or ap_sig_ready_dmask_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_dmask_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_dmask_cols_V_full_n))) begin
        init_1_1_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_1_1_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_1_U0_ap_continue assign process. ///
always @ (ap_sig_ready_p_dst_rows_V_full_n or ap_sig_ready_p_dst_rows_V_channel_full_n or ap_sig_ready_p_dst_cols_V_full_n or ap_sig_ready_p_dst_cols_V_channel_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_p_dst_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_p_dst_rows_V_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_p_dst_cols_V_full_n) & (ap_const_logic_1 == ap_sig_ready_p_dst_cols_V_channel_full_n))) begin
        init_1_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_1_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_2_1_U0_ap_continue assign process. ///
always @ (ap_sig_ready_gray_rows_V_full_n or ap_sig_ready_gray_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_gray_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_gray_cols_V_full_n))) begin
        init_2_1_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_2_1_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_2_U0_ap_continue assign process. ///
always @ (ap_sig_ready_src0_rows_V_full_n or ap_sig_ready_src0_rows_V_channel_full_n or ap_sig_ready_src0_cols_V_full_n or ap_sig_ready_src0_cols_V_channel_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_src0_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_src0_rows_V_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_src0_cols_V_full_n) & (ap_const_logic_1 == ap_sig_ready_src0_cols_V_channel_full_n))) begin
        init_2_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_2_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_3_U0_ap_continue assign process. ///
always @ (ap_sig_ready_src1_rows_V_full_n or ap_sig_ready_src1_rows_V_channel_full_n or ap_sig_ready_src1_cols_V_full_n or ap_sig_ready_src1_cols_V_channel_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_src1_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_src1_rows_V_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_src1_cols_V_full_n) & (ap_const_logic_1 == ap_sig_ready_src1_cols_V_channel_full_n))) begin
        init_3_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_3_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_4_U0_ap_continue assign process. ///
always @ (ap_sig_ready_mask_rows_V_full_n or ap_sig_ready_mask_cols_V_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_mask_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_mask_cols_V_full_n))) begin
        init_4_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_4_U0_ap_continue = ap_const_logic_0;
    end
end

/// init_U0_ap_continue assign process. ///
always @ (ap_sig_ready_p_src_rows_V_full_n or ap_sig_ready_p_src_rows_V_channel_full_n or ap_sig_ready_p_src_cols_V_full_n or ap_sig_ready_p_src_cols_V_channel_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_p_src_rows_V_full_n) & (ap_const_logic_1 == ap_sig_ready_p_src_rows_V_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_p_src_cols_V_full_n) & (ap_const_logic_1 == ap_sig_ready_p_src_cols_V_channel_full_n))) begin
        init_U0_ap_continue = ap_const_logic_1;
    end else begin
        init_U0_ap_continue = ap_const_logic_0;
    end
end
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout = input_V_data_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n = input_V_data_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout = input_V_dest_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n = input_V_dest_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout = input_V_id_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n = input_V_id_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout = input_V_keep_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n = input_V_keep_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout = input_V_last_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n = input_V_last_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout = input_V_strb_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n = input_V_strb_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout = input_V_user_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n = input_V_user_V_empty_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_ap_continue = ap_const_logic_1;
assign AXIvideo2Mat_32_1080_1920_16_U0_ap_start = (p_src_rows_V_empty_n & p_src_cols_V_empty_n & ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start);
assign AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read = p_src_cols_V_dout;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n = p_src_data_stream_0_V_full_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n = p_src_data_stream_1_V_full_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n = p_src_data_stream_2_V_full_n;
assign AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read = p_src_rows_V_dout;
assign CvtColor_1_16_0_1080_1920_U0_ap_continue = ap_const_logic_1;
assign CvtColor_1_16_0_1080_1920_U0_ap_start = (src0_rows_V_channel_empty_n & src0_cols_V_channel_empty_n);
assign CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_full_n = gray_data_stream_0_V_full_n;
assign CvtColor_1_16_0_1080_1920_U0_p_src_cols_V_read = src0_cols_V_channel_dout;
assign CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_dout = src0_data_stream_0_V_dout;
assign CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_empty_n = src0_data_stream_0_V_empty_n;
assign CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_dout = src0_data_stream_1_V_dout;
assign CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_empty_n = src0_data_stream_1_V_empty_n;
assign CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_dout = src0_data_stream_2_V_dout;
assign CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_empty_n = src0_data_stream_2_V_empty_n;
assign CvtColor_1_16_0_1080_1920_U0_p_src_rows_V_read = src0_rows_V_channel_dout;
assign Dilate_0_0_1080_1920_U0_ap_continue = ap_const_logic_1;
assign Dilate_0_0_1080_1920_U0_ap_start = (mask_rows_V_empty_n & mask_cols_V_empty_n);
assign Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_full_n = dmask_data_stream_0_V_full_n;
assign Dilate_0_0_1080_1920_U0_p_src_cols_V_read = mask_cols_V_dout;
assign Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_dout = mask_data_stream_0_V_dout;
assign Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_empty_n = mask_data_stream_0_V_empty_n;
assign Dilate_0_0_1080_1920_U0_p_src_rows_V_read = mask_rows_V_dout;
assign Duplicate_1080_1920_16_16_U0_ap_continue = ap_const_logic_1;
assign Duplicate_1080_1920_16_16_U0_ap_start = (p_src_rows_V_channel_empty_n & p_src_cols_V_channel_empty_n & src0_rows_V_empty_n & src0_cols_V_empty_n & src1_rows_V_empty_n & src1_cols_V_empty_n);
assign Duplicate_1080_1920_16_16_U0_dst1_cols_V_read = src0_cols_V_dout;
assign Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_full_n = src0_data_stream_0_V_full_n;
assign Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_full_n = src0_data_stream_1_V_full_n;
assign Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_full_n = src0_data_stream_2_V_full_n;
assign Duplicate_1080_1920_16_16_U0_dst1_rows_V_read = src0_rows_V_dout;
assign Duplicate_1080_1920_16_16_U0_dst2_cols_V_read = src1_cols_V_dout;
assign Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_full_n = src1_data_stream_0_V_full_n;
assign Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_full_n = src1_data_stream_1_V_full_n;
assign Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_full_n = src1_data_stream_2_V_full_n;
assign Duplicate_1080_1920_16_16_U0_dst2_rows_V_read = src1_rows_V_dout;
assign Duplicate_1080_1920_16_16_U0_src_cols_V_read = p_src_cols_V_channel_dout;
assign Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_dout = p_src_data_stream_0_V_dout;
assign Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_empty_n = p_src_data_stream_0_V_empty_n;
assign Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_dout = p_src_data_stream_1_V_dout;
assign Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_empty_n = p_src_data_stream_1_V_empty_n;
assign Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_dout = p_src_data_stream_2_V_dout;
assign Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_empty_n = p_src_data_stream_2_V_empty_n;
assign Duplicate_1080_1920_16_16_U0_src_rows_V_read = p_src_rows_V_channel_dout;
assign FAST_t_opr_16_7_0_1080_1920_U0_ap_continue = ap_const_logic_1;
assign FAST_t_opr_16_7_0_1080_1920_U0_ap_start = (gray_rows_V_empty_n & gray_cols_V_empty_n);
assign FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_full_n = mask_data_stream_0_V_full_n;
assign FAST_t_opr_16_7_0_1080_1920_U0_p_src_cols_V_read = gray_cols_V_dout;
assign FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_dout = gray_data_stream_0_V_dout;
assign FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_empty_n = gray_data_stream_0_V_empty_n;
assign FAST_t_opr_16_7_0_1080_1920_U0_p_src_rows_V_read = gray_rows_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n = output_V_data_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n = output_V_dest_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n = output_V_id_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n = output_V_keep_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n = output_V_last_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n = output_V_strb_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n = output_V_user_V_full_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_ap_continue = ap_sig_hs_continue;
assign Mat2AXIvideo_32_1080_1920_16_U0_ap_start = (p_dst_rows_V_channel_empty_n & p_dst_cols_V_channel_empty_n);
assign Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read = p_dst_cols_V_channel_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout = p_dst_data_stream_0_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n = p_dst_data_stream_0_V_empty_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout = p_dst_data_stream_1_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n = p_dst_data_stream_1_V_empty_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout = p_dst_data_stream_2_V_dout;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n = p_dst_data_stream_2_V_empty_n;
assign Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read = p_dst_rows_V_channel_dout;
assign PaintMask_16_0_1080_1920_U0_ap_continue = ap_const_logic_1;
assign PaintMask_16_0_1080_1920_U0_ap_start = (p_dst_rows_V_empty_n & p_dst_cols_V_empty_n & src1_rows_V_channel_empty_n & src1_cols_V_channel_empty_n & dmask_rows_V_empty_n & dmask_cols_V_empty_n);
assign PaintMask_16_0_1080_1920_U0_p_dst_cols_V_read = p_dst_cols_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_full_n = p_dst_data_stream_0_V_full_n;
assign PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_full_n = p_dst_data_stream_1_V_full_n;
assign PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_full_n = p_dst_data_stream_2_V_full_n;
assign PaintMask_16_0_1080_1920_U0_p_dst_rows_V_read = p_dst_rows_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_mask_cols_V_read = dmask_cols_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_dout = dmask_data_stream_0_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_empty_n = dmask_data_stream_0_V_empty_n;
assign PaintMask_16_0_1080_1920_U0_p_mask_rows_V_read = dmask_rows_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_src_cols_V_read = src1_cols_V_channel_dout;
assign PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_dout = src1_data_stream_0_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_empty_n = src1_data_stream_0_V_empty_n;
assign PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_dout = src1_data_stream_1_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_empty_n = src1_data_stream_1_V_empty_n;
assign PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_dout = src1_data_stream_2_V_dout;
assign PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_empty_n = src1_data_stream_2_V_empty_n;
assign PaintMask_16_0_1080_1920_U0_p_src_rows_V_read = src1_rows_V_channel_dout;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;
assign dmask_cols_V_ap_dummy_ce = ap_const_logic_1;
assign dmask_cols_V_din = init_1_1_U0_ap_return_1;
assign dmask_cols_V_read = PaintMask_16_0_1080_1920_U0_ap_ready;
assign dmask_cols_V_write = ap_chn_write_init_1_1_U0_dmask_cols_V;
assign dmask_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign dmask_data_stream_0_V_din = Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_din;
assign dmask_data_stream_0_V_read = PaintMask_16_0_1080_1920_U0_p_mask_data_stream_0_V_read;
assign dmask_data_stream_0_V_write = Dilate_0_0_1080_1920_U0_p_dst_data_stream_0_V_write;
assign dmask_rows_V_ap_dummy_ce = ap_const_logic_1;
assign dmask_rows_V_din = init_1_1_U0_ap_return_0;
assign dmask_rows_V_read = PaintMask_16_0_1080_1920_U0_ap_ready;
assign dmask_rows_V_write = ap_chn_write_init_1_1_U0_dmask_rows_V;
assign gray_cols_V_ap_dummy_ce = ap_const_logic_1;
assign gray_cols_V_din = init_2_1_U0_ap_return_1;
assign gray_cols_V_read = FAST_t_opr_16_7_0_1080_1920_U0_ap_ready;
assign gray_cols_V_write = ap_chn_write_init_2_1_U0_gray_cols_V;
assign gray_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign gray_data_stream_0_V_din = CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_din;
assign gray_data_stream_0_V_read = FAST_t_opr_16_7_0_1080_1920_U0_p_src_data_stream_0_V_read;
assign gray_data_stream_0_V_write = CvtColor_1_16_0_1080_1920_U0_p_dst_data_stream_0_V_write;
assign gray_rows_V_ap_dummy_ce = ap_const_logic_1;
assign gray_rows_V_din = init_2_1_U0_ap_return_0;
assign gray_rows_V_read = FAST_t_opr_16_7_0_1080_1920_U0_ap_ready;
assign gray_rows_V_write = ap_chn_write_init_2_1_U0_gray_rows_V;
assign init_1_1_U0_ap_start = ap_sig_start_in_init_1_1_U0_ap_start;
assign init_1_1_U0_p_cols = cols;
assign init_1_1_U0_p_rows = rows;
assign init_1_U0_ap_start = ap_sig_start_in_init_1_U0_ap_start;
assign init_1_U0_p_cols = cols;
assign init_1_U0_p_rows = rows;
assign init_2_1_U0_ap_start = ap_sig_start_in_init_2_1_U0_ap_start;
assign init_2_1_U0_p_cols = cols;
assign init_2_1_U0_p_rows = rows;
assign init_2_U0_ap_start = ap_sig_start_in_init_2_U0_ap_start;
assign init_2_U0_p_cols = cols;
assign init_2_U0_p_rows = rows;
assign init_3_U0_ap_start = ap_sig_start_in_init_3_U0_ap_start;
assign init_3_U0_p_cols = cols;
assign init_3_U0_p_rows = rows;
assign init_4_U0_ap_start = ap_sig_start_in_init_4_U0_ap_start;
assign init_4_U0_p_cols = cols;
assign init_4_U0_p_rows = rows;
assign init_U0_ap_start = ap_sig_start_in_init_U0_ap_start;
assign init_U0_p_cols = cols;
assign init_U0_p_rows = rows;
assign input_V_data_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read;
assign input_V_dest_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read;
assign input_V_id_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read;
assign input_V_keep_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read;
assign input_V_last_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read;
assign input_V_strb_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read;
assign input_V_user_V_read = AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read;
assign mask_cols_V_ap_dummy_ce = ap_const_logic_1;
assign mask_cols_V_din = init_4_U0_ap_return_1;
assign mask_cols_V_read = Dilate_0_0_1080_1920_U0_ap_ready;
assign mask_cols_V_write = ap_chn_write_init_4_U0_mask_cols_V;
assign mask_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign mask_data_stream_0_V_din = FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_din;
assign mask_data_stream_0_V_read = Dilate_0_0_1080_1920_U0_p_src_data_stream_0_V_read;
assign mask_data_stream_0_V_write = FAST_t_opr_16_7_0_1080_1920_U0_p_mask_data_stream_0_V_write;
assign mask_rows_V_ap_dummy_ce = ap_const_logic_1;
assign mask_rows_V_din = init_4_U0_ap_return_0;
assign mask_rows_V_read = Dilate_0_0_1080_1920_U0_ap_ready;
assign mask_rows_V_write = ap_chn_write_init_4_U0_mask_rows_V;
assign output_V_data_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din;
assign output_V_data_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write;
assign output_V_dest_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din;
assign output_V_dest_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write;
assign output_V_id_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din;
assign output_V_id_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write;
assign output_V_keep_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din;
assign output_V_keep_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write;
assign output_V_last_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din;
assign output_V_last_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write;
assign output_V_strb_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din;
assign output_V_strb_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write;
assign output_V_user_V_din = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din;
assign output_V_user_V_write = Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write;
assign p_dst_cols_V_ap_dummy_ce = ap_const_logic_1;
assign p_dst_cols_V_channel_ap_dummy_ce = ap_const_logic_1;
assign p_dst_cols_V_channel_din = init_1_U0_ap_return_3;
assign p_dst_cols_V_channel_read = Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
assign p_dst_cols_V_channel_write = ap_chn_write_init_1_U0_p_dst_cols_V_channel;
assign p_dst_cols_V_din = init_1_U0_ap_return_2;
assign p_dst_cols_V_read = PaintMask_16_0_1080_1920_U0_ap_ready;
assign p_dst_cols_V_write = ap_chn_write_init_1_U0_p_dst_cols_V;
assign p_dst_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign p_dst_data_stream_0_V_din = PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_din;
assign p_dst_data_stream_0_V_read = Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read;
assign p_dst_data_stream_0_V_write = PaintMask_16_0_1080_1920_U0_p_dst_data_stream_0_V_write;
assign p_dst_data_stream_1_V_ap_dummy_ce = ap_const_logic_1;
assign p_dst_data_stream_1_V_din = PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_din;
assign p_dst_data_stream_1_V_read = Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read;
assign p_dst_data_stream_1_V_write = PaintMask_16_0_1080_1920_U0_p_dst_data_stream_1_V_write;
assign p_dst_data_stream_2_V_ap_dummy_ce = ap_const_logic_1;
assign p_dst_data_stream_2_V_din = PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_din;
assign p_dst_data_stream_2_V_read = Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read;
assign p_dst_data_stream_2_V_write = PaintMask_16_0_1080_1920_U0_p_dst_data_stream_2_V_write;
assign p_dst_rows_V_ap_dummy_ce = ap_const_logic_1;
assign p_dst_rows_V_channel_ap_dummy_ce = ap_const_logic_1;
assign p_dst_rows_V_channel_din = init_1_U0_ap_return_1;
assign p_dst_rows_V_channel_read = Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
assign p_dst_rows_V_channel_write = ap_chn_write_init_1_U0_p_dst_rows_V_channel;
assign p_dst_rows_V_din = init_1_U0_ap_return_0;
assign p_dst_rows_V_read = PaintMask_16_0_1080_1920_U0_ap_ready;
assign p_dst_rows_V_write = ap_chn_write_init_1_U0_p_dst_rows_V;
assign p_src_cols_V_ap_dummy_ce = ap_const_logic_1;
assign p_src_cols_V_channel_ap_dummy_ce = ap_const_logic_1;
assign p_src_cols_V_channel_din = init_U0_ap_return_3;
assign p_src_cols_V_channel_read = Duplicate_1080_1920_16_16_U0_ap_ready;
assign p_src_cols_V_channel_write = ap_chn_write_init_U0_p_src_cols_V_channel;
assign p_src_cols_V_din = init_U0_ap_return_2;
assign p_src_cols_V_read = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
assign p_src_cols_V_write = ap_chn_write_init_U0_p_src_cols_V;
assign p_src_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign p_src_data_stream_0_V_din = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din;
assign p_src_data_stream_0_V_read = Duplicate_1080_1920_16_16_U0_src_data_stream_0_V_read;
assign p_src_data_stream_0_V_write = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write;
assign p_src_data_stream_1_V_ap_dummy_ce = ap_const_logic_1;
assign p_src_data_stream_1_V_din = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din;
assign p_src_data_stream_1_V_read = Duplicate_1080_1920_16_16_U0_src_data_stream_1_V_read;
assign p_src_data_stream_1_V_write = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write;
assign p_src_data_stream_2_V_ap_dummy_ce = ap_const_logic_1;
assign p_src_data_stream_2_V_din = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din;
assign p_src_data_stream_2_V_read = Duplicate_1080_1920_16_16_U0_src_data_stream_2_V_read;
assign p_src_data_stream_2_V_write = AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write;
assign p_src_rows_V_ap_dummy_ce = ap_const_logic_1;
assign p_src_rows_V_channel_ap_dummy_ce = ap_const_logic_1;
assign p_src_rows_V_channel_din = init_U0_ap_return_1;
assign p_src_rows_V_channel_read = Duplicate_1080_1920_16_16_U0_ap_ready;
assign p_src_rows_V_channel_write = ap_chn_write_init_U0_p_src_rows_V_channel;
assign p_src_rows_V_din = init_U0_ap_return_0;
assign p_src_rows_V_read = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
assign p_src_rows_V_write = ap_chn_write_init_U0_p_src_rows_V;
assign src0_cols_V_ap_dummy_ce = ap_const_logic_1;
assign src0_cols_V_channel_ap_dummy_ce = ap_const_logic_1;
assign src0_cols_V_channel_din = init_2_U0_ap_return_3;
assign src0_cols_V_channel_read = CvtColor_1_16_0_1080_1920_U0_ap_ready;
assign src0_cols_V_channel_write = ap_chn_write_init_2_U0_src0_cols_V_channel;
assign src0_cols_V_din = init_2_U0_ap_return_2;
assign src0_cols_V_read = Duplicate_1080_1920_16_16_U0_ap_ready;
assign src0_cols_V_write = ap_chn_write_init_2_U0_src0_cols_V;
assign src0_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign src0_data_stream_0_V_din = Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_din;
assign src0_data_stream_0_V_read = CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_0_V_read;
assign src0_data_stream_0_V_write = Duplicate_1080_1920_16_16_U0_dst1_data_stream_0_V_write;
assign src0_data_stream_1_V_ap_dummy_ce = ap_const_logic_1;
assign src0_data_stream_1_V_din = Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_din;
assign src0_data_stream_1_V_read = CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_1_V_read;
assign src0_data_stream_1_V_write = Duplicate_1080_1920_16_16_U0_dst1_data_stream_1_V_write;
assign src0_data_stream_2_V_ap_dummy_ce = ap_const_logic_1;
assign src0_data_stream_2_V_din = Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_din;
assign src0_data_stream_2_V_read = CvtColor_1_16_0_1080_1920_U0_p_src_data_stream_2_V_read;
assign src0_data_stream_2_V_write = Duplicate_1080_1920_16_16_U0_dst1_data_stream_2_V_write;
assign src0_rows_V_ap_dummy_ce = ap_const_logic_1;
assign src0_rows_V_channel_ap_dummy_ce = ap_const_logic_1;
assign src0_rows_V_channel_din = init_2_U0_ap_return_1;
assign src0_rows_V_channel_read = CvtColor_1_16_0_1080_1920_U0_ap_ready;
assign src0_rows_V_channel_write = ap_chn_write_init_2_U0_src0_rows_V_channel;
assign src0_rows_V_din = init_2_U0_ap_return_0;
assign src0_rows_V_read = Duplicate_1080_1920_16_16_U0_ap_ready;
assign src0_rows_V_write = ap_chn_write_init_2_U0_src0_rows_V;
assign src1_cols_V_ap_dummy_ce = ap_const_logic_1;
assign src1_cols_V_channel_ap_dummy_ce = ap_const_logic_1;
assign src1_cols_V_channel_din = init_3_U0_ap_return_3;
assign src1_cols_V_channel_read = PaintMask_16_0_1080_1920_U0_ap_ready;
assign src1_cols_V_channel_write = ap_chn_write_init_3_U0_src1_cols_V_channel;
assign src1_cols_V_din = init_3_U0_ap_return_2;
assign src1_cols_V_read = Duplicate_1080_1920_16_16_U0_ap_ready;
assign src1_cols_V_write = ap_chn_write_init_3_U0_src1_cols_V;
assign src1_data_stream_0_V_ap_dummy_ce = ap_const_logic_1;
assign src1_data_stream_0_V_din = Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_din;
assign src1_data_stream_0_V_read = PaintMask_16_0_1080_1920_U0_p_src_data_stream_0_V_read;
assign src1_data_stream_0_V_write = Duplicate_1080_1920_16_16_U0_dst2_data_stream_0_V_write;
assign src1_data_stream_1_V_ap_dummy_ce = ap_const_logic_1;
assign src1_data_stream_1_V_din = Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_din;
assign src1_data_stream_1_V_read = PaintMask_16_0_1080_1920_U0_p_src_data_stream_1_V_read;
assign src1_data_stream_1_V_write = Duplicate_1080_1920_16_16_U0_dst2_data_stream_1_V_write;
assign src1_data_stream_2_V_ap_dummy_ce = ap_const_logic_1;
assign src1_data_stream_2_V_din = Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_din;
assign src1_data_stream_2_V_read = PaintMask_16_0_1080_1920_U0_p_src_data_stream_2_V_read;
assign src1_data_stream_2_V_write = Duplicate_1080_1920_16_16_U0_dst2_data_stream_2_V_write;
assign src1_rows_V_ap_dummy_ce = ap_const_logic_1;
assign src1_rows_V_channel_ap_dummy_ce = ap_const_logic_1;
assign src1_rows_V_channel_din = init_3_U0_ap_return_1;
assign src1_rows_V_channel_read = PaintMask_16_0_1080_1920_U0_ap_ready;
assign src1_rows_V_channel_write = ap_chn_write_init_3_U0_src1_rows_V_channel;
assign src1_rows_V_din = init_3_U0_ap_return_0;
assign src1_rows_V_read = Duplicate_1080_1920_16_16_U0_ap_ready;
assign src1_rows_V_write = ap_chn_write_init_3_U0_src1_rows_V;


endmodule //image_filter

